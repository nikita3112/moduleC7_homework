#!/usr/bin/env node
'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('@istanbuljs/load-nyc-config'),
    loadNycConfig = _require.loadNycConfig;

function main() {
  var _process$argv$slice, _process$argv$slice2, cwd, nycrcPath;

  return regeneratorRuntime.async(function main$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _process$argv$slice = process.argv.slice(2), _process$argv$slice2 = _slicedToArray(_process$argv$slice, 2), cwd = _process$argv$slice2[0], nycrcPath = _process$argv$slice2[1];
          _context.t0 = console;
          _context.t1 = JSON;
          _context.next = 5;
          return regeneratorRuntime.awrap(loadNycConfig({
            cwd: cwd,
            nycrcPath: nycrcPath
          }));

        case 5:
          _context.t2 = _context.sent;
          _context.t3 = _context.t1.stringify.call(_context.t1, _context.t2);

          _context.t0.log.call(_context.t0, _context.t3);

        case 8:
        case "end":
          return _context.stop();
      }
    }
  });
}

main()["catch"](function (error) {
  console.log(JSON.stringify({
    'load-nyc-config-sync-error': error.message
  }));
});