/*
 Copyright 2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var debug = require('debug')('istanbuljs');

var libCoverage = require('istanbul-lib-coverage');

var _require = require('./mapped'),
    MappedCoverage = _require.MappedCoverage;

var getMapping = require('./get-mapping');

var _require2 = require('./transform-utils'),
    getUniqueKey = _require2.getUniqueKey,
    getOutput = _require2.getOutput;

var SourceMapTransformer =
/*#__PURE__*/
function () {
  function SourceMapTransformer(finder) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, SourceMapTransformer);

    this.finder = finder;
    this.baseDir = opts.baseDir || process.cwd();
  }

  _createClass(SourceMapTransformer, [{
    key: "processFile",
    value: function processFile(fc, sourceMap, coverageMapper) {
      var changes = 0;
      Object.entries(fc.statementMap).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            s = _ref2[0],
            loc = _ref2[1];

        var hits = fc.s[s];
        var mapping = getMapping(sourceMap, loc, fc.path);

        if (mapping) {
          changes += 1;
          var mappedCoverage = coverageMapper(mapping.source);
          mappedCoverage.addStatement(mapping.loc, hits);
        }
      });
      Object.entries(fc.fnMap).forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            f = _ref4[0],
            fnMeta = _ref4[1];

        var hits = fc.f[f];
        var mapping = getMapping(sourceMap, fnMeta.decl, fc.path);
        var spanMapping = getMapping(sourceMap, fnMeta.loc, fc.path);

        if (mapping && spanMapping && mapping.source === spanMapping.source) {
          changes += 1;
          var mappedCoverage = coverageMapper(mapping.source);
          mappedCoverage.addFunction(fnMeta.name, mapping.loc, spanMapping.loc, hits);
        }
      });
      Object.entries(fc.branchMap).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            b = _ref6[0],
            branchMeta = _ref6[1];

        var hits = fc.b[b];
        var locs = [];
        var mappedHits = [];
        var source;
        var skip;
        branchMeta.locations.forEach(function (loc, i) {
          var mapping = getMapping(sourceMap, loc, fc.path);

          if (mapping) {
            if (!source) {
              source = mapping.source;
            }

            if (mapping.source !== source) {
              skip = true;
            }

            locs.push(mapping.loc);
            mappedHits.push(hits[i]);
          }
        });

        if (!skip && locs.length > 0) {
          changes += 1;
          var mappedCoverage = coverageMapper(source);
          mappedCoverage.addBranch(branchMeta.type, locs[0]
          /* XXX */
          , locs, mappedHits);
        }
      });
      return changes > 0;
    }
  }, {
    key: "transform",
    value: function transform(coverageMap) {
      var uniqueFiles, getMappedCoverage, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, fc, sourceMap, changed;

      return regeneratorRuntime.async(function transform$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              uniqueFiles = {};

              getMappedCoverage = function getMappedCoverage(file) {
                var key = getUniqueKey(file);

                if (!uniqueFiles[key]) {
                  uniqueFiles[key] = {
                    file: file,
                    mappedCoverage: new MappedCoverage(file)
                  };
                }

                return uniqueFiles[key].mappedCoverage;
              };

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = coverageMap.files()[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 17;
                break;
              }

              file = _step.value;
              fc = coverageMap.fileCoverageFor(file);
              _context.next = 12;
              return regeneratorRuntime.awrap(this.finder(file, fc));

            case 12:
              sourceMap = _context.sent;

              if (sourceMap) {
                changed = this.processFile(fc, sourceMap, getMappedCoverage);

                if (!changed) {
                  debug("File [".concat(file, "] ignored, nothing could be mapped"));
                }
              } else {
                uniqueFiles[getUniqueKey(file)] = {
                  file: file,
                  mappedCoverage: new MappedCoverage(fc)
                };
              }

            case 14:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 17:
              _context.next = 23;
              break;

            case 19:
              _context.prev = 19;
              _context.t0 = _context["catch"](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 23:
              _context.prev = 23;
              _context.prev = 24;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 26:
              _context.prev = 26;

              if (!_didIteratorError) {
                _context.next = 29;
                break;
              }

              throw _iteratorError;

            case 29:
              return _context.finish(26);

            case 30:
              return _context.finish(23);

            case 31:
              return _context.abrupt("return", libCoverage.createCoverageMap(getOutput(uniqueFiles)));

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[5, 19, 23, 31], [24,, 26, 30]]);
    }
  }]);

  return SourceMapTransformer;
}();

module.exports = {
  SourceMapTransformer: SourceMapTransformer
};