/*
 Copyright 2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FileCoverage = require('istanbul-lib-coverage').classes.FileCoverage;

function locString(loc) {
  return [loc.start.line, loc.start.column, loc.end.line, loc.end.column].join(':');
}

var MappedCoverage =
/*#__PURE__*/
function (_FileCoverage) {
  _inherits(MappedCoverage, _FileCoverage);

  function MappedCoverage(pathOrObj) {
    var _this;

    _classCallCheck(this, MappedCoverage);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MappedCoverage).call(this, pathOrObj));
    _this.meta = {
      last: {
        s: 0,
        f: 0,
        b: 0
      },
      seen: {}
    };
    return _this;
  }

  _createClass(MappedCoverage, [{
    key: "addStatement",
    value: function addStatement(loc, hits) {
      var key = 's:' + locString(loc);
      var meta = this.meta;
      var index = meta.seen[key];

      if (index === undefined) {
        index = meta.last.s;
        meta.last.s += 1;
        meta.seen[key] = index;
        this.statementMap[index] = this.cloneLocation(loc);
      }

      this.s[index] = this.s[index] || 0;
      this.s[index] += hits;
      return index;
    }
  }, {
    key: "addFunction",
    value: function addFunction(name, decl, loc, hits) {
      var key = 'f:' + locString(decl);
      var meta = this.meta;
      var index = meta.seen[key];

      if (index === undefined) {
        index = meta.last.f;
        meta.last.f += 1;
        meta.seen[key] = index;
        name = name || "(unknown_".concat(index, ")");
        this.fnMap[index] = {
          name: name,
          decl: this.cloneLocation(decl),
          loc: this.cloneLocation(loc)
        };
      }

      this.f[index] = this.f[index] || 0;
      this.f[index] += hits;
      return index;
    }
  }, {
    key: "addBranch",
    value: function addBranch(type, loc, branchLocations, hits) {
      var _this2 = this;

      var key = ['b'].concat(_toConsumableArray(branchLocations.map(function (l) {
        return locString(l);
      }))).join(':');
      var meta = this.meta;
      var index = meta.seen[key];

      if (index === undefined) {
        index = meta.last.b;
        meta.last.b += 1;
        meta.seen[key] = index;
        this.branchMap[index] = {
          loc: loc,
          type: type,
          locations: branchLocations.map(function (l) {
            return _this2.cloneLocation(l);
          })
        };
      }

      if (!this.b[index]) {
        this.b[index] = branchLocations.map(function () {
          return 0;
        });
      }

      hits.forEach(function (hit, i) {
        _this2.b[index][i] += hit;
      });
      return index;
    }
    /* Returns a clone of the location object with only the attributes of interest */

  }, {
    key: "cloneLocation",
    value: function cloneLocation(loc) {
      return {
        start: {
          line: loc.start.line,
          column: loc.start.column
        },
        end: {
          line: loc.end.line,
          column: loc.end.column
        }
      };
    }
  }]);

  return MappedCoverage;
}(FileCoverage);

module.exports = {
  MappedCoverage: MappedCoverage
};