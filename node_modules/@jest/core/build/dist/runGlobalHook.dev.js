'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _pEachSeries() {
  var data = _interopRequireDefault(require('p-each-series'));

  _pEachSeries = function _pEachSeries() {
    return data;
  };

  return data;
}

function _transform() {
  var data = require('@jest/transform');

  _transform = function _transform() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _default = function _default(_ref) {
  var allTests, globalConfig, moduleName, globalModulePaths;
  return regeneratorRuntime.async(function _default$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          allTests = _ref.allTests, globalConfig = _ref.globalConfig, moduleName = _ref.moduleName;
          globalModulePaths = new Set(allTests.map(function (test) {
            return test.context.config[moduleName];
          }));

          if (globalConfig[moduleName]) {
            globalModulePaths.add(globalConfig[moduleName]);
          }

          if (!(globalModulePaths.size > 0)) {
            _context3.next = 6;
            break;
          }

          _context3.next = 6;
          return regeneratorRuntime.awrap((0, _pEachSeries()["default"])(Array.from(globalModulePaths), function _callee2(modulePath) {
            var correctConfig, projectConfig, transformer;
            return regeneratorRuntime.async(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    if (modulePath) {
                      _context2.next = 2;
                      break;
                    }

                    return _context2.abrupt("return");

                  case 2:
                    correctConfig = allTests.find(function (t) {
                      return t.context.config[moduleName] === modulePath;
                    });
                    projectConfig = correctConfig ? correctConfig.context.config // Fallback to first config
                    : allTests[0].context.config;
                    transformer = new (_transform().ScriptTransformer)(projectConfig);
                    _context2.next = 7;
                    return regeneratorRuntime.awrap(transformer.requireAndTranspileModule(modulePath, function _callee(m) {
                      var globalModule;
                      return regeneratorRuntime.async(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              globalModule = (0, _jestUtil().interopRequireDefault)(m)["default"];

                              if (!(typeof globalModule !== 'function')) {
                                _context.next = 3;
                                break;
                              }

                              throw new TypeError("".concat(moduleName, " file must export a function at ").concat(modulePath));

                            case 3:
                              _context.next = 5;
                              return regeneratorRuntime.awrap(globalModule(globalConfig));

                            case 5:
                            case "end":
                              return _context.stop();
                          }
                        }
                      });
                    }));

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          }));

        case 6:
          return _context3.abrupt("return", Promise.resolve());

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  });
};

exports["default"] = _default;