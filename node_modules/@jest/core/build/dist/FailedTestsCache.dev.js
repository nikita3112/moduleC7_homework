'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var FailedTestsCache =
/*#__PURE__*/
function () {
  function FailedTestsCache() {
    _classCallCheck(this, FailedTestsCache);

    _defineProperty(this, '_enabledTestsMap', void 0);
  }

  _createClass(FailedTestsCache, [{
    key: "filterTests",
    value: function filterTests(tests) {
      var enabledTestsMap = this._enabledTestsMap;

      if (!enabledTestsMap) {
        return tests;
      }

      return tests.filter(function (testResult) {
        return enabledTestsMap[testResult.path];
      });
    }
  }, {
    key: "setTestResults",
    value: function setTestResults(testResults) {
      this._enabledTestsMap = (testResults || []).filter(function (testResult) {
        return testResult.numFailingTests;
      }).reduce(function (suiteMap, testResult) {
        suiteMap[testResult.testFilePath] = testResult.testResults.filter(function (test) {
          return test.status === 'failed';
        }).reduce(function (testMap, test) {
          testMap[test.fullName] = true;
          return testMap;
        }, {});
        return suiteMap;
      }, {});
      this._enabledTestsMap = Object.freeze(this._enabledTestsMap);
    }
  }, {
    key: "updateConfig",
    value: function updateConfig(globalConfig) {
      if (!this._enabledTestsMap) {
        return globalConfig;
      }

      var newConfig = _objectSpread({}, globalConfig);

      newConfig.enabledTestsMap = this._enabledTestsMap;
      return Object.freeze(newConfig);
    }
  }]);

  return FailedTestsCache;
}();

exports["default"] = FailedTestsCache;