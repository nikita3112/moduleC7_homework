'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _ansiEscapes() {
  var data = _interopRequireDefault(require('ansi-escapes'));

  _ansiEscapes = function _ansiEscapes() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestWatcher() {
  var data = require('jest-watcher');

  _jestWatcher = function _jestWatcher() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _jestUtil$specialChar = _jestUtil().specialChars,
    ARROW = _jestUtil$specialChar.ARROW,
    CLEAR = _jestUtil$specialChar.CLEAR;

var SnapshotInteractiveMode =
/*#__PURE__*/
function () {
  function SnapshotInteractiveMode(pipe) {
    _classCallCheck(this, SnapshotInteractiveMode);

    _defineProperty(this, '_pipe', void 0);

    _defineProperty(this, '_isActive', void 0);

    _defineProperty(this, '_updateTestRunnerConfig', void 0);

    _defineProperty(this, '_testAssertions', void 0);

    _defineProperty(this, '_countPaths', void 0);

    _defineProperty(this, '_skippedNum', void 0);

    this._pipe = pipe;
    this._isActive = false;
    this._skippedNum = 0;
  }

  _createClass(SnapshotInteractiveMode, [{
    key: "isActive",
    value: function isActive() {
      return this._isActive;
    }
  }, {
    key: "getSkippedNum",
    value: function getSkippedNum() {
      return this._skippedNum;
    }
  }, {
    key: "_clearTestSummary",
    value: function _clearTestSummary() {
      this._pipe.write(_ansiEscapes()["default"].cursorUp(6));

      this._pipe.write(_ansiEscapes()["default"].eraseDown);
    }
  }, {
    key: "_drawUIProgress",
    value: function _drawUIProgress() {
      this._clearTestSummary();

      var numPass = this._countPaths - this._testAssertions.length;
      var numRemaining = this._countPaths - numPass - this._skippedNum;

      var stats = _chalk()["default"].bold.dim((0, _jestUtil().pluralize)('snapshot', numRemaining) + ' remaining');

      if (numPass) {
        stats += ', ' + _chalk()["default"].bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');
      }

      if (this._skippedNum) {
        stats += ', ' + _chalk()["default"].bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');
      }

      var messages = ['\n' + _chalk()["default"].bold('Interactive Snapshot Progress'), ARROW + stats, '\n' + _chalk()["default"].bold('Watch Usage'), _chalk()["default"].dim(ARROW + 'Press ') + 'u' + _chalk()["default"].dim(' to update failing snapshots for this test.'), _chalk()["default"].dim(ARROW + 'Press ') + 's' + _chalk()["default"].dim(' to skip the current test.'), _chalk()["default"].dim(ARROW + 'Press ') + 'q' + _chalk()["default"].dim(' to quit Interactive Snapshot Mode.'), _chalk()["default"].dim(ARROW + 'Press ') + 'Enter' + _chalk()["default"].dim(' to trigger a test run.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: "_drawUIDoneWithSkipped",
    value: function _drawUIDoneWithSkipped() {
      this._pipe.write(CLEAR);

      var numPass = this._countPaths - this._testAssertions.length;

      var stats = _chalk()["default"].bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');

      if (numPass) {
        stats += ', ' + _chalk()["default"].bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');
      }

      if (this._skippedNum) {
        stats += ', ' + _chalk()["default"].bold.yellow((0, _jestUtil().pluralize)('snapshot', this._skippedNum) + ' skipped');
      }

      var messages = ['\n' + _chalk()["default"].bold('Interactive Snapshot Result'), ARROW + stats, '\n' + _chalk()["default"].bold('Watch Usage'), _chalk()["default"].dim(ARROW + 'Press ') + 'r' + _chalk()["default"].dim(' to restart Interactive Snapshot Mode.'), _chalk()["default"].dim(ARROW + 'Press ') + 'q' + _chalk()["default"].dim(' to quit Interactive Snapshot Mode.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: "_drawUIDone",
    value: function _drawUIDone() {
      this._pipe.write(CLEAR);

      var numPass = this._countPaths - this._testAssertions.length;

      var stats = _chalk()["default"].bold.dim((0, _jestUtil().pluralize)('snapshot', this._countPaths) + ' reviewed');

      if (numPass) {
        stats += ', ' + _chalk()["default"].bold.green((0, _jestUtil().pluralize)('snapshot', numPass) + ' updated');
      }

      var messages = ['\n' + _chalk()["default"].bold('Interactive Snapshot Result'), ARROW + stats, '\n' + _chalk()["default"].bold('Watch Usage'), _chalk()["default"].dim(ARROW + 'Press ') + 'Enter' + _chalk()["default"].dim(' to return to watch mode.')];

      this._pipe.write(messages.filter(Boolean).join('\n') + '\n');
    }
  }, {
    key: "_drawUIOverlay",
    value: function _drawUIOverlay() {
      if (this._testAssertions.length === 0) {
        return this._drawUIDone();
      }

      if (this._testAssertions.length - this._skippedNum === 0) {
        return this._drawUIDoneWithSkipped();
      }

      return this._drawUIProgress();
    }
  }, {
    key: "put",
    value: function put(key) {
      switch (key) {
        case 's':
          if (this._skippedNum === this._testAssertions.length) break;
          this._skippedNum += 1; // move skipped test to the end

          this._testAssertions.push(this._testAssertions.shift());

          if (this._testAssertions.length - this._skippedNum > 0) {
            this._run(false);
          } else {
            this._drawUIDoneWithSkipped();
          }

          break;

        case 'u':
          this._run(true);

          break;

        case 'q':
        case _jestWatcher().KEYS.ESCAPE:
          this.abort();
          break;

        case 'r':
          this.restart();
          break;

        case _jestWatcher().KEYS.ENTER:
          if (this._testAssertions.length === 0) {
            this.abort();
          } else {
            this._run(false);
          }

          break;

        default:
          break;
      }
    }
  }, {
    key: "abort",
    value: function abort() {
      this._isActive = false;
      this._skippedNum = 0;

      this._updateTestRunnerConfig(null, false);
    }
  }, {
    key: "restart",
    value: function restart() {
      this._skippedNum = 0;
      this._countPaths = this._testAssertions.length;

      this._run(false);
    }
  }, {
    key: "updateWithResults",
    value: function updateWithResults(results) {
      var hasSnapshotFailure = !!results.snapshot.failure;

      if (hasSnapshotFailure) {
        this._drawUIOverlay();

        return;
      }

      this._testAssertions.shift();

      if (this._testAssertions.length - this._skippedNum === 0) {
        this._drawUIOverlay();

        return;
      } // Go to the next test


      this._run(false);
    }
  }, {
    key: "_run",
    value: function _run(shouldUpdateSnapshot) {
      var testAssertion = this._testAssertions[0];

      this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);
    }
  }, {
    key: "run",
    value: function run(failedSnapshotTestAssertions, onConfigChange) {
      if (!failedSnapshotTestAssertions.length) {
        return;
      }

      this._testAssertions = _toConsumableArray(failedSnapshotTestAssertions);
      this._countPaths = this._testAssertions.length;
      this._updateTestRunnerConfig = onConfigChange;
      this._isActive = true;

      this._run(false);
    }
  }]);

  return SnapshotInteractiveMode;
}();

exports["default"] = SnapshotInteractiveMode;