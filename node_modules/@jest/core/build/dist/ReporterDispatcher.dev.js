'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable local/ban-types-eventually */


var ReporterDispatcher =
/*#__PURE__*/
function () {
  function ReporterDispatcher() {
    _classCallCheck(this, ReporterDispatcher);

    _defineProperty(this, '_reporters', void 0);

    this._reporters = [];
  }

  _createClass(ReporterDispatcher, [{
    key: "register",
    value: function register(reporter) {
      this._reporters.push(reporter);
    }
  }, {
    key: "unregister",
    value: function unregister(ReporterClass) {
      this._reporters = this._reporters.filter(function (reporter) {
        return !(reporter instanceof ReporterClass);
      });
    }
  }, {
    key: "onTestFileResult",
    value: function onTestFileResult(test, testResult, results) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, reporter;

      return regeneratorRuntime.async(function onTestFileResult$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = this._reporters[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 18;
                break;
              }

              reporter = _step.value;

              if (!reporter.onTestFileResult) {
                _context.next = 12;
                break;
              }

              _context.next = 10;
              return regeneratorRuntime.awrap(reporter.onTestFileResult(test, testResult, results));

            case 10:
              _context.next = 15;
              break;

            case 12:
              if (!reporter.onTestResult) {
                _context.next = 15;
                break;
              }

              _context.next = 15;
              return regeneratorRuntime.awrap(reporter.onTestResult(test, testResult, results));

            case 15:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 18:
              _context.next = 24;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 24:
              _context.prev = 24;
              _context.prev = 25;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 27:
              _context.prev = 27;

              if (!_didIteratorError) {
                _context.next = 30;
                break;
              }

              throw _iteratorError;

            case 30:
              return _context.finish(27);

            case 31:
              return _context.finish(24);

            case 32:
              // Release memory if unused later.
              testResult.sourceMaps = undefined;
              testResult.coverage = undefined;
              testResult.console = undefined;

            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[3, 20, 24, 32], [25,, 27, 31]]);
    }
  }, {
    key: "onTestFileStart",
    value: function onTestFileStart(test) {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, reporter;

      return regeneratorRuntime.async(function onTestFileStart$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 3;
              _iterator2 = this._reporters[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context2.next = 18;
                break;
              }

              reporter = _step2.value;

              if (!reporter.onTestFileStart) {
                _context2.next = 12;
                break;
              }

              _context2.next = 10;
              return regeneratorRuntime.awrap(reporter.onTestFileStart(test));

            case 10:
              _context2.next = 15;
              break;

            case 12:
              if (!reporter.onTestStart) {
                _context2.next = 15;
                break;
              }

              _context2.next = 15;
              return regeneratorRuntime.awrap(reporter.onTestStart(test));

            case 15:
              _iteratorNormalCompletion2 = true;
              _context2.next = 5;
              break;

            case 18:
              _context2.next = 24;
              break;

            case 20:
              _context2.prev = 20;
              _context2.t0 = _context2["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t0;

            case 24:
              _context2.prev = 24;
              _context2.prev = 25;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 27:
              _context2.prev = 27;

              if (!_didIteratorError2) {
                _context2.next = 30;
                break;
              }

              throw _iteratorError2;

            case 30:
              return _context2.finish(27);

            case 31:
              return _context2.finish(24);

            case 32:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[3, 20, 24, 32], [25,, 27, 31]]);
    }
  }, {
    key: "onRunStart",
    value: function onRunStart(results, options) {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, reporter;

      return regeneratorRuntime.async(function onRunStart$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context3.prev = 3;
              _iterator3 = this._reporters[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context3.next = 14;
                break;
              }

              reporter = _step3.value;
              _context3.t0 = reporter.onRunStart;

              if (!_context3.t0) {
                _context3.next = 11;
                break;
              }

              _context3.next = 11;
              return regeneratorRuntime.awrap(reporter.onRunStart(results, options));

            case 11:
              _iteratorNormalCompletion3 = true;
              _context3.next = 5;
              break;

            case 14:
              _context3.next = 20;
              break;

            case 16:
              _context3.prev = 16;
              _context3.t1 = _context3["catch"](3);
              _didIteratorError3 = true;
              _iteratorError3 = _context3.t1;

            case 20:
              _context3.prev = 20;
              _context3.prev = 21;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 23:
              _context3.prev = 23;

              if (!_didIteratorError3) {
                _context3.next = 26;
                break;
              }

              throw _iteratorError3;

            case 26:
              return _context3.finish(23);

            case 27:
              return _context3.finish(20);

            case 28:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[3, 16, 20, 28], [21,, 23, 27]]);
    }
  }, {
    key: "onTestCaseResult",
    value: function onTestCaseResult(test, testCaseResult) {
      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, reporter;

      return regeneratorRuntime.async(function onTestCaseResult$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context4.prev = 3;
              _iterator4 = this._reporters[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context4.next = 13;
                break;
              }

              reporter = _step4.value;

              if (!reporter.onTestCaseResult) {
                _context4.next = 10;
                break;
              }

              _context4.next = 10;
              return regeneratorRuntime.awrap(reporter.onTestCaseResult(test, testCaseResult));

            case 10:
              _iteratorNormalCompletion4 = true;
              _context4.next = 5;
              break;

            case 13:
              _context4.next = 19;
              break;

            case 15:
              _context4.prev = 15;
              _context4.t0 = _context4["catch"](3);
              _didIteratorError4 = true;
              _iteratorError4 = _context4.t0;

            case 19:
              _context4.prev = 19;
              _context4.prev = 20;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 22:
              _context4.prev = 22;

              if (!_didIteratorError4) {
                _context4.next = 25;
                break;
              }

              throw _iteratorError4;

            case 25:
              return _context4.finish(22);

            case 26:
              return _context4.finish(19);

            case 27:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    }
  }, {
    key: "onRunComplete",
    value: function onRunComplete(contexts, results) {
      var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, reporter;

      return regeneratorRuntime.async(function onRunComplete$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context5.prev = 3;
              _iterator5 = this._reporters[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context5.next = 13;
                break;
              }

              reporter = _step5.value;

              if (!reporter.onRunComplete) {
                _context5.next = 10;
                break;
              }

              _context5.next = 10;
              return regeneratorRuntime.awrap(reporter.onRunComplete(contexts, results));

            case 10:
              _iteratorNormalCompletion5 = true;
              _context5.next = 5;
              break;

            case 13:
              _context5.next = 19;
              break;

            case 15:
              _context5.prev = 15;
              _context5.t0 = _context5["catch"](3);
              _didIteratorError5 = true;
              _iteratorError5 = _context5.t0;

            case 19:
              _context5.prev = 19;
              _context5.prev = 20;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 22:
              _context5.prev = 22;

              if (!_didIteratorError5) {
                _context5.next = 25;
                break;
              }

              throw _iteratorError5;

            case 25:
              return _context5.finish(22);

            case 26:
              return _context5.finish(19);

            case 27:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    } // Return a list of last errors for every reporter

  }, {
    key: "getErrors",
    value: function getErrors() {
      return this._reporters.reduce(function (list, reporter) {
        var error = reporter.getLastError && reporter.getLastError();
        return error ? list.concat(error) : list;
      }, []);
    }
  }, {
    key: "hasErrors",
    value: function hasErrors() {
      return this.getErrors().length !== 0;
    }
  }]);

  return ReporterDispatcher;
}();

exports["default"] = ReporterDispatcher;