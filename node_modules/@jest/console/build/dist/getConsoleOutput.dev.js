'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _default = function _default(root, verbose, buffer) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    rootDir: root,
    testMatch: []
  };
  var globalConfig = arguments.length > 4 ? arguments[4] : undefined;
  var TITLE_INDENT = verbose ? '  ' : '    ';
  var CONSOLE_INDENT = TITLE_INDENT + '  ';
  var logEntries = buffer.reduce(function (output, _ref) {
    var type = _ref.type,
        message = _ref.message,
        origin = _ref.origin;
    message = message.split(/\n/).map(function (line) {
      return CONSOLE_INDENT + line;
    }).join('\n');
    var typeMessage = 'console.' + type;
    var noStackTrace = true;
    var noCodeFrame = true;

    if (type === 'warn') {
      var _globalConfig$noStack;

      message = _chalk()["default"].yellow(message);
      typeMessage = _chalk()["default"].yellow(typeMessage);
      noStackTrace = (_globalConfig$noStack = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack !== void 0 ? _globalConfig$noStack : false;
      noCodeFrame = false;
    } else if (type === 'error') {
      var _globalConfig$noStack2;

      message = _chalk()["default"].red(message);
      typeMessage = _chalk()["default"].red(typeMessage);
      noStackTrace = (_globalConfig$noStack2 = globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.noStackTrace) !== null && _globalConfig$noStack2 !== void 0 ? _globalConfig$noStack2 : false;
      noCodeFrame = false;
    }

    var options = {
      noCodeFrame: noCodeFrame,
      noStackTrace: noStackTrace
    };
    var formattedStackTrace = (0, _jestMessageUtil().formatStackTrace)(origin, config, options);
    return output + TITLE_INDENT + _chalk()["default"].dim(typeMessage) + '\n' + message.trimRight() + '\n' + _chalk()["default"].dim(formattedStackTrace.trimRight()) + '\n\n';
  }, '');
  return logEntries.trimRight() + '\n';
};

exports["default"] = _default;