'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _assert() {
  var data = _interopRequireDefault(require('assert'));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _util() {
  var data = require('util');

  _util = function _util() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var BufferedConsole =
/*#__PURE__*/
function (_console$Console) {
  _inherits(BufferedConsole, _console$Console);

  function BufferedConsole() {
    var _this;

    _classCallCheck(this, BufferedConsole);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BufferedConsole).call(this, {
      write: function write(message) {
        BufferedConsole.write(_this._buffer, 'log', message, null);
        return true;
      }
    }));

    _defineProperty(_assertThisInitialized(_this), '_buffer', []);

    _defineProperty(_assertThisInitialized(_this), '_counters', {});

    _defineProperty(_assertThisInitialized(_this), '_timers', {});

    _defineProperty(_assertThisInitialized(_this), '_groupDepth', 0);

    _defineProperty(_assertThisInitialized(_this), 'Console', _console().Console);

    return _this;
  }

  _createClass(BufferedConsole, [{
    key: "_log",
    value: function _log(type, message) {
      BufferedConsole.write(this._buffer, type, '  '.repeat(this._groupDepth) + message, 3);
    }
  }, {
    key: "assert",
    value: function assert(value, message) {
      try {
        (0, _assert()["default"])(value, message);
      } catch (error) {
        this._log('assert', error.toString());
      }
    }
  }, {
    key: "count",
    value: function count() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (!this._counters[label]) {
        this._counters[label] = 0;
      }

      this._log('count', (0, _util().format)("".concat(label, ": ").concat(++this._counters[label])));
    }
  }, {
    key: "countReset",
    value: function countReset() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
      this._counters[label] = 0;
    }
  }, {
    key: "debug",
    value: function debug(firstArg) {
      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }

      this._log('debug', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "dir",
    value: function dir(firstArg) {
      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }

      this._log('dir', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "dirxml",
    value: function dirxml(firstArg) {
      for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        rest[_key3 - 1] = arguments[_key3];
      }

      this._log('dirxml', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "error",
    value: function error(firstArg) {
      for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        rest[_key4 - 1] = arguments[_key4];
      }

      this._log('error', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "group",
    value: function group(title) {
      this._groupDepth++;

      for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        rest[_key5 - 1] = arguments[_key5];
      }

      if (title || rest.length > 0) {
        this._log('group', _chalk()["default"].bold((0, _util().format).apply(void 0, [title].concat(rest))));
      }
    }
  }, {
    key: "groupCollapsed",
    value: function groupCollapsed(title) {
      this._groupDepth++;

      for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        rest[_key6 - 1] = arguments[_key6];
      }

      if (title || rest.length > 0) {
        this._log('groupCollapsed', _chalk()["default"].bold((0, _util().format).apply(void 0, [title].concat(rest))));
      }
    }
  }, {
    key: "groupEnd",
    value: function groupEnd() {
      if (this._groupDepth > 0) {
        this._groupDepth--;
      }
    }
  }, {
    key: "info",
    value: function info(firstArg) {
      for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        rest[_key7 - 1] = arguments[_key7];
      }

      this._log('info', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "log",
    value: function log(firstArg) {
      for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        rest[_key8 - 1] = arguments[_key8];
      }

      this._log('log', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "time",
    value: function time() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (this._timers[label]) {
        return;
      }

      this._timers[label] = new Date();
    }
  }, {
    key: "timeEnd",
    value: function timeEnd() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
      var startTime = this._timers[label];

      if (startTime) {
        var endTime = new Date();
        var time = endTime.getTime() - startTime.getTime();

        this._log('time', (0, _util().format)("".concat(label, ": ").concat((0, _jestUtil().formatTime)(time))));

        delete this._timers[label];
      }
    }
  }, {
    key: "timeLog",
    value: function timeLog() {
      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
      var startTime = this._timers[label];

      if (startTime) {
        var endTime = new Date();
        var time = endTime.getTime() - startTime.getTime();

        for (var _len9 = arguments.length, data = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
          data[_key9 - 1] = arguments[_key9];
        }

        this._log('time', (0, _util().format).apply(void 0, ["".concat(label, ": ").concat((0, _jestUtil().formatTime)(time))].concat(data)));
      }
    }
  }, {
    key: "warn",
    value: function warn(firstArg) {
      for (var _len10 = arguments.length, rest = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
        rest[_key10 - 1] = arguments[_key10];
      }

      this._log('warn', (0, _util().format).apply(void 0, [firstArg].concat(rest)));
    }
  }, {
    key: "getBuffer",
    value: function getBuffer() {
      return this._buffer.length ? this._buffer : undefined;
    }
  }], [{
    key: "write",
    value: function write(buffer, type, message, level) {
      var stackLevel = level != null ? level : 2;
      var rawStack = new (_jestUtil().ErrorWithStack)(undefined, BufferedConsole.write).stack;
      invariant(rawStack, 'always have a stack trace');
      var origin = rawStack.split('\n').slice(stackLevel).filter(Boolean).join('\n');
      buffer.push({
        message: message,
        origin: origin,
        type: type
      });
      return buffer;
    }
  }]);

  return BufferedConsole;
}(_console().Console);

exports["default"] = BufferedConsole;

function invariant(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}