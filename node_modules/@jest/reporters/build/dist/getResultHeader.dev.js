'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _terminalLink() {
  var data = _interopRequireDefault(require('terminal-link'));

  _terminalLink = function _terminalLink() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var LONG_TEST_COLOR = _chalk()["default"].reset.bold.bgRed; // Explicitly reset for these messages since they can get written out in the
// middle of error logging


var FAIL_TEXT = 'FAIL';
var PASS_TEXT = 'PASS';
var FAIL = _chalk()["default"].supportsColor ? _chalk()["default"].reset.inverse.bold.red(" ".concat(FAIL_TEXT, " ")) : FAIL_TEXT;
var PASS = _chalk()["default"].supportsColor ? _chalk()["default"].reset.inverse.bold.green(" ".concat(PASS_TEXT, " ")) : PASS_TEXT;

var _default = function _default(result, globalConfig, projectConfig) {
  var _result$perfStats;

  var testPath = result.testFilePath;
  var formattedTestPath = (0, _utils.formatTestPath)(projectConfig ? projectConfig : globalConfig, testPath);
  var fileLink = (0, _terminalLink()["default"])(formattedTestPath, "file://".concat(testPath), {
    fallback: function fallback() {
      return formattedTestPath;
    }
  });
  var status = result.numFailingTests > 0 || result.testExecError ? FAIL : PASS;
  var testDetail = [];

  if ((_result$perfStats = result.perfStats) === null || _result$perfStats === void 0 ? void 0 : _result$perfStats.slow) {
    var runTime = result.perfStats.runtime / 1000;
    testDetail.push(LONG_TEST_COLOR((0, _jestUtil().formatTime)(runTime, 0)));
  }

  if (result.memoryUsage) {
    var toMB = function toMB(bytes) {
      return Math.floor(bytes / 1024 / 1024);
    };

    testDetail.push("".concat(toMB(result.memoryUsage), " MB heap size"));
  }

  var projectDisplayName = projectConfig && projectConfig.displayName ? (0, _utils.printDisplayName)(projectConfig) + ' ' : '';
  return "".concat(status, " ").concat(projectDisplayName).concat(fileLink) + (testDetail.length ? " (".concat(testDetail.join(', '), ")") : '');
};

exports["default"] = _default;