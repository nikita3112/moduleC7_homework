'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function util() {
  var data = _interopRequireWildcard(require('util'));

  util = function util() {
    return data;
  };

  return data;
}

function _exit() {
  var data = _interopRequireDefault(require('exit'));

  _exit = function _exit() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _BaseReporter = _interopRequireDefault(require('./BaseReporter'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var isDarwin = process.platform === 'darwin';
var icon = path().resolve(__dirname, '../assets/jest_logo.png');

var NotifyReporter =
/*#__PURE__*/
function (_BaseReporter$default) {
  _inherits(NotifyReporter, _BaseReporter$default);

  function NotifyReporter(globalConfig, startRun, context) {
    var _this;

    _classCallCheck(this, NotifyReporter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NotifyReporter).call(this));

    _defineProperty(_assertThisInitialized(_this), '_notifier', loadNotifier());

    _defineProperty(_assertThisInitialized(_this), '_startRun', void 0);

    _defineProperty(_assertThisInitialized(_this), '_globalConfig', void 0);

    _defineProperty(_assertThisInitialized(_this), '_context', void 0);

    _this._globalConfig = globalConfig;
    _this._startRun = startRun;
    _this._context = context;
    return _this;
  }

  _createClass(NotifyReporter, [{
    key: "onRunComplete",
    value: function onRunComplete(contexts, result) {
      var _this2 = this;

      var success = result.numFailedTests === 0 && result.numRuntimeErrorTestSuites === 0;
      var firstContext = contexts.values().next();
      var hasteFS = firstContext && firstContext.value && firstContext.value.hasteFS;
      var packageName;

      if (hasteFS != null) {
        // assuming root package.json is the first one
        var _hasteFS$matchFiles = hasteFS.matchFiles('package.json'),
            _hasteFS$matchFiles2 = _slicedToArray(_hasteFS$matchFiles, 1),
            filePath = _hasteFS$matchFiles2[0];

        packageName = filePath != null ? hasteFS.getModuleName(filePath) : this._globalConfig.rootDir;
      } else {
        packageName = this._globalConfig.rootDir;
      }

      packageName = packageName != null ? "".concat(packageName, " - ") : '';
      var notifyMode = this._globalConfig.notifyMode;
      var statusChanged = this._context.previousSuccess !== success || this._context.firstRun;
      var testsHaveRun = result.numTotalTests !== 0;

      if (testsHaveRun && success && (notifyMode === 'always' || notifyMode === 'success' || notifyMode === 'success-change' || notifyMode === 'change' && statusChanged || notifyMode === 'failure-change' && statusChanged)) {
        var title = util().format('%s%d%% Passed', packageName, 100);
        var message = "".concat(isDarwin ? "\u2705 " : '').concat((0, _jestUtil().pluralize)('test', result.numPassedTests), " passed");

        this._notifier.notify({
          icon: icon,
          message: message,
          timeout: false,
          title: title
        });
      } else if (testsHaveRun && !success && (notifyMode === 'always' || notifyMode === 'failure' || notifyMode === 'failure-change' || notifyMode === 'change' && statusChanged || notifyMode === 'success-change' && statusChanged)) {
        var failed = result.numFailedTests / result.numTotalTests;

        var _title = util().format('%s%d%% Failed', packageName, Math.ceil(Number.isNaN(failed) ? 0 : failed * 100));

        var _message = util().format((isDarwin ? "\u26D4\uFE0F " : '') + '%d of %d tests failed', result.numFailedTests, result.numTotalTests);

        var watchMode = this._globalConfig.watch || this._globalConfig.watchAll;
        var restartAnswer = 'Run again';
        var quitAnswer = 'Exit tests';

        if (!watchMode) {
          this._notifier.notify({
            icon: icon,
            message: _message,
            timeout: false,
            title: _title
          });
        } else {
          this._notifier.notify({
            actions: [restartAnswer, quitAnswer],
            closeLabel: 'Close',
            icon: icon,
            message: _message,
            timeout: false,
            title: _title
          }, function (err, _, metadata) {
            if (err || !metadata) {
              return;
            }

            if (metadata.activationValue === quitAnswer) {
              (0, _exit()["default"])(0);
              return;
            }

            if (metadata.activationValue === restartAnswer) {
              _this2._startRun(_this2._globalConfig);
            }
          });
        }
      }

      this._context.previousSuccess = success;
      this._context.firstRun = false;
    }
  }]);

  return NotifyReporter;
}(_BaseReporter["default"]);

exports["default"] = NotifyReporter;

function loadNotifier() {
  try {
    return require('node-notifier');
  } catch (err) {
    if (err.code !== 'MODULE_NOT_FOUND') {
      throw err;
    } else {
      throw Error('notify reporter requires optional dependeny node-notifier but it was not found');
    }
  }
}