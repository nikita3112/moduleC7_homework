"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSettledResult = setSettledResult;
exports["default"] = void 0;

var _internal = require("./-internal");

var _promise = _interopRequireDefault(require("./promise"));

var _then = _interopRequireDefault(require("./then"));

var _resolve = _interopRequireDefault(require("./promise/resolve"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Enumerator =
/*#__PURE__*/
function () {
  function Enumerator(Constructor, input, abortOnReject, label) {
    _classCallCheck(this, Enumerator);

    this._instanceConstructor = Constructor;
    this.promise = new Constructor(_internal.noop, label);
    this._abortOnReject = abortOnReject;
    this._isUsingOwnPromise = Constructor === _promise["default"];
    this._isUsingOwnResolve = Constructor.resolve === _resolve["default"];

    this._init.apply(this, arguments);
  }

  _createClass(Enumerator, [{
    key: "_init",
    value: function _init(Constructor, input) {
      var len = input.length || 0;
      this.length = len;
      this._remaining = len;
      this._result = new Array(len);

      this._enumerate(input);
    }
  }, {
    key: "_enumerate",
    value: function _enumerate(input) {
      var length = this.length;
      var promise = this.promise;

      for (var i = 0; promise._state === _internal.PENDING && i < length; i++) {
        this._eachEntry(input[i], i, true);
      }

      this._checkFullfillment();
    }
  }, {
    key: "_checkFullfillment",
    value: function _checkFullfillment() {
      if (this._remaining === 0) {
        var result = this._result;
        (0, _internal.fulfill)(this.promise, result);
        this._result = null;
      }
    }
  }, {
    key: "_settleMaybeThenable",
    value: function _settleMaybeThenable(entry, i, firstPass) {
      var c = this._instanceConstructor;

      if (this._isUsingOwnResolve) {
        var then,
            error,
            succeeded = true;

        try {
          then = entry.then;
        } catch (e) {
          succeeded = false;
          error = e;
        }

        if (then === _then["default"] && entry._state !== _internal.PENDING) {
          entry._onError = null;

          this._settledAt(entry._state, i, entry._result, firstPass);
        } else if (typeof then !== 'function') {
          this._settledAt(_internal.FULFILLED, i, entry, firstPass);
        } else if (this._isUsingOwnPromise) {
          var promise = new c(_internal.noop);

          if (succeeded === false) {
            (0, _internal.reject)(promise, error);
          } else {
            (0, _internal.handleMaybeThenable)(promise, entry, then);

            this._willSettleAt(promise, i, firstPass);
          }
        } else {
          this._willSettleAt(new c(function (resolve) {
            return resolve(entry);
          }), i, firstPass);
        }
      } else {
        this._willSettleAt(c.resolve(entry), i, firstPass);
      }
    }
  }, {
    key: "_eachEntry",
    value: function _eachEntry(entry, i, firstPass) {
      if (entry !== null && _typeof(entry) === 'object') {
        this._settleMaybeThenable(entry, i, firstPass);
      } else {
        this._setResultAt(_internal.FULFILLED, i, entry, firstPass);
      }
    }
  }, {
    key: "_settledAt",
    value: function _settledAt(state, i, value, firstPass) {
      var promise = this.promise;

      if (promise._state === _internal.PENDING) {
        if (this._abortOnReject && state === _internal.REJECTED) {
          (0, _internal.reject)(promise, value);
        } else {
          this._setResultAt(state, i, value, firstPass);

          this._checkFullfillment();
        }
      }
    }
  }, {
    key: "_setResultAt",
    value: function _setResultAt(state, i, value, firstPass) {
      this._remaining--;
      this._result[i] = value;
    }
  }, {
    key: "_willSettleAt",
    value: function _willSettleAt(promise, i, firstPass) {
      var _this = this;

      (0, _internal.subscribe)(promise, undefined, function (value) {
        return _this._settledAt(_internal.FULFILLED, i, value, firstPass);
      }, function (reason) {
        return _this._settledAt(_internal.REJECTED, i, reason, firstPass);
      });
    }
  }]);

  return Enumerator;
}();

exports["default"] = Enumerator;

function setSettledResult(state, i, value) {
  this._remaining--;

  if (state === _internal.FULFILLED) {
    this._result[i] = {
      state: 'fulfilled',
      value: value
    };
  } else {
    this._result[i] = {
      state: 'rejected',
      reason: value
    };
  }
}