'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.createReporterError = createReporterError;
exports.createArrayReporterError = createArrayReporterError;
exports.validateReporters = validateReporters;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestGetType() {
  var data = _interopRequireDefault(require('jest-get-type'));

  _jestGetType = function _jestGetType() {
    return data;
  };

  return data;
}

function _jestValidate() {
  var data = require('jest-validate');

  _jestValidate = function _jestValidate() {
    return data;
  };

  return data;
}

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var validReporterTypes = ['array', 'string'];
var ERROR = "".concat(_utils.BULLET, "Reporter Validation Error");
/**
 * Reporter Validation Error is thrown if the given arguments
 * within the reporter are not valid.
 *
 * This is a highly specific reporter error and in the future will be
 * merged with jest-validate. Till then, we can make use of it. It works
 * and that's what counts most at this time.
 */

function createReporterError(reporterIndex, reporterValue) {
  var errorMessage = "  Reporter at index ".concat(reporterIndex, " must be of type:\n") + "    ".concat(_chalk()["default"].bold.green(validReporterTypes.join(' or ')), "\n") + "  but instead received:\n" + "    ".concat(_chalk()["default"].bold.red((0, _jestGetType()["default"])(reporterValue)));
  return new (_jestValidate().ValidationError)(ERROR, errorMessage, _utils.DOCUMENTATION_NOTE);
}

function createArrayReporterError(arrayReporter, reporterIndex, valueIndex, value, expectedType, valueName) {
  var errorMessage = "  Unexpected value for ".concat(valueName, " ") + "at index ".concat(valueIndex, " of reporter at index ").concat(reporterIndex, "\n") + '  Expected:\n' + "    ".concat(_chalk()["default"].bold.red(expectedType), "\n") + '  Got:\n' + "    ".concat(_chalk()["default"].bold.green((0, _jestGetType()["default"])(value)), "\n") + "  Reporter configuration:\n" + "    ".concat(_chalk()["default"].bold.green(JSON.stringify(arrayReporter, null, 2).split('\n').join('\n    ')));
  return new (_jestValidate().ValidationError)(ERROR, errorMessage, _utils.DOCUMENTATION_NOTE);
}

function validateReporters(reporterConfig) {
  return reporterConfig.every(function (reporter, index) {
    if (Array.isArray(reporter)) {
      validateArrayReporter(reporter, index);
    } else if (typeof reporter !== 'string') {
      throw createReporterError(index, reporter);
    }

    return true;
  });
}

function validateArrayReporter(arrayReporter, reporterIndex) {
  var _arrayReporter = _slicedToArray(arrayReporter, 2),
      path = _arrayReporter[0],
      options = _arrayReporter[1];

  if (typeof path !== 'string') {
    throw createArrayReporterError(arrayReporter, reporterIndex, 0, path, 'string', 'Path');
  } else if (_typeof(options) !== 'object') {
    throw createArrayReporterError(arrayReporter, reporterIndex, 1, options, 'object', 'Reporter Configuration');
  }
}