'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getSequencer = exports.isJSONString = exports.getRunner = exports.getWatchPlugin = exports.getTestEnvironment = exports.resolveWithPrefix = exports._replaceRootDirTags = exports.replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _jestResolve() {
  var data = _interopRequireDefault(require('jest-resolve'));

  _jestResolve = function _jestResolve() {
    return data;
  };

  return data;
}

function _jestValidate() {
  var data = require('jest-validate');

  _jestValidate = function _jestValidate() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var BULLET = _chalk()["default"].bold("\u25CF ");

exports.BULLET = BULLET;
var DOCUMENTATION_NOTE = "  ".concat(_chalk()["default"].bold('Configuration Documentation:'), "\n  https://jestjs.io/docs/configuration.html\n");
exports.DOCUMENTATION_NOTE = DOCUMENTATION_NOTE;

var createValidationError = function createValidationError(message) {
  return new (_jestValidate().ValidationError)("".concat(BULLET, "Validation Error"), message, DOCUMENTATION_NOTE);
};

var resolve = function resolve(resolver, _ref) {
  var key = _ref.key,
      filePath = _ref.filePath,
      rootDir = _ref.rootDir,
      optional = _ref.optional;

  var module = _jestResolve()["default"].findNodeModule(replaceRootDirInPath(rootDir, filePath), {
    basedir: rootDir,
    resolver: resolver || undefined
  });

  if (!module && !optional) {
    throw createValidationError("  Module ".concat(_chalk()["default"].bold(filePath), " in the ").concat(_chalk()["default"].bold(key), " option was not found.\n         ").concat(_chalk()["default"].bold('<rootDir>'), " is: ").concat(rootDir));
  } /// can cast as string since nulls will be thrown


  return module;
};

exports.resolve = resolve;

var escapeGlobCharacters = function escapeGlobCharacters(path) {
  return path.replace(/([()*{}\[\]!?\\])/g, '\\$1');
};

exports.escapeGlobCharacters = escapeGlobCharacters;

var replaceRootDirInPath = function replaceRootDirInPath(rootDir, filePath) {
  if (!/^<rootDir>/.test(filePath)) {
    return filePath;
  }

  return path().resolve(rootDir, path().normalize('./' + filePath.substr('<rootDir>'.length)));
};

exports.replaceRootDirInPath = replaceRootDirInPath;

var _replaceRootDirInObject = function _replaceRootDirInObject(rootDir, config) {
  var newConfig = {};

  for (var configKey in config) {
    newConfig[configKey] = configKey === 'rootDir' ? config[configKey] : _replaceRootDirTags(rootDir, config[configKey]);
  }

  return newConfig;
};

var _replaceRootDirTags = function _replaceRootDirTags(rootDir, config) {
  if (config == null) {
    return config;
  }

  switch (_typeof(config)) {
    case 'object':
      if (Array.isArray(config)) {
        /// can be string[] or {}[]
        return config.map(function (item) {
          return _replaceRootDirTags(rootDir, item);
        });
      }

      if (config instanceof RegExp) {
        return config;
      }

      return _replaceRootDirInObject(rootDir, config);

    case 'string':
      return replaceRootDirInPath(rootDir, config);
  }

  return config;
};

exports._replaceRootDirTags = _replaceRootDirTags;

var resolveWithPrefix = function resolveWithPrefix(resolver, _ref2) {
  var filePath = _ref2.filePath,
      humanOptionName = _ref2.humanOptionName,
      optionName = _ref2.optionName,
      prefix = _ref2.prefix,
      rootDir = _ref2.rootDir;
  var fileName = replaceRootDirInPath(rootDir, filePath);

  var module = _jestResolve()["default"].findNodeModule("".concat(prefix).concat(fileName), {
    basedir: rootDir,
    resolver: resolver || undefined
  });

  if (module) {
    return module;
  }

  try {
    return require.resolve("".concat(prefix).concat(fileName));
  } catch (_unused) {}

  module = _jestResolve()["default"].findNodeModule(fileName, {
    basedir: rootDir,
    resolver: resolver || undefined
  });

  if (module) {
    return module;
  }

  try {
    return require.resolve(fileName);
  } catch (_unused2) {}

  throw createValidationError("  ".concat(humanOptionName, " ").concat(_chalk()["default"].bold(fileName), " cannot be found. Make sure the ").concat(_chalk()["default"].bold(optionName), " configuration option points to an existing node module."));
};
/**
 * Finds the test environment to use:
 *
 * 1. looks for jest-environment-<name> relative to project.
 * 1. looks for jest-environment-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


exports.resolveWithPrefix = resolveWithPrefix;

var getTestEnvironment = function getTestEnvironment(_ref3) {
  var rootDir = _ref3.rootDir,
      filePath = _ref3.testEnvironment;
  return resolveWithPrefix(undefined, {
    filePath: filePath,
    humanOptionName: 'Test environment',
    optionName: 'testEnvironment',
    prefix: 'jest-environment-',
    rootDir: rootDir
  });
};
/**
 * Finds the watch plugins to use:
 *
 * 1. looks for jest-watch-<name> relative to project.
 * 1. looks for jest-watch-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


exports.getTestEnvironment = getTestEnvironment;

var getWatchPlugin = function getWatchPlugin(resolver, _ref4) {
  var filePath = _ref4.filePath,
      rootDir = _ref4.rootDir;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Watch plugin',
    optionName: 'watchPlugins',
    prefix: 'jest-watch-',
    rootDir: rootDir
  });
};
/**
 * Finds the runner to use:
 *
 * 1. looks for jest-runner-<name> relative to project.
 * 1. looks for jest-runner-<name> relative to Jest.
 * 1. looks for <name> relative to project.
 * 1. looks for <name> relative to Jest.
 */


exports.getWatchPlugin = getWatchPlugin;

var getRunner = function getRunner(resolver, _ref5) {
  var filePath = _ref5.filePath,
      rootDir = _ref5.rootDir;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Jest Runner',
    optionName: 'runner',
    prefix: 'jest-runner-',
    rootDir: rootDir
  });
};

exports.getRunner = getRunner; // newtype

var isJSONString = function isJSONString(text) {
  return text != null && typeof text === 'string' && text.startsWith('{') && text.endsWith('}');
};

exports.isJSONString = isJSONString;

var getSequencer = function getSequencer(resolver, _ref6) {
  var filePath = _ref6.filePath,
      rootDir = _ref6.rootDir;
  return resolveWithPrefix(resolver, {
    filePath: filePath,
    humanOptionName: 'Jest Sequencer',
    optionName: 'testSequencer',
    prefix: 'jest-sequencer-',
    rootDir: rootDir
  });
};

exports.getSequencer = getSequencer;