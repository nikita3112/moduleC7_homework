'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

var _constants = require('./constants');

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var isFile = function isFile(filePath) {
  return fs().existsSync(filePath) && !fs().lstatSync(filePath).isDirectory();
};

var getConfigFilename = function getConfigFilename(ext) {
  return _constants.JEST_CONFIG_BASE_NAME + ext;
};

var _default = function _default(pathToResolve, cwd) {
  if (!path().isAbsolute(cwd)) {
    throw new Error("\"cwd\" must be an absolute path. cwd: ".concat(cwd));
  }

  var absolutePath = path().isAbsolute(pathToResolve) ? pathToResolve : path().resolve(cwd, pathToResolve);

  if (isFile(absolutePath)) {
    return absolutePath;
  } // This is a guard against passing non existing path as a project/config,
  // that will otherwise result in a very confusing situation.
  // e.g.
  // With a directory structure like this:
  //   my_project/
  //     packcage.json
  //
  // Passing a `my_project/some_directory_that_doesnt_exist` as a project
  // name will resolve into a (possibly empty) `my_project/package.json` and
  // try to run all tests it finds under `my_project` directory.


  if (!fs().existsSync(absolutePath)) {
    throw new Error("Can't find a root directory while resolving a config file path.\n" + "Provided path to resolve: ".concat(pathToResolve, "\n") + "cwd: ".concat(cwd));
  }

  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);
};

exports["default"] = _default;

var resolveConfigPathByTraversing = function resolveConfigPathByTraversing(pathToResolve, initialPath, cwd) {
  var jestConfig = _constants.JEST_CONFIG_EXT_ORDER.map(function (ext) {
    return path().resolve(pathToResolve, getConfigFilename(ext));
  }).find(isFile);

  if (jestConfig) {
    return jestConfig;
  }

  var packageJson = path().resolve(pathToResolve, _constants.PACKAGE_JSON);

  if (isFile(packageJson)) {
    return packageJson;
  } // This is the system root.
  // We tried everything, config is nowhere to be found ¯\_(ツ)_/¯


  if (pathToResolve === path().dirname(pathToResolve)) {
    throw new Error(makeResolutionErrorMessage(initialPath, cwd));
  } // go up a level and try it again


  return resolveConfigPathByTraversing(path().dirname(pathToResolve), initialPath, cwd);
};

var makeResolutionErrorMessage = function makeResolutionErrorMessage(initialPath, cwd) {
  return 'Could not find a config file based on provided values:\n' + "path: \"".concat(initialPath, "\"\n") + "cwd: \"".concat(cwd, "\"\n") + 'Config paths must be specified by either a direct path to a config\n' + 'file, or a path to a directory. If directory is given, Jest will try to\n' + "traverse directory tree up, until it finds one of those files in exact order: ".concat(_constants.JEST_CONFIG_EXT_ORDER.map(function (ext) {
    return "\"".concat(getConfigFilename(ext), "\"");
  }).join(' or '), ".");
};