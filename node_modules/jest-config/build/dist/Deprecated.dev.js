'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var format = function format(value) {
  return (0, _prettyFormat()["default"])(value, {
    min: true
  });
};

var deprecatedOptions = {
  browser: function browser() {
    return "  Option ".concat(_chalk()["default"].bold('"browser"'), " has been deprecated. Please install \"browser-resolve\" and use the \"resolver\" option in Jest configuration as follows:\n  {\n    ").concat(_chalk()["default"].bold('"resolver"'), ": ").concat(_chalk()["default"].bold('"browser-resolve"'), "\n  }\n  ");
  },
  mapCoverage: function mapCoverage() {
    return "  Option ".concat(_chalk()["default"].bold('"mapCoverage"'), " has been removed, as it's no longer necessary.\n\n  Please update your configuration.");
  },
  preprocessorIgnorePatterns: function preprocessorIgnorePatterns(options) {
    return "  Option ".concat(_chalk()["default"].bold('"preprocessorIgnorePatterns"'), " was replaced by ").concat(_chalk()["default"].bold('"transformIgnorePatterns"'), ", which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ").concat(_chalk()["default"].bold('"transformIgnorePatterns"'), ": ").concat(_chalk()["default"].bold(format(options.preprocessorIgnorePatterns)), "\n  }\n\n  Please update your configuration.");
  },
  scriptPreprocessor: function scriptPreprocessor(options) {
    return "  Option ".concat(_chalk()["default"].bold('"scriptPreprocessor"'), " was replaced by ").concat(_chalk()["default"].bold('"transform"'), ", which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ").concat(_chalk()["default"].bold('"transform"'), ": ").concat(_chalk()["default"].bold("{\".*\": ".concat(format(options.scriptPreprocessor), "}")), "\n  }\n\n  Please update your configuration.");
  },
  setupTestFrameworkScriptFile: function setupTestFrameworkScriptFile(_options) {
    return "  Option ".concat(_chalk()["default"].bold('"setupTestFrameworkScriptFile"'), " was replaced by configuration ").concat(_chalk()["default"].bold('"setupFilesAfterEnv"'), ", which supports multiple paths.\n\n  Please update your configuration.");
  },
  testPathDirs: function testPathDirs(options) {
    return "  Option ".concat(_chalk()["default"].bold('"testPathDirs"'), " was replaced by ").concat(_chalk()["default"].bold('"roots"'), ".\n\n  Jest now treats your current configuration as:\n  {\n    ").concat(_chalk()["default"].bold('"roots"'), ": ").concat(_chalk()["default"].bold(format(options.testPathDirs)), "\n  }\n\n  Please update your configuration.\n  ");
  }
};
var _default = deprecatedOptions;
exports["default"] = _default;