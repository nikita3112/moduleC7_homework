'use strict';

function __getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); __getRequireWildcardCache = function __getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard2(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = __getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = readConfigFileAndSetRootDir;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _url() {
  var data = require('url');

  _url = function _url() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _constants = require('./constants');

var _jsonlint = _interopRequireDefault(require('./vendor/jsonlint'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// @ts-expect-error: vendored
// Read the configuration and set its `rootDir`
// 1. If it's a `package.json` file, we look into its "jest" property
// 2. If it's a `jest.config.ts` file, we use `ts-node` to transpile & require it
// 3. For any other file, we just require it. If we receive an 'ERR_REQUIRE_ESM'
//    from node, perform a dynamic import instead.


function readConfigFileAndSetRootDir(configPath) {
  var isTS, isJSON, configObject, configUrl, importedConfig;
  return regeneratorRuntime.async(function readConfigFileAndSetRootDir$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          isTS = configPath.endsWith(_constants.JEST_CONFIG_EXT_TS);
          isJSON = configPath.endsWith(_constants.JEST_CONFIG_EXT_JSON);
          _context.prev = 2;

          if (!isTS) {
            _context.next = 9;
            break;
          }

          _context.next = 6;
          return regeneratorRuntime.awrap(loadTSConfigFile(configPath));

        case 6:
          configObject = _context.sent;
          _context.next = 10;
          break;

        case 9:
          configObject = require(configPath);

        case 10:
          _context.next = 41;
          break;

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](2);

          if (!(_context.t0.code === 'ERR_REQUIRE_ESM')) {
            _context.next = 32;
            break;
          }

          _context.prev = 15;
          configUrl = (0, _url().pathToFileURL)(configPath); // node `import()` supports URL, but TypeScript doesn't know that

          _context.next = 19;
          return regeneratorRuntime.awrap(Promise.resolve().then(function () {
            return _interopRequireWildcard2(require("".concat(configUrl.href)));
          }));

        case 19:
          importedConfig = _context.sent;

          if (importedConfig["default"]) {
            _context.next = 22;
            break;
          }

          throw new Error("Jest: Failed to load mjs config file ".concat(configPath, " - did you use a default export?"));

        case 22:
          configObject = importedConfig["default"];
          _context.next = 30;
          break;

        case 25:
          _context.prev = 25;
          _context.t1 = _context["catch"](15);

          if (!(_context.t1.message === 'Not supported')) {
            _context.next = 29;
            break;
          }

          throw new Error("Jest: Your version of Node does not support dynamic import - please enable it or use a .cjs file extension for file ".concat(configPath));

        case 29:
          throw _context.t1;

        case 30:
          _context.next = 41;
          break;

        case 32:
          if (!isJSON) {
            _context.next = 36;
            break;
          }

          throw new Error("Jest: Failed to parse config file ".concat(configPath, "\n") + "  ".concat(_jsonlint["default"].errors(fs().readFileSync(configPath, 'utf8'))));

        case 36:
          if (!isTS) {
            _context.next = 40;
            break;
          }

          throw new Error("Jest: Failed to parse the TypeScript config file ".concat(configPath, "\n") + "  ".concat(_context.t0));

        case 40:
          throw _context.t0;

        case 41:
          if (configPath.endsWith(_constants.PACKAGE_JSON)) {
            // Event if there's no "jest" property in package.json we will still use
            // an empty object.
            configObject = configObject.jest || {};
          }

          if (configObject.rootDir) {
            // We don't touch it if it has an absolute path specified
            if (!path().isAbsolute(configObject.rootDir)) {
              // otherwise, we'll resolve it relative to the file's __dirname
              configObject.rootDir = path().resolve(path().dirname(configPath), configObject.rootDir);
            }
          } else {
            // If rootDir is not there, we'll set it to this file's __dirname
            configObject.rootDir = path().dirname(configPath);
          }

          return _context.abrupt("return", configObject);

        case 44:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 12], [15, 25]]);
} // Load the TypeScript configuration


var loadTSConfigFile = function loadTSConfigFile(configPath) {
  var registerer, configObject;
  return regeneratorRuntime.async(function loadTSConfigFile$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          registerer = require('ts-node').register({
            compilerOptions: {
              module: 'CommonJS'
            }
          });
          _context2.next = 9;
          break;

        case 4:
          _context2.prev = 4;
          _context2.t0 = _context2["catch"](0);

          if (!(_context2.t0.code === 'MODULE_NOT_FOUND')) {
            _context2.next = 8;
            break;
          }

          throw new Error("Jest: 'ts-node' is required for the TypeScript configuration files. Make sure it is installed\nError: ".concat(_context2.t0.message));

        case 8:
          throw _context2.t0;

        case 9:
          registerer.enabled(true);
          configObject = (0, _jestUtil().interopRequireDefault)(require(configPath))["default"]; // In case the config is a function which imports more Typescript code

          if (!(typeof configObject === 'function')) {
            _context2.next = 15;
            break;
          }

          _context2.next = 14;
          return regeneratorRuntime.awrap(configObject());

        case 14:
          configObject = _context2.sent;

        case 15:
          registerer.enabled(false);
          return _context2.abrupt("return", configObject);

        case 17:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[0, 4]]);
};