'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.readConfig = readConfig;
exports.readConfigs = readConfigs;
Object.defineProperty(exports, 'normalize', {
  enumerable: true,
  get: function get() {
    return _normalize["default"];
  }
});
Object.defineProperty(exports, 'getTestEnvironment', {
  enumerable: true,
  get: function get() {
    return _utils.getTestEnvironment;
  }
});
Object.defineProperty(exports, 'isJSONString', {
  enumerable: true,
  get: function get() {
    return _utils.isJSONString;
  }
});
Object.defineProperty(exports, 'replaceRootDirInPath', {
  enumerable: true,
  get: function get() {
    return _utils.replaceRootDirInPath;
  }
});
Object.defineProperty(exports, 'deprecationEntries', {
  enumerable: true,
  get: function get() {
    return _Deprecated["default"];
  }
});
Object.defineProperty(exports, 'defaults', {
  enumerable: true,
  get: function get() {
    return _Defaults["default"];
  }
});
Object.defineProperty(exports, 'descriptions', {
  enumerable: true,
  get: function get() {
    return _Descriptions["default"];
  }
});
exports.constants = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var constants = _interopRequireWildcard(require('./constants'));

exports.constants = constants;

var _normalize = _interopRequireDefault(require('./normalize'));

var _readConfigFileAndSetRootDir = _interopRequireDefault(require('./readConfigFileAndSetRootDir'));

var _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));

var _utils = require('./utils');

var _Deprecated = _interopRequireDefault(require('./Deprecated'));

var _Defaults = _interopRequireDefault(require('./Defaults'));

var _Descriptions = _interopRequireDefault(require('./Descriptions'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function readConfig(argv, packageRootOrConfig, // Whether it needs to look into `--config` arg passed to CLI.
// It only used to read initial config. If the initial config contains
// `project` property, we don't want to read `--config` value and rather
// read individual configs for every project.
skipArgvConfigOption, parentConfigPath) {
  var projectIndex,
      rawOptions,
      configPath,
      parentConfigDirname,
      config,
      _ref,
      options,
      hasDeprecationWarnings,
      _groupOptions,
      globalConfig,
      projectConfig,
      _args = arguments;

  return regeneratorRuntime.async(function readConfig$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          projectIndex = _args.length > 4 && _args[4] !== undefined ? _args[4] : Infinity;
          configPath = null;

          if (!(typeof packageRootOrConfig !== 'string')) {
            _context.next = 12;
            break;
          }

          if (!parentConfigPath) {
            _context.next = 9;
            break;
          }

          parentConfigDirname = path().dirname(parentConfigPath);
          rawOptions = packageRootOrConfig;
          rawOptions.rootDir = rawOptions.rootDir ? (0, _utils.replaceRootDirInPath)(parentConfigDirname, rawOptions.rootDir) : parentConfigDirname;
          _context.next = 10;
          break;

        case 9:
          throw new Error('Jest: Cannot use configuration as an object without a file path.');

        case 10:
          _context.next = 35;
          break;

        case 12:
          if (!(0, _utils.isJSONString)(argv.config)) {
            _context.next = 24;
            break;
          }

          _context.prev = 13;
          config = JSON.parse(argv.config);
          _context.next = 20;
          break;

        case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](13);
          throw new Error('There was an error while parsing the `--config` argument as a JSON string.');

        case 20:
          // NOTE: we might need to resolve this dir to an absolute path in the future
          config.rootDir = config.rootDir || packageRootOrConfig;
          rawOptions = config; // A string passed to `--config`, which is either a direct path to the config
          // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`

          _context.next = 35;
          break;

        case 24:
          if (!(!skipArgvConfigOption && typeof argv.config == 'string')) {
            _context.next = 31;
            break;
          }

          configPath = (0, _resolveConfigPath["default"])(argv.config, process.cwd());
          _context.next = 28;
          return regeneratorRuntime.awrap((0, _readConfigFileAndSetRootDir["default"])(configPath));

        case 28:
          rawOptions = _context.sent;
          _context.next = 35;
          break;

        case 31:
          // Otherwise just try to find config in the current rootDir.
          configPath = (0, _resolveConfigPath["default"])(packageRootOrConfig, process.cwd());
          _context.next = 34;
          return regeneratorRuntime.awrap((0, _readConfigFileAndSetRootDir["default"])(configPath));

        case 34:
          rawOptions = _context.sent;

        case 35:
          if (!(typeof rawOptions === 'function')) {
            _context.next = 39;
            break;
          }

          _context.next = 38;
          return regeneratorRuntime.awrap(rawOptions());

        case 38:
          rawOptions = _context.sent;

        case 39:
          _ref = (0, _normalize["default"])(rawOptions, argv, configPath, projectIndex), options = _ref.options, hasDeprecationWarnings = _ref.hasDeprecationWarnings;
          _groupOptions = groupOptions(options), globalConfig = _groupOptions.globalConfig, projectConfig = _groupOptions.projectConfig;
          return _context.abrupt("return", {
            configPath: configPath,
            globalConfig: globalConfig,
            hasDeprecationWarnings: hasDeprecationWarnings,
            projectConfig: projectConfig
          });

        case 42:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[13, 17]]);
}

var groupOptions = function groupOptions(options) {
  return {
    globalConfig: Object.freeze({
      bail: options.bail,
      changedFilesWithAncestor: options.changedFilesWithAncestor,
      changedSince: options.changedSince,
      collectCoverage: options.collectCoverage,
      collectCoverageFrom: options.collectCoverageFrom,
      collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,
      coverageDirectory: options.coverageDirectory,
      coverageProvider: options.coverageProvider,
      coverageReporters: options.coverageReporters,
      coverageThreshold: options.coverageThreshold,
      detectLeaks: options.detectLeaks,
      detectOpenHandles: options.detectOpenHandles,
      enabledTestsMap: options.enabledTestsMap,
      errorOnDeprecated: options.errorOnDeprecated,
      expand: options.expand,
      filter: options.filter,
      findRelatedTests: options.findRelatedTests,
      forceExit: options.forceExit,
      globalSetup: options.globalSetup,
      globalTeardown: options.globalTeardown,
      json: options.json,
      lastCommit: options.lastCommit,
      listTests: options.listTests,
      logHeapUsage: options.logHeapUsage,
      maxConcurrency: options.maxConcurrency,
      maxWorkers: options.maxWorkers,
      noSCM: undefined,
      noStackTrace: options.noStackTrace,
      nonFlagArgs: options.nonFlagArgs,
      notify: options.notify,
      notifyMode: options.notifyMode,
      onlyChanged: options.onlyChanged,
      onlyFailures: options.onlyFailures,
      outputFile: options.outputFile,
      passWithNoTests: options.passWithNoTests,
      projects: options.projects,
      replname: options.replname,
      reporters: options.reporters,
      rootDir: options.rootDir,
      runTestsByPath: options.runTestsByPath,
      silent: options.silent,
      skipFilter: options.skipFilter,
      testFailureExitCode: options.testFailureExitCode,
      testNamePattern: options.testNamePattern,
      testPathPattern: options.testPathPattern,
      testResultsProcessor: options.testResultsProcessor,
      testSequencer: options.testSequencer,
      testTimeout: options.testTimeout,
      updateSnapshot: options.updateSnapshot,
      useStderr: options.useStderr,
      verbose: options.verbose,
      watch: options.watch,
      watchAll: options.watchAll,
      watchPlugins: options.watchPlugins,
      watchman: options.watchman
    }),
    projectConfig: Object.freeze({
      automock: options.automock,
      cache: options.cache,
      cacheDirectory: options.cacheDirectory,
      clearMocks: options.clearMocks,
      coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,
      cwd: options.cwd,
      dependencyExtractor: options.dependencyExtractor,
      detectLeaks: options.detectLeaks,
      detectOpenHandles: options.detectOpenHandles,
      displayName: options.displayName,
      errorOnDeprecated: options.errorOnDeprecated,
      extraGlobals: options.extraGlobals,
      filter: options.filter,
      forceCoverageMatch: options.forceCoverageMatch,
      globalSetup: options.globalSetup,
      globalTeardown: options.globalTeardown,
      globals: options.globals,
      haste: options.haste,
      injectGlobals: options.injectGlobals,
      moduleDirectories: options.moduleDirectories,
      moduleFileExtensions: options.moduleFileExtensions,
      moduleLoader: options.moduleLoader,
      moduleNameMapper: options.moduleNameMapper,
      modulePathIgnorePatterns: options.modulePathIgnorePatterns,
      modulePaths: options.modulePaths,
      name: options.name,
      prettierPath: options.prettierPath,
      resetMocks: options.resetMocks,
      resetModules: options.resetModules,
      resolver: options.resolver,
      restoreMocks: options.restoreMocks,
      rootDir: options.rootDir,
      roots: options.roots,
      runner: options.runner,
      setupFiles: options.setupFiles,
      setupFilesAfterEnv: options.setupFilesAfterEnv,
      skipFilter: options.skipFilter,
      skipNodeResolution: options.skipNodeResolution,
      slowTestThreshold: options.slowTestThreshold,
      snapshotResolver: options.snapshotResolver,
      snapshotSerializers: options.snapshotSerializers,
      testEnvironment: options.testEnvironment,
      testEnvironmentOptions: options.testEnvironmentOptions,
      testLocationInResults: options.testLocationInResults,
      testMatch: options.testMatch,
      testPathIgnorePatterns: options.testPathIgnorePatterns,
      testRegex: options.testRegex,
      testRunner: options.testRunner,
      testURL: options.testURL,
      timers: options.timers,
      transform: options.transform,
      transformIgnorePatterns: options.transformIgnorePatterns,
      unmockedModulePathPatterns: options.unmockedModulePathPatterns,
      watchPathIgnorePatterns: options.watchPathIgnorePatterns
    })
  };
};

var ensureNoDuplicateConfigs = function ensureNoDuplicateConfigs(parsedConfigs, projects) {
  if (projects.length <= 1) {
    return;
  }

  var configPathMap = new Map();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var config = _step.value;
      var configPath = config.configPath;

      if (configPathMap.has(configPath)) {
        var message = "Whoops! Two projects resolved to the same config path: ".concat(_chalk()["default"].bold(String(configPath)), ":\n\n  Project 1: ").concat(_chalk()["default"].bold(projects[parsedConfigs.findIndex(function (x) {
          return x === config;
        })]), "\n  Project 2: ").concat(_chalk()["default"].bold(projects[parsedConfigs.findIndex(function (x) {
          return x === configPathMap.get(configPath);
        })]), "\n\nThis usually means that your ").concat(_chalk()["default"].bold('"projects"'), " config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\n");
        throw new Error(message);
      }

      if (configPath !== null) {
        configPathMap.set(configPath, config);
      }
    };

    for (var _iterator = parsedConfigs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}; // Possible scenarios:
//  1. jest --config config.json
//  2. jest --projects p1 p2
//  3. jest --projects p1 p2 --config config.json
//  4. jest --projects p1
//  5. jest
//
// If no projects are specified, process.cwd() will be used as the default
// (and only) project.


function readConfigs(argv, projectPaths) {
  var globalConfig, hasDeprecationWarnings, configs, projects, configPath, parsedConfig, projectIsCwd, parsedConfigs;
  return regeneratorRuntime.async(function readConfigs$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          configs = [];
          projects = projectPaths;

          if (!(projectPaths.length === 1)) {
            _context2.next = 11;
            break;
          }

          _context2.next = 5;
          return regeneratorRuntime.awrap(readConfig(argv, projects[0]));

        case 5:
          parsedConfig = _context2.sent;
          configPath = parsedConfig.configPath;
          hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;
          globalConfig = parsedConfig.globalConfig;
          configs = [parsedConfig.projectConfig];

          if (globalConfig.projects && globalConfig.projects.length) {
            // Even though we had one project in CLI args, there might be more
            // projects defined in the config.
            // In other words, if this was a single project,
            // and its config has `projects` settings, use that value instead.
            projects = globalConfig.projects;
          }

        case 11:
          if (!(projects.length > 0)) {
            _context2.next = 20;
            break;
          }

          projectIsCwd = process.platform === 'win32' ? projects[0] === (0, _jestUtil().tryRealpath)(process.cwd()) : projects[0] === process.cwd();
          _context2.next = 15;
          return regeneratorRuntime.awrap(Promise.all(projects.filter(function (root) {
            // Ignore globbed files that cannot be `require`d.
            if (typeof root === 'string' && fs().existsSync(root) && !fs().lstatSync(root).isDirectory() && !constants.JEST_CONFIG_EXT_ORDER.some(function (ext) {
              return root.endsWith(ext);
            })) {
              return false;
            }

            return true;
          }).map(function (root, projectIndex) {
            var projectIsTheOnlyProject = projectIndex === 0 && projects.length === 1;
            var skipArgvConfigOption = !(projectIsTheOnlyProject && projectIsCwd);
            return readConfig(argv, root, skipArgvConfigOption, configPath, projectIndex);
          })));

        case 15:
          parsedConfigs = _context2.sent;
          ensureNoDuplicateConfigs(parsedConfigs, projects);
          configs = parsedConfigs.map(function (_ref2) {
            var projectConfig = _ref2.projectConfig;
            return projectConfig;
          });

          if (!hasDeprecationWarnings) {
            hasDeprecationWarnings = parsedConfigs.some(function (_ref3) {
              var hasDeprecationWarnings = _ref3.hasDeprecationWarnings;
              return !!hasDeprecationWarnings;
            });
          } // If no config was passed initially, use the one from the first project


          if (!globalConfig) {
            globalConfig = parsedConfigs[0].globalConfig;
          }

        case 20:
          if (!(!globalConfig || !configs.length)) {
            _context2.next = 22;
            break;
          }

          throw new Error('jest: No configuration found for any project.');

        case 22:
          return _context2.abrupt("return", {
            configs: configs,
            globalConfig: globalConfig,
            hasDeprecationWarnings: !!hasDeprecationWarnings
          });

        case 23:
        case "end":
          return _context2.stop();
      }
    }
  });
}