'use strict';
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var path = require('path');

var html = require('html-escaper');

var _require = require('istanbul-lib-report'),
    ReportBase = _require.ReportBase;

var annotator = require('./annotator');

function htmlHead(details) {
  return "\n<head>\n    <title>Code coverage report for ".concat(html.escape(details.entity), "</title>\n    <meta charset=\"utf-8\" />\n    <link rel=\"stylesheet\" href=\"").concat(html.escape(details.prettify.css), "\" />\n    <link rel=\"stylesheet\" href=\"").concat(html.escape(details.base.css), "\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"").concat(html.escape(details.favicon), "\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <style type='text/css'>\n        .coverage-summary .sorter {\n            background-image: url(").concat(html.escape(details.sorter.image), ");\n        }\n    </style>\n</head>\n    ");
}

function headerTemplate(details) {
  function metricsTemplate(_ref, kind) {
    var pct = _ref.pct,
        covered = _ref.covered,
        total = _ref.total;
    return "\n            <div class='fl pad1y space-right2'>\n                <span class=\"strong\">".concat(pct, "% </span>\n                <span class=\"quiet\">").concat(kind, "</span>\n                <span class='fraction'>").concat(covered, "/").concat(total, "</span>\n            </div>\n        ");
  }

  function skipTemplate(metrics) {
    var statements = metrics.statements.skipped;
    var branches = metrics.branches.skipped;
    var functions = metrics.functions.skipped;

    var countLabel = function countLabel(c, label, plural) {
      return c === 0 ? [] : "".concat(c, " ").concat(label).concat(c === 1 ? '' : plural);
    };

    var skips = [].concat(countLabel(statements, 'statement', 's'), countLabel(functions, 'function', 's'), countLabel(branches, 'branch', 'es'));

    if (skips.length === 0) {
      return '';
    }

    return "\n            <div class='fl pad1y'>\n                <span class=\"strong\">".concat(skips.join(', '), "</span>\n                <span class=\"quiet\">Ignored</span>  &nbsp;&nbsp;&nbsp;&nbsp;\n            </div>\n        ");
  }

  return "\n<!doctype html>\n<html lang=\"en\">\n".concat(htmlHead(details), "\n<body>\n<div class='wrapper'>\n    <div class='pad1'>\n        <h1>").concat(details.pathHtml, "</h1>\n        <div class='clearfix'>\n            ").concat(metricsTemplate(details.metrics.statements, 'Statements'), "\n            ").concat(metricsTemplate(details.metrics.branches, 'Branches'), "\n            ").concat(metricsTemplate(details.metrics.functions, 'Functions'), "\n            ").concat(metricsTemplate(details.metrics.lines, 'Lines'), "\n            ").concat(skipTemplate(details.metrics), "\n        </div>\n        <p class=\"quiet\">\n            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.\n        </p>\n    </div>\n    <div class='status-line ").concat(details.reportClass, "'></div>\n    ");
}

function footerTemplate(details) {
  return "\n                <div class='push'></div><!-- for sticky footer -->\n            </div><!-- /wrapper -->\n            <div class='footer quiet pad2 space-top1 center small'>\n                Code coverage generated by\n                <a href=\"https://istanbul.js.org/\" target=\"_blank\">istanbul</a>\n                at ".concat(html.escape(details.datetime), "\n            </div>\n        </div>\n        <script src=\"").concat(html.escape(details.prettify.js), "\"></script>\n        <script>\n            window.onload = function () {\n                prettyPrint();\n            };\n        </script>\n        <script src=\"").concat(html.escape(details.sorter.js), "\"></script>\n        <script src=\"").concat(html.escape(details.blockNavigation.js), "\"></script>\n    </body>\n</html>\n    ");
}

function detailTemplate(data) {
  var lineNumbers = new Array(data.maxLines).fill().map(function (_, i) {
    return i + 1;
  });

  var lineLink = function lineLink(num) {
    return "<a name='L".concat(num, "'></a><a href='#L").concat(num, "'>").concat(num, "</a>");
  };

  var lineCount = function lineCount(line) {
    return "<span class=\"cline-any cline-".concat(line.covered, "\">").concat(line.hits, "</span>");
  };
  /* This is rendered in a `<pre>`, need control of all whitespace. */


  return ['<tr>', "<td class=\"line-count quiet\">".concat(lineNumbers.map(lineLink).join('\n'), "</td>"), "<td class=\"line-coverage quiet\">".concat(data.lineCoverage.map(lineCount).join('\n'), "</td>"), "<td class=\"text\"><pre class=\"prettyprint lang-js\">".concat(data.annotatedCode.join('\n'), "</pre></td>"), '</tr>'].join('');
}

var summaryTableHeader = ['<div class="pad1">', '<table class="coverage-summary">', '<thead>', '<tr>', '   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>', '   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>', '   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>', '   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>', '   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>', '   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>', '   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>', '   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>', '   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>', '   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>', '</tr>', '</thead>', '<tbody>'].join('\n');

function summaryLineTemplate(details) {
  var reportClasses = details.reportClasses,
      metrics = details.metrics,
      file = details.file,
      output = details.output;

  var percentGraph = function percentGraph(pct) {
    if (!isFinite(pct)) {
      return '';
    }

    var cls = ['cover-fill'];

    if (pct === 100) {
      cls.push('cover-full');
    }

    pct = Math.floor(pct);
    return ["<div class=\"".concat(cls.join(' '), "\" style=\"width: ").concat(pct, "%\"></div>"), "<div class=\"cover-empty\" style=\"width: ".concat(100 - pct, "%\"></div>")].join('');
  };

  var summaryType = function summaryType(type) {
    var showGraph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var info = metrics[type];
    var reportClass = reportClasses[type];
    var result = ["<td data-value=\"".concat(info.pct, "\" class=\"pct ").concat(reportClass, "\">").concat(info.pct, "%</td>"), "<td data-value=\"".concat(info.total, "\" class=\"abs ").concat(reportClass, "\">").concat(info.covered, "/").concat(info.total, "</td>")];

    if (showGraph) {
      result.unshift("<td data-value=\"".concat(info.pct, "\" class=\"pic ").concat(reportClass, "\">"), "<div class=\"chart\">".concat(percentGraph(info.pct), "</div>"), "</td>");
    }

    return result;
  };

  return [].concat('<tr>', "<td class=\"file ".concat(reportClasses.statements, "\" data-value=\"").concat(html.escape(file), "\"><a href=\"").concat(html.escape(output), "\">").concat(html.escape(file), "</a></td>"), summaryType('statements', true), summaryType('branches'), summaryType('functions'), summaryType('lines'), '</tr>\n').join('\n\t');
}

var summaryTableFooter = ['</tbody>', '</table>', '</div>'].join('\n');
var emptyClasses = {
  statements: 'empty',
  lines: 'empty',
  functions: 'empty',
  branches: 'empty'
};
var standardLinkMapper = {
  getPath: function getPath(node) {
    if (typeof node === 'string') {
      return node;
    }

    var filePath = node.getQualifiedName();

    if (node.isSummary()) {
      if (filePath !== '') {
        filePath += '/index.html';
      } else {
        filePath = 'index.html';
      }
    } else {
      filePath += '.html';
    }

    return filePath;
  },
  relativePath: function relativePath(source, target) {
    var targetPath = this.getPath(target);
    var sourcePath = path.dirname(this.getPath(source));
    return path.posix.relative(sourcePath, targetPath);
  },
  assetPath: function assetPath(node, name) {
    return this.relativePath(this.getPath(node), name);
  }
};

function fixPct(metrics) {
  Object.keys(emptyClasses).forEach(function (key) {
    metrics[key].pct = 0;
  });
  return metrics;
}

var HtmlReport =
/*#__PURE__*/
function (_ReportBase) {
  _inherits(HtmlReport, _ReportBase);

  function HtmlReport(opts) {
    var _this;

    _classCallCheck(this, HtmlReport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HtmlReport).call(this));
    _this.verbose = opts.verbose;
    _this.linkMapper = opts.linkMapper || standardLinkMapper;
    _this.subdir = opts.subdir || '';
    _this.date = Date();
    _this.skipEmpty = opts.skipEmpty;
    return _this;
  }

  _createClass(HtmlReport, [{
    key: "getBreadcrumbHtml",
    value: function getBreadcrumbHtml(node) {
      var _this2 = this;

      var parent = node.getParent();
      var nodePath = [];

      while (parent) {
        nodePath.push(parent);
        parent = parent.getParent();
      }

      var linkPath = nodePath.map(function (ancestor) {
        var target = _this2.linkMapper.relativePath(node, ancestor);

        var name = ancestor.getRelativeName() || 'All files';
        return '<a href="' + target + '">' + name + '</a>';
      });
      linkPath.reverse();
      return linkPath.length > 0 ? linkPath.join(' / ') + ' ' + node.getRelativeName() : 'All files';
    }
  }, {
    key: "fillTemplate",
    value: function fillTemplate(node, templateData, context) {
      var linkMapper = this.linkMapper;
      var summary = node.getCoverageSummary();
      templateData.entity = node.getQualifiedName() || 'All files';
      templateData.metrics = summary;
      templateData.reportClass = context.classForPercent('statements', summary.statements.pct);
      templateData.pathHtml = this.getBreadcrumbHtml(node);
      templateData.base = {
        css: linkMapper.assetPath(node, 'base.css')
      };
      templateData.sorter = {
        js: linkMapper.assetPath(node, 'sorter.js'),
        image: linkMapper.assetPath(node, 'sort-arrow-sprite.png')
      };
      templateData.blockNavigation = {
        js: linkMapper.assetPath(node, 'block-navigation.js')
      };
      templateData.prettify = {
        js: linkMapper.assetPath(node, 'prettify.js'),
        css: linkMapper.assetPath(node, 'prettify.css')
      };
      templateData.favicon = linkMapper.assetPath(node, 'favicon.png');
    }
  }, {
    key: "getTemplateData",
    value: function getTemplateData() {
      return {
        datetime: this.date
      };
    }
  }, {
    key: "getWriter",
    value: function getWriter(context) {
      if (!this.subdir) {
        return context.writer;
      }

      return context.writer.writerForDir(this.subdir);
    }
  }, {
    key: "onStart",
    value: function onStart(root, context) {
      var _this3 = this;

      var assetHeaders = {
        '.js': '/* eslint-disable */\n'
      };
      ['.', 'vendor'].forEach(function (subdir) {
        var writer = _this3.getWriter(context);

        var srcDir = path.resolve(__dirname, 'assets', subdir);
        fs.readdirSync(srcDir).forEach(function (f) {
          var resolvedSource = path.resolve(srcDir, f);
          var resolvedDestination = '.';
          var stat = fs.statSync(resolvedSource);
          var dest;

          if (stat.isFile()) {
            dest = resolvedDestination + '/' + f;

            if (_this3.verbose) {
              console.log('Write asset: ' + dest);
            }

            writer.copyFile(resolvedSource, dest, assetHeaders[path.extname(f)]);
          }
        });
      });
    }
  }, {
    key: "onSummary",
    value: function onSummary(node, context) {
      var linkMapper = this.linkMapper;
      var templateData = this.getTemplateData();
      var children = node.getChildren();
      var skipEmpty = this.skipEmpty;
      this.fillTemplate(node, templateData, context);
      var cw = this.getWriter(context).writeFile(linkMapper.getPath(node));
      cw.write(headerTemplate(templateData));
      cw.write(summaryTableHeader);
      children.forEach(function (child) {
        var metrics = child.getCoverageSummary();
        var isEmpty = metrics.isEmpty();

        if (skipEmpty && isEmpty) {
          return;
        }

        var reportClasses = isEmpty ? emptyClasses : {
          statements: context.classForPercent('statements', metrics.statements.pct),
          lines: context.classForPercent('lines', metrics.lines.pct),
          functions: context.classForPercent('functions', metrics.functions.pct),
          branches: context.classForPercent('branches', metrics.branches.pct)
        };
        var data = {
          metrics: isEmpty ? fixPct(metrics) : metrics,
          reportClasses: reportClasses,
          file: child.getRelativeName(),
          output: linkMapper.relativePath(node, child)
        };
        cw.write(summaryLineTemplate(data) + '\n');
      });
      cw.write(summaryTableFooter);
      cw.write(footerTemplate(templateData));
      cw.close();
    }
  }, {
    key: "onDetail",
    value: function onDetail(node, context) {
      var linkMapper = this.linkMapper;
      var templateData = this.getTemplateData();
      this.fillTemplate(node, templateData, context);
      var cw = this.getWriter(context).writeFile(linkMapper.getPath(node));
      cw.write(headerTemplate(templateData));
      cw.write('<pre><table class="coverage">\n');
      cw.write(detailTemplate(annotator(node.getFileCoverage(), context)));
      cw.write('</table></pre>\n');
      cw.write(footerTemplate(templateData));
      cw.close();
    }
  }]);

  return HtmlReport;
}(ReportBase);

module.exports = HtmlReport;