/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('istanbul-lib-report'),
    ReportBase = _require.ReportBase;

var TextSummaryReport =
/*#__PURE__*/
function (_ReportBase) {
  _inherits(TextSummaryReport, _ReportBase);

  function TextSummaryReport(opts) {
    var _this;

    _classCallCheck(this, TextSummaryReport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextSummaryReport).call(this));
    opts = opts || {};
    _this.file = opts.file || null;
    return _this;
  }

  _createClass(TextSummaryReport, [{
    key: "onStart",
    value: function onStart(node, context) {
      var summary = node.getCoverageSummary();
      var cw = context.writer.writeFile(this.file);

      var printLine = function printLine(key) {
        var str = lineForKey(summary, key);
        var clazz = context.classForPercent(key, summary[key].pct);
        cw.println(cw.colorize(str, clazz));
      };

      cw.println('');
      cw.println('=============================== Coverage summary ===============================');
      printLine('statements');
      printLine('branches');
      printLine('functions');
      printLine('lines');
      cw.println('================================================================================');
      cw.close();
    }
  }]);

  return TextSummaryReport;
}(ReportBase);

function lineForKey(summary, key) {
  var metrics = summary[key];
  key = key.substring(0, 1).toUpperCase() + key.substring(1);

  if (key.length < 12) {
    key += '                   '.substring(0, 12 - key.length);
  }

  var result = [key, ':', metrics.pct + '%', '(', metrics.covered + '/' + metrics.total, ')'].join(' ');
  var skipped = metrics.skipped;

  if (skipped > 0) {
    return result + ', ' + skipped + ' ignored';
  }

  return result;
}

module.exports = TextSummaryReport;