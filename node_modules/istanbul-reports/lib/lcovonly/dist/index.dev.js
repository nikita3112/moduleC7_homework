/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('istanbul-lib-report'),
    ReportBase = _require.ReportBase;

var LcovOnlyReport =
/*#__PURE__*/
function (_ReportBase) {
  _inherits(LcovOnlyReport, _ReportBase);

  function LcovOnlyReport(opts) {
    var _this;

    _classCallCheck(this, LcovOnlyReport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LcovOnlyReport).call(this));
    _this.file = opts.file || 'lcov.info';
    _this.projectRoot = opts.projectRoot || process.cwd();
    _this.contentWriter = null;
    return _this;
  }

  _createClass(LcovOnlyReport, [{
    key: "onStart",
    value: function onStart(root, context) {
      this.contentWriter = context.writer.writeFile(this.file);
    }
  }, {
    key: "onDetail",
    value: function onDetail(node) {
      var fc = node.getFileCoverage();
      var writer = this.contentWriter;
      var functions = fc.f;
      var functionMap = fc.fnMap;
      var lines = fc.getLineCoverage();
      var branches = fc.b;
      var branchMap = fc.branchMap;
      var summary = node.getCoverageSummary();

      var path = require('path');

      writer.println('TN:'); //no test nam

      writer.println('SF:' + path.relative(this.projectRoot, fc.path));
      Object.values(functionMap).forEach(function (meta) {
        writer.println('FN:' + [meta.decl.start.line, meta.name].join(','));
      });
      writer.println('FNF:' + summary.functions.total);
      writer.println('FNH:' + summary.functions.covered);
      Object.entries(functionMap).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            meta = _ref2[1];

        var stats = functions[key];
        writer.println('FNDA:' + [stats, meta.name].join(','));
      });
      Object.entries(lines).forEach(function (entry) {
        writer.println('DA:' + entry.join(','));
      });
      writer.println('LF:' + summary.lines.total);
      writer.println('LH:' + summary.lines.covered);
      Object.entries(branches).forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            branchArray = _ref4[1];

        var meta = branchMap[key];
        var line = meta.loc.start.line;
        branchArray.forEach(function (b, i) {
          writer.println('BRDA:' + [line, key, i, b].join(','));
        });
      });
      writer.println('BRF:' + summary.branches.total);
      writer.println('BRH:' + summary.branches.covered);
      writer.println('end_of_record');
    }
  }, {
    key: "onEnd",
    value: function onEnd() {
      this.contentWriter.close();
    }
  }]);

  return LcovOnlyReport;
}(ReportBase);

module.exports = LcovOnlyReport;