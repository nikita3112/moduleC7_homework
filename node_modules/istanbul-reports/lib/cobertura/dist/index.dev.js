'use strict';
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var path = require('path');

var _require = require('html-escaper'),
    escape = _require.escape;

var _require2 = require('istanbul-lib-report'),
    ReportBase = _require2.ReportBase;

var CoberturaReport =
/*#__PURE__*/
function (_ReportBase) {
  _inherits(CoberturaReport, _ReportBase);

  function CoberturaReport(opts) {
    var _this;

    _classCallCheck(this, CoberturaReport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CoberturaReport).call(this));
    _this.cw = null;
    _this.xml = null;
    _this.projectRoot = opts.projectRoot || process.cwd();
    _this.file = opts.file || 'cobertura-coverage.xml';
    return _this;
  }

  _createClass(CoberturaReport, [{
    key: "onStart",
    value: function onStart(root, context) {
      this.cw = context.writer.writeFile(this.file);
      this.xml = context.getXMLWriter(this.cw);
      this.writeRootStats(root);
    }
  }, {
    key: "onEnd",
    value: function onEnd() {
      this.xml.closeAll();
      this.cw.close();
    }
  }, {
    key: "writeRootStats",
    value: function writeRootStats(node) {
      var metrics = node.getCoverageSummary();
      this.cw.println('<?xml version="1.0" ?>');
      this.cw.println('<!DOCTYPE coverage SYSTEM "http://cobertura.sourceforge.net/xml/coverage-04.dtd">');
      this.xml.openTag('coverage', {
        'lines-valid': metrics.lines.total,
        'lines-covered': metrics.lines.covered,
        'line-rate': metrics.lines.pct / 100.0,
        'branches-valid': metrics.branches.total,
        'branches-covered': metrics.branches.covered,
        'branch-rate': metrics.branches.pct / 100.0,
        timestamp: Date.now().toString(),
        complexity: '0',
        version: '0.1'
      });
      this.xml.openTag('sources');
      this.xml.inlineTag('source', null, this.projectRoot);
      this.xml.closeTag('sources');
      this.xml.openTag('packages');
    }
  }, {
    key: "onSummary",
    value: function onSummary(node) {
      if (node.isRoot()) {
        return;
      }

      var metrics = node.getCoverageSummary(true);

      if (!metrics) {
        return;
      }

      this.xml.openTag('package', {
        name: escape(asJavaPackage(node)),
        'line-rate': metrics.lines.pct / 100.0,
        'branch-rate': metrics.branches.pct / 100.0
      });
      this.xml.openTag('classes');
    }
  }, {
    key: "onSummaryEnd",
    value: function onSummaryEnd(node) {
      if (node.isRoot()) {
        return;
      }

      this.xml.closeTag('classes');
      this.xml.closeTag('package');
    }
  }, {
    key: "onDetail",
    value: function onDetail(node) {
      var _this2 = this;

      var fileCoverage = node.getFileCoverage();
      var metrics = node.getCoverageSummary();
      var branchByLine = fileCoverage.getBranchCoverageByLine();
      this.xml.openTag('class', {
        name: escape(asClassName(node)),
        filename: path.relative(this.projectRoot, fileCoverage.path),
        'line-rate': metrics.lines.pct / 100.0,
        'branch-rate': metrics.branches.pct / 100.0
      });
      this.xml.openTag('methods');
      var fnMap = fileCoverage.fnMap;
      Object.entries(fnMap).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            _ref2$ = _ref2[1],
            name = _ref2$.name,
            decl = _ref2$.decl;

        var hits = fileCoverage.f[k];

        _this2.xml.openTag('method', {
          name: escape(name),
          hits: hits,
          signature: '()V' //fake out a no-args void return

        });

        _this2.xml.openTag('lines'); //Add the function definition line and hits so that jenkins cobertura plugin records method hits


        _this2.xml.inlineTag('line', {
          number: decl.start.line,
          hits: hits
        });

        _this2.xml.closeTag('lines');

        _this2.xml.closeTag('method');
      });
      this.xml.closeTag('methods');
      this.xml.openTag('lines');
      var lines = fileCoverage.getLineCoverage();
      Object.entries(lines).forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            k = _ref4[0],
            hits = _ref4[1];

        var attrs = {
          number: k,
          hits: hits,
          branch: 'false'
        };
        var branchDetail = branchByLine[k];

        if (branchDetail) {
          attrs.branch = true;
          attrs['condition-coverage'] = branchDetail.coverage + '% (' + branchDetail.covered + '/' + branchDetail.total + ')';
        }

        _this2.xml.inlineTag('line', attrs);
      });
      this.xml.closeTag('lines');
      this.xml.closeTag('class');
    }
  }]);

  return CoberturaReport;
}(ReportBase);

function asJavaPackage(node) {
  return node.getRelativeName().replace(/\//g, '.').replace(/\\/g, '.').replace(/\.$/, '');
}

function asClassName(node) {
  return node.getRelativeName().replace(/.*[\\/]/, '');
}

module.exports = CoberturaReport;