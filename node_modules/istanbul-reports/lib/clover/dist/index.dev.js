'use strict';
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('istanbul-lib-report'),
    ReportBase = _require.ReportBase;

var CloverReport =
/*#__PURE__*/
function (_ReportBase) {
  _inherits(CloverReport, _ReportBase);

  function CloverReport(opts) {
    var _this;

    _classCallCheck(this, CloverReport);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CloverReport).call(this));
    _this.cw = null;
    _this.xml = null;
    _this.projectRoot = opts.projectRoot || process.cwd();
    _this.file = opts.file || 'clover.xml';
    return _this;
  }

  _createClass(CloverReport, [{
    key: "onStart",
    value: function onStart(root, context) {
      this.cw = context.writer.writeFile(this.file);
      this.xml = context.getXMLWriter(this.cw);
      this.writeRootStats(root, context);
    }
  }, {
    key: "onEnd",
    value: function onEnd() {
      this.xml.closeAll();
      this.cw.close();
    }
  }, {
    key: "getTreeStats",
    value: function getTreeStats(node, context) {
      var state = {
        packages: 0,
        files: 0,
        classes: 0
      };
      var visitor = {
        onSummary: function onSummary(node, state) {
          var metrics = node.getCoverageSummary(true);

          if (metrics) {
            state.packages += 1;
          }
        },
        onDetail: function onDetail(node, state) {
          state.classes += 1;
          state.files += 1;
        }
      };
      node.visit(context.getVisitor(visitor), state);
      return state;
    }
  }, {
    key: "writeRootStats",
    value: function writeRootStats(node, context) {
      this.cw.println('<?xml version="1.0" encoding="UTF-8"?>');
      this.xml.openTag('coverage', {
        generated: Date.now().toString(),
        clover: '3.2.0'
      });
      this.xml.openTag('project', {
        timestamp: Date.now().toString(),
        name: 'All files'
      });
      var metrics = node.getCoverageSummary();
      this.xml.inlineTag('metrics', _objectSpread({
        statements: metrics.lines.total,
        coveredstatements: metrics.lines.covered,
        conditionals: metrics.branches.total,
        coveredconditionals: metrics.branches.covered,
        methods: metrics.functions.total,
        coveredmethods: metrics.functions.covered,
        elements: metrics.lines.total + metrics.branches.total + metrics.functions.total,
        coveredelements: metrics.lines.covered + metrics.branches.covered + metrics.functions.covered,
        complexity: 0,
        loc: metrics.lines.total,
        ncloc: metrics.lines.total
      }, this.getTreeStats(node, context)));
    }
  }, {
    key: "writeMetrics",
    value: function writeMetrics(metrics) {
      this.xml.inlineTag('metrics', {
        statements: metrics.lines.total,
        coveredstatements: metrics.lines.covered,
        conditionals: metrics.branches.total,
        coveredconditionals: metrics.branches.covered,
        methods: metrics.functions.total,
        coveredmethods: metrics.functions.covered
      });
    }
  }, {
    key: "onSummary",
    value: function onSummary(node) {
      if (node.isRoot()) {
        return;
      }

      var metrics = node.getCoverageSummary(true);

      if (!metrics) {
        return;
      }

      this.xml.openTag('package', {
        name: asJavaPackage(node)
      });
      this.writeMetrics(metrics);
    }
  }, {
    key: "onSummaryEnd",
    value: function onSummaryEnd(node) {
      if (node.isRoot()) {
        return;
      }

      this.xml.closeTag('package');
    }
  }, {
    key: "onDetail",
    value: function onDetail(node) {
      var _this2 = this;

      var fileCoverage = node.getFileCoverage();
      var metrics = node.getCoverageSummary();
      var branchByLine = fileCoverage.getBranchCoverageByLine();
      this.xml.openTag('file', {
        name: asClassName(node),
        path: fileCoverage.path
      });
      this.writeMetrics(metrics);
      var lines = fileCoverage.getLineCoverage();
      Object.entries(lines).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            count = _ref2[1];

        var attrs = {
          num: k,
          count: count,
          type: 'stmt'
        };
        var branchDetail = branchByLine[k];

        if (branchDetail) {
          attrs.type = 'cond';
          attrs.truecount = branchDetail.covered;
          attrs.falsecount = branchDetail.total - branchDetail.covered;
        }

        _this2.xml.inlineTag('line', attrs);
      });
      this.xml.closeTag('file');
    }
  }]);

  return CloverReport;
}(ReportBase);

function asJavaPackage(node) {
  return node.getRelativeName().replace(/\//g, '.').replace(/\\/g, '.').replace(/\.$/, '');
}

function asClassName(node) {
  return node.getRelativeName().replace(/.*[\\/]/, '');
}

module.exports = CloverReport;