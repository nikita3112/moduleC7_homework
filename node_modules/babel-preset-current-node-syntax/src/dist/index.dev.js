"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var tests = {
  // ECMAScript 2018
  "object-rest-spread": ["({ ...{} })", "({ ...x } = {})"],
  // Babel 7.2.0
  "async-generators": ["async function* f() {}"],
  //  Babel 7.2.0
  // ECMAScript 2019
  "optional-catch-binding": ["try {} catch {}"],
  // Babel 7.2.0
  "json-strings": ["'\\u2028'"],
  // Babel 7.2.0
  // ECMAScript 2020
  "bigint": ["1n"],
  // Babel 7.8.0
  "optional-chaining": ["a?.b"],
  // Babel 7.9.0
  "nullish-coalescing-operator": ["a ?? b"],
  // Babel 7.9.0
  // import.meta is handled manually
  // Stage 3
  "numeric-separator": ["1_2"],
  "class-properties": ["(class { x = 1 })", "(class { #x = 1 })", "(class { #x() {} })"],
  "logical-assignment-operators": ["a ||= b", "a &&= b", "a ??= c"]
};
var plugins = [];

var works = function works(test) {
  try {
    // Wrap the test in a function to only test the syntax, without executing it
    (0, eval)("(() => { ".concat(test, " })"));
    return true;
  } catch (_error) {
    return false;
  }
};

for (var _i = 0, _Object$entries = Object.entries(tests); _i < _Object$entries.length; _i++) {
  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      name = _Object$entries$_i[0],
      cases = _Object$entries$_i[1];

  if (cases.some(works)) {
    plugins.push(require.resolve("@babel/plugin-syntax-".concat(name)));
  }
} // import.meta is only allowed in modules, and modules can only be evaluated
// synchronously. For this reason, we cannot detect import.meta support at
// runtime. It is supported starting from 10.4, so we can check the version.


var major = parseInt(process.versions.node, 10);
var minor = parseInt(process.versions.node.match(/^\d+\.(\d+)/)[1], 10);

if (major > 10 || major === 10 && minor >= 4) {
  plugins.push(require.resolve("@babel/plugin-syntax-import-meta"));
} // Same for top level await - it is only supported in modules. It is supported
// from 14.3.0


if (major > 14 || major === 14 && minor >= 3) {
  plugins.push(require.resolve("@babel/plugin-syntax-top-level-await"));
}

module.exports = function () {
  return {
    plugins: plugins
  };
};