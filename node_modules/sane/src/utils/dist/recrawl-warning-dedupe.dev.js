'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RecrawlWarning =
/*#__PURE__*/
function () {
  function RecrawlWarning(root, count) {
    _classCallCheck(this, RecrawlWarning);

    this.root = root;
    this.count = count;
  }

  _createClass(RecrawlWarning, null, [{
    key: "findByRoot",
    value: function findByRoot(root) {
      for (var i = 0; i < this.RECRAWL_WARNINGS.length; i++) {
        var warning = this.RECRAWL_WARNINGS[i];

        if (warning.root === root) {
          return warning;
        }
      }
    }
  }, {
    key: "isRecrawlWarningDupe",
    value: function isRecrawlWarningDupe(warningMessage) {
      if (typeof warningMessage !== 'string') {
        return false;
      }

      var match = warningMessage.match(this.REGEXP);

      if (!match) {
        return false;
      }

      var count = Number(match[1]);
      var root = match[2];
      var warning = this.findByRoot(root);

      if (warning) {
        // only keep the highest count, assume count to either stay the same or
        // increase.
        if (warning.count >= count) {
          return true;
        } else {
          // update the existing warning to the latest (highest) count
          warning.count = count;
          return false;
        }
      } else {
        this.RECRAWL_WARNINGS.push(new RecrawlWarning(root, count));
        return false;
      }
    }
  }]);

  return RecrawlWarning;
}();

RecrawlWarning.RECRAWL_WARNINGS = [];
RecrawlWarning.REGEXP = /Recrawled this watch (\d+) times, most recently because:\n([^:]+)/;
module.exports = RecrawlWarning;