'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var path = require('path');

var common = require('./common');

var platform = require('os').platform();

var EventEmitter = require('events').EventEmitter;
/**
 * Constants
 */


var DEFAULT_DELAY = common.DEFAULT_DELAY;
var CHANGE_EVENT = common.CHANGE_EVENT;
var DELETE_EVENT = common.DELETE_EVENT;
var ADD_EVENT = common.ADD_EVENT;
var ALL_EVENT = common.ALL_EVENT;
/**
 * Export `NodeWatcher` class.
 * Watches `dir`.
 *
 * @class NodeWatcher
 * @param {String} dir
 * @param {Object} opts
 * @public
 */

module.exports =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(NodeWatcher, _EventEmitter);

  function NodeWatcher(dir, opts) {
    var _this;

    _classCallCheck(this, NodeWatcher);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeWatcher).call(this));
    common.assignOptions(_assertThisInitialized(_this), opts);
    _this.watched = Object.create(null);
    _this.changeTimers = Object.create(null);
    _this.dirRegistery = Object.create(null);
    _this.root = path.resolve(dir);
    _this.watchdir = _this.watchdir.bind(_assertThisInitialized(_this));
    _this.register = _this.register.bind(_assertThisInitialized(_this));
    _this.checkedEmitError = _this.checkedEmitError.bind(_assertThisInitialized(_this));

    _this.watchdir(_this.root);

    common.recReaddir(_this.root, _this.watchdir, _this.register, _this.emit.bind(_assertThisInitialized(_this), 'ready'), _this.checkedEmitError, _this.ignored);
    return _this;
  }
  /**
   * Register files that matches our globs to know what to type of event to
   * emit in the future.
   *
   * Registery looks like the following:
   *
   *  dirRegister => Map {
   *    dirpath => Map {
   *       filename => true
   *    }
   *  }
   *
   * @param {string} filepath
   * @return {boolean} whether or not we have registered the file.
   * @private
   */


  _createClass(NodeWatcher, [{
    key: "register",
    value: function register(filepath) {
      var relativePath = path.relative(this.root, filepath);

      if (!common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)) {
        return false;
      }

      var dir = path.dirname(filepath);

      if (!this.dirRegistery[dir]) {
        this.dirRegistery[dir] = Object.create(null);
      }

      var filename = path.basename(filepath);
      this.dirRegistery[dir][filename] = true;
      return true;
    }
    /**
     * Removes a file from the registery.
     *
     * @param {string} filepath
     * @private
     */

  }, {
    key: "unregister",
    value: function unregister(filepath) {
      var dir = path.dirname(filepath);

      if (this.dirRegistery[dir]) {
        var filename = path.basename(filepath);
        delete this.dirRegistery[dir][filename];
      }
    }
    /**
     * Removes a dir from the registery.
     *
     * @param {string} dirpath
     * @private
     */

  }, {
    key: "unregisterDir",
    value: function unregisterDir(dirpath) {
      if (this.dirRegistery[dirpath]) {
        delete this.dirRegistery[dirpath];
      }
    }
    /**
     * Checks if a file or directory exists in the registery.
     *
     * @param {string} fullpath
     * @return {boolean}
     * @private
     */

  }, {
    key: "registered",
    value: function registered(fullpath) {
      var dir = path.dirname(fullpath);
      return this.dirRegistery[fullpath] || this.dirRegistery[dir] && this.dirRegistery[dir][path.basename(fullpath)];
    }
    /**
     * Emit "error" event if it's not an ignorable event
     *
     * @param error
     * @private
     */

  }, {
    key: "checkedEmitError",
    value: function checkedEmitError(error) {
      if (!isIgnorableFileError(error)) {
        this.emit('error', error);
      }
    }
    /**
     * Watch a directory.
     *
     * @param {string} dir
     * @private
     */

  }, {
    key: "watchdir",
    value: function watchdir(dir) {
      if (this.watched[dir]) {
        return;
      }

      var watcher = fs.watch(dir, {
        persistent: true
      }, this.normalizeChange.bind(this, dir));
      this.watched[dir] = watcher;
      watcher.on('error', this.checkedEmitError);

      if (this.root !== dir) {
        this.register(dir);
      }
    }
    /**
     * Stop watching a directory.
     *
     * @param {string} dir
     * @private
     */

  }, {
    key: "stopWatching",
    value: function stopWatching(dir) {
      if (this.watched[dir]) {
        this.watched[dir].close();
        delete this.watched[dir];
      }
    }
    /**
     * End watching.
     *
     * @public
     */

  }, {
    key: "close",
    value: function close(callback) {
      Object.keys(this.watched).forEach(this.stopWatching, this);
      this.removeAllListeners();

      if (typeof callback === 'function') {
        setImmediate(callback.bind(null, null, true));
      }
    }
    /**
     * On some platforms, as pointed out on the fs docs (most likely just win32)
     * the file argument might be missing from the fs event. Try to detect what
     * change by detecting if something was deleted or the most recent file change.
     *
     * @param {string} dir
     * @param {string} event
     * @param {string} file
     * @public
     */

  }, {
    key: "detectChangedFile",
    value: function detectChangedFile(dir, event, callback) {
      if (!this.dirRegistery[dir]) {
        return;
      }

      var found = false;
      var closest = {
        mtime: 0
      };
      var c = 0;
      Object.keys(this.dirRegistery[dir]).forEach(function (file, i, arr) {
        fs.lstat(path.join(dir, file), function (error, stat) {
          if (found) {
            return;
          }

          if (error) {
            if (isIgnorableFileError(error)) {
              found = true;
              callback(file);
            } else {
              this.emit('error', error);
            }
          } else {
            if (stat.mtime > closest.mtime) {
              stat.file = file;
              closest = stat;
            }

            if (arr.length === ++c) {
              callback(closest.file);
            }
          }
        }.bind(this));
      }, this);
    }
    /**
     * Normalize fs events and pass it on to be processed.
     *
     * @param {string} dir
     * @param {string} event
     * @param {string} file
     * @public
     */

  }, {
    key: "normalizeChange",
    value: function normalizeChange(dir, event, file) {
      if (!file) {
        this.detectChangedFile(dir, event, function (actualFile) {
          if (actualFile) {
            this.processChange(dir, event, actualFile);
          }
        }.bind(this));
      } else {
        this.processChange(dir, event, path.normalize(file));
      }
    }
    /**
     * Process changes.
     *
     * @param {string} dir
     * @param {string} event
     * @param {string} file
     * @public
     */

  }, {
    key: "processChange",
    value: function processChange(dir, event, file) {
      var fullPath = path.join(dir, file);
      var relativePath = path.join(path.relative(this.root, dir), file);
      fs.lstat(fullPath, function (error, stat) {
        if (error && error.code !== 'ENOENT') {
          this.emit('error', error);
        } else if (!error && stat.isDirectory()) {
          // win32 emits usless change events on dirs.
          if (event !== 'change') {
            this.watchdir(fullPath);

            if (common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)) {
              this.emitEvent(ADD_EVENT, relativePath, stat);
            }
          }
        } else {
          var registered = this.registered(fullPath);

          if (error && error.code === 'ENOENT') {
            this.unregister(fullPath);
            this.stopWatching(fullPath);
            this.unregisterDir(fullPath);

            if (registered) {
              this.emitEvent(DELETE_EVENT, relativePath);
            }
          } else if (registered) {
            this.emitEvent(CHANGE_EVENT, relativePath, stat);
          } else {
            if (this.register(fullPath)) {
              this.emitEvent(ADD_EVENT, relativePath, stat);
            }
          }
        }
      }.bind(this));
    }
    /**
     * Triggers a 'change' event after debounding it to take care of duplicate
     * events on os x.
     *
     * @private
     */

  }, {
    key: "emitEvent",
    value: function emitEvent(type, file, stat) {
      var key = type + '-' + file;
      var addKey = ADD_EVENT + '-' + file;

      if (type === CHANGE_EVENT && this.changeTimers[addKey]) {
        // Ignore the change event that is immediately fired after an add event.
        // (This happens on Linux).
        return;
      }

      clearTimeout(this.changeTimers[key]);
      this.changeTimers[key] = setTimeout(function () {
        delete this.changeTimers[key];

        if (type === ADD_EVENT && stat.isDirectory()) {
          // Recursively emit add events and watch for sub-files/folders
          common.recReaddir(path.resolve(this.root, file), function emitAddDir(dir, stats) {
            this.watchdir(dir);
            this.rawEmitEvent(ADD_EVENT, path.relative(this.root, dir), stats);
          }.bind(this), function emitAddFile(file, stats) {
            this.register(file);
            this.rawEmitEvent(ADD_EVENT, path.relative(this.root, file), stats);
          }.bind(this), function endCallback() {}, this.checkedEmitError, this.ignored);
        } else {
          this.rawEmitEvent(type, file, stat);
        }
      }.bind(this), DEFAULT_DELAY);
    }
    /**
     * Actually emit the events
     */

  }, {
    key: "rawEmitEvent",
    value: function rawEmitEvent(type, file, stat) {
      this.emit(type, file, this.root, stat);
      this.emit(ALL_EVENT, type, file, this.root, stat);
    }
  }]);

  return NodeWatcher;
}(EventEmitter);
/**
 * Determine if a given FS error can be ignored
 *
 * @private
 */


function isIgnorableFileError(error) {
  return error.code === 'ENOENT' || // Workaround Windows node issue #4337.
  error.code === 'EPERM' && platform === 'win32';
}