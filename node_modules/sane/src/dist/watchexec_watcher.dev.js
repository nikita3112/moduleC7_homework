'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var execa = require('execa');

var _require = require('fs'),
    statSync = _require.statSync;

var path = require('path');

var common = require('./common');

var EventEmitter = require('events').EventEmitter;

var _require2 = require('os'),
    EOL = _require2.EOL;
/**
 * Constants
 */


var CHANGE_EVENT = common.CHANGE_EVENT;
var DELETE_EVENT = common.DELETE_EVENT;
var ADD_EVENT = common.ADD_EVENT;
var ALL_EVENT = common.ALL_EVENT;
var typeMap = {
  rename: CHANGE_EVENT,
  write: CHANGE_EVENT,
  remove: DELETE_EVENT,
  create: ADD_EVENT
};
var messageRegexp = /(rename|write|remove|create)\s(.+)/;
/**
 * Manages streams from subprocess and turns into sane events
 *
 * @param {Stream} data
 * @private
 */

function _messageHandler(data) {
  var _this = this;

  data.toString().split(EOL).filter(function (str) {
    return str.trim().length;
  }).filter(function (str) {
    return messageRegexp.test(str);
  }).map(function (line) {
    var _ref = _toConsumableArray(line.match(messageRegexp)),
        command = _ref[1],
        path = _ref[2];

    return [command, path];
  }).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        command = _ref3[0],
        file = _ref3[1];

    var stat;
    var type = typeMap[command];

    if (type === DELETE_EVENT) {
      stat = null;
    } else {
      try {
        stat = statSync(file);
      } catch (e) {
        // There is likely a delete coming down the pipe.
        if (e.code === 'ENOENT') {
          return;
        }

        throw e;
      }
    }

    _this.emitEvent(type, path.relative(_this.root, file), stat);
  });
}
/**
 * Export `WatchexecWatcher` class.
 * Watches `dir`.
 *
 * @class WatchexecWatcher
 * @param String dir
 * @param {Object} opts
 * @public
 */


var WatchexecWatcher =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(WatchexecWatcher, _EventEmitter);

  function WatchexecWatcher(dir, opts) {
    var _this2;

    _classCallCheck(this, WatchexecWatcher);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WatchexecWatcher).call(this));
    common.assignOptions(_assertThisInitialized(_this2), opts);
    _this2.root = path.resolve(dir);
    _this2._process = execa('watchexec', ['-n', '--', 'node', __dirname + '/watchexec_client.js'], {
      cwd: dir
    });

    _this2._process.stdout.on('data', _messageHandler.bind(_assertThisInitialized(_this2)));

    _this2._readyTimer = setTimeout(_this2.emit.bind(_assertThisInitialized(_this2), 'ready'), 1000);
    return _this2;
  }

  _createClass(WatchexecWatcher, [{
    key: "close",
    value: function close(callback) {
      clearTimeout(this._readyTimer);
      this.removeAllListeners();
      this._process && !this._process.killed && this._process.kill();

      if (typeof callback === 'function') {
        setImmediate(callback.bind(null, null, true));
      }
    }
    /**
     * Transform and emit an event comming from the poller.
     *
     * @param {EventEmitter} monitor
     * @public
     */

  }, {
    key: "emitEvent",
    value: function emitEvent(type, file, stat) {
      this.emit(type, file, this.root, stat);
      this.emit(ALL_EVENT, type, file, this.root, stat);
    }
  }]);

  return WatchexecWatcher;
}(EventEmitter);

WatchexecWatcher._messageHandler = _messageHandler;
module.exports = WatchexecWatcher;