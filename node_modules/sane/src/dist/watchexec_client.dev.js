/*
   This file is the executable run by watchexec
   when a change is detected.

   It will extract changes from the environment variables
   set by watchexec and write to stdout in a format
   readable by the file `../watchexec_watcher.js`.
*/
'use strict';

var _require = require('os'),
    EOL = _require.EOL;

function withPrefixes(prefixes) {
  return function withPrefix(arr, i) {
    return arr.map(function (str) {
      return "".concat(prefixes[i], " ").concat(str);
    });
  };
}

var allPrefixes = ['write', 'rename', 'remove', 'create'];

function extractChanges(context) {
  var WATCHEXEC_COMMON_PATH = context.WATCHEXEC_COMMON_PATH,
      WATCHEXEC_WRITTEN_PATH = context.WATCHEXEC_WRITTEN_PATH,
      WATCHEXEC_RENAMED_PATH = context.WATCHEXEC_RENAMED_PATH,
      WATCHEXEC_REMOVED_PATH = context.WATCHEXEC_REMOVED_PATH,
      WATCHEXEC_CREATED_PATH = context.WATCHEXEC_CREATED_PATH;
  var events = [WATCHEXEC_WRITTEN_PATH, WATCHEXEC_RENAMED_PATH, WATCHEXEC_REMOVED_PATH, WATCHEXEC_CREATED_PATH];
  var currentPrefixes = events.map(function (l, i) {
    return l && allPrefixes[i];
  }).filter(Boolean);

  function toFullPath(arr) {
    return arr.map(function (path) {
      return (WATCHEXEC_COMMON_PATH || '') + path;
    });
  }

  var message = events.filter(Boolean).map(function (str) {
    return str.split(':');
  }).map(toFullPath).map(withPrefixes(currentPrefixes)).reduce(function (e, memo) {
    return memo.concat(e);
  }, []).join(EOL);
  return message;
}

if (require.main === module) {
  var message = extractChanges(process.env);
  console.log(message);
}

module.exports = extractChanges;