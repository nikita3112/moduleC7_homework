'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var path = require('path');

var watch = require('@cnakazawa/watch');

var common = require('./common');

var EventEmitter = require('events').EventEmitter;
/**
 * Constants
 */


var DEFAULT_DELAY = common.DEFAULT_DELAY;
var CHANGE_EVENT = common.CHANGE_EVENT;
var DELETE_EVENT = common.DELETE_EVENT;
var ADD_EVENT = common.ADD_EVENT;
var ALL_EVENT = common.ALL_EVENT;
/**
 * Export `PollWatcher` class.
 * Watches `dir`.
 *
 * @class PollWatcher
 * @param String dir
 * @param {Object} opts
 * @public
 */

module.exports =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(PollWatcher, _EventEmitter);

  function PollWatcher(dir, opts) {
    var _this;

    _classCallCheck(this, PollWatcher);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollWatcher).call(this));
    opts = common.assignOptions(_assertThisInitialized(_this), opts);
    _this.watched = Object.create(null);
    _this.root = path.resolve(dir);
    watch.createMonitor(_this.root, {
      interval: (opts.interval || DEFAULT_DELAY) / 1000,
      filter: _this.filter.bind(_assertThisInitialized(_this))
    }, _this.init.bind(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Given a fullpath of a file or directory check if we need to watch it.
   *
   * @param {string} filepath
   * @param {object} stat
   * @private
   */


  _createClass(PollWatcher, [{
    key: "filter",
    value: function filter(filepath, stat) {
      return stat.isDirectory() || common.isFileIncluded(this.globs, this.dot, this.doIgnore, path.relative(this.root, filepath));
    }
    /**
     * Initiate the polling file watcher with the event emitter passed from
     * `watch.watchTree`.
     *
     * @param {EventEmitter} monitor
     * @public
     */

  }, {
    key: "init",
    value: function init(monitor) {
      this.watched = monitor.files;
      monitor.on('changed', this.emitEvent.bind(this, CHANGE_EVENT));
      monitor.on('removed', this.emitEvent.bind(this, DELETE_EVENT));
      monitor.on('created', this.emitEvent.bind(this, ADD_EVENT)); // 1 second wait because mtime is second-based.

      setTimeout(this.emit.bind(this, 'ready'), 1000);
    }
    /**
     * Transform and emit an event comming from the poller.
     *
     * @param {EventEmitter} monitor
     * @public
     */

  }, {
    key: "emitEvent",
    value: function emitEvent(type, file, stat) {
      file = path.relative(this.root, file);

      if (type === DELETE_EVENT) {
        // Matching the non-polling API
        stat = null;
      }

      this.emit(type, file, this.root, stat);
      this.emit(ALL_EVENT, type, file, this.root, stat);
    }
    /**
     * End watching.
     *
     * @public
     */

  }, {
    key: "close",
    value: function close(callback) {
      Object.keys(this.watched).forEach(function (filepath) {
        return fs.unwatchFile(filepath);
      });
      this.removeAllListeners();

      if (typeof callback === 'function') {
        setImmediate(callback.bind(null, null, true));
      }
    }
  }]);

  return PollWatcher;
}(EventEmitter);