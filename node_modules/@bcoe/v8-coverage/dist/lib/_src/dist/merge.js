"use strict";
exports.__esModule = true;
exports.mergeFunctionCovs = exports.mergeScriptCovs = exports.mergeProcessCovs = void 0;
var normalize_1 = require("./normalize");
var range_tree_1 = require("./range-tree");
/**
 * Merges a list of process coverages.
 *
 * The result is normalized.
 * The input values may be mutated, it is not safe to use them after passing
 * them to this function.
 * The computation is synchronous.
 *
 * @param processCovs Process coverages to merge.
 * @return Merged process coverage.
 */
function mergeProcessCovs(processCovs) {
    if (processCovs.length === 0) {
        return { result: [] };
    }
    var urlToScripts = new Map();
    for (var _i = 0, processCovs_1 = processCovs; _i < processCovs_1.length; _i++) {
        var processCov = processCovs_1[_i];
        for (var _a = 0, _b = processCov.result; _a < _b.length; _a++) {
            var scriptCov = _b[_a];
            var scriptCovs = urlToScripts.get(scriptCov.url);
            if (scriptCovs === undefined) {
                scriptCovs = [];
                urlToScripts.set(scriptCov.url, scriptCovs);
            }
            scriptCovs.push(scriptCov);
        }
    }
    var result = [];
    for (var _c = 0, _d = urlToScripts.values(); _c < _d.length; _c++) {
        var scripts = _d[_c];
        // assert: `scripts.length > 0`
        result.push(mergeScriptCovs(scripts));
    }
    var merged = { result: result };
    normalize_1.normalizeProcessCov(merged);
    return merged;
}
exports.mergeProcessCovs = mergeProcessCovs;
/**
 * Merges a list of matching script coverages.
 *
 * Scripts are matching if they have the same `url`.
 * The result is normalized.
 * The input values may be mutated, it is not safe to use them after passing
 * them to this function.
 * The computation is synchronous.
 *
 * @param scriptCovs Process coverages to merge.
 * @return Merged script coverage, or `undefined` if the input list was empty.
 */
function mergeScriptCovs(scriptCovs) {
    if (scriptCovs.length === 0) {
        return undefined;
    }
    else if (scriptCovs.length === 1) {
        var merged_1 = scriptCovs[0];
        normalize_1.deepNormalizeScriptCov(merged_1);
        return merged_1;
    }
    var first = scriptCovs[0];
    var scriptId = first.scriptId;
    var url = first.url;
    var rangeToFuncs = new Map();
    for (var _i = 0, scriptCovs_1 = scriptCovs; _i < scriptCovs_1.length; _i++) {
        var scriptCov = scriptCovs_1[_i];
        for (var _a = 0, _b = scriptCov.functions; _a < _b.length; _a++) {
            var funcCov = _b[_a];
            var rootRange = stringifyFunctionRootRange(funcCov);
            var funcCovs = rangeToFuncs.get(rootRange);
            if (funcCovs === undefined ||
                // if the entry in rangeToFuncs is function-level granularity and
                // the new coverage is block-level, prefer block-level.
                (!funcCovs[0].isBlockCoverage && funcCov.isBlockCoverage)) {
                funcCovs = [];
                rangeToFuncs.set(rootRange, funcCovs);
            }
            else if (funcCovs[0].isBlockCoverage && !funcCov.isBlockCoverage) {
                // if the entry in rangeToFuncs is block-level granularity, we should
                // not append function level granularity.
                continue;
            }
            funcCovs.push(funcCov);
        }
    }
    var functions = [];
    for (var _c = 0, _d = rangeToFuncs.values(); _c < _d.length; _c++) {
        var funcCovs = _d[_c];
        // assert: `funcCovs.length > 0`
        functions.push(mergeFunctionCovs(funcCovs));
    }
    var merged = { scriptId: scriptId, url: url, functions: functions };
    normalize_1.normalizeScriptCov(merged);
    return merged;
}
exports.mergeScriptCovs = mergeScriptCovs;
/**
 * Returns a string representation of the root range of the function.
 *
 * This string can be used to match function with same root range.
 * The string is derived from the start and end offsets of the root range of
 * the function.
 * This assumes that `ranges` is non-empty (true for valid function coverages).
 *
 * @param funcCov Function coverage with the range to stringify
 * @internal
 */
function stringifyFunctionRootRange(funcCov) {
    var rootRange = funcCov.ranges[0];
    return rootRange.startOffset.toString(10) + ";" + rootRange.endOffset.toString(10);
}
/**
 * Merges a list of matching function coverages.
 *
 * Functions are matching if their root ranges have the same span.
 * The result is normalized.
 * The input values may be mutated, it is not safe to use them after passing
 * them to this function.
 * The computation is synchronous.
 *
 * @param funcCovs Function coverages to merge.
 * @return Merged function coverage, or `undefined` if the input list was empty.
 */
function mergeFunctionCovs(funcCovs) {
    if (funcCovs.length === 0) {
        return undefined;
    }
    else if (funcCovs.length === 1) {
        var merged_2 = funcCovs[0];
        normalize_1.normalizeFunctionCov(merged_2);
        return merged_2;
    }
    var functionName = funcCovs[0].functionName;
    var trees = [];
    for (var _i = 0, funcCovs_1 = funcCovs; _i < funcCovs_1.length; _i++) {
        var funcCov = funcCovs_1[_i];
        // assert: `fn.ranges.length > 0`
        // assert: `fn.ranges` is sorted
        trees.push(range_tree_1.RangeTree.fromSortedRanges(funcCov.ranges));
    }
    // assert: `trees.length > 0`
    var mergedTree = mergeRangeTrees(trees);
    normalize_1.normalizeRangeTree(mergedTree);
    var ranges = mergedTree.toRanges();
    var isBlockCoverage = !(ranges.length === 1 && ranges[0].count === 0);
    var merged = { functionName: functionName, ranges: ranges, isBlockCoverage: isBlockCoverage };
    // assert: `merged` is normalized
    return merged;
}
exports.mergeFunctionCovs = mergeFunctionCovs;
/**
 * @precondition Same `start` and `end` for all the trees
 */
function mergeRangeTrees(trees) {
    if (trees.length <= 1) {
        return trees[0];
    }
    var first = trees[0];
    var delta = 0;
    for (var _i = 0, trees_1 = trees; _i < trees_1.length; _i++) {
        var tree = trees_1[_i];
        delta += tree.delta;
    }
    var children = mergeRangeTreeChildren(trees);
    return new range_tree_1.RangeTree(first.start, first.end, delta, children);
}
var RangeTreeWithParent = /** @class */ (function () {
    function RangeTreeWithParent(parentIndex, tree) {
        this.parentIndex = parentIndex;
        this.tree = tree;
    }
    return RangeTreeWithParent;
}());
var StartEvent = /** @class */ (function () {
    function StartEvent(offset, trees) {
        this.offset = offset;
        this.trees = trees;
    }
    StartEvent.compare = function (a, b) {
        return a.offset - b.offset;
    };
    return StartEvent;
}());
var StartEventQueue = /** @class */ (function () {
    function StartEventQueue(queue) {
        this.queue = queue;
        this.nextIndex = 0;
        this.pendingOffset = 0;
        this.pendingTrees = undefined;
    }
    StartEventQueue.fromParentTrees = function (parentTrees) {
        var startToTrees = new Map();
        for (var _i = 0, _a = parentTrees.entries(); _i < _a.length; _i++) {
            var _b = _a[_i], parentIndex = _b[0], parentTree = _b[1];
            for (var _c = 0, _d = parentTree.children; _c < _d.length; _c++) {
                var child = _d[_c];
                var trees = startToTrees.get(child.start);
                if (trees === undefined) {
                    trees = [];
                    startToTrees.set(child.start, trees);
                }
                trees.push(new RangeTreeWithParent(parentIndex, child));
            }
        }
        var queue = [];
        for (var _e = 0, startToTrees_1 = startToTrees; _e < startToTrees_1.length; _e++) {
            var _f = startToTrees_1[_e], startOffset = _f[0], trees = _f[1];
            queue.push(new StartEvent(startOffset, trees));
        }
        queue.sort(StartEvent.compare);
        return new StartEventQueue(queue);
    };
    StartEventQueue.prototype.setPendingOffset = function (offset) {
        this.pendingOffset = offset;
    };
    StartEventQueue.prototype.pushPendingTree = function (tree) {
        if (this.pendingTrees === undefined) {
            this.pendingTrees = [];
        }
        this.pendingTrees.push(tree);
    };
    StartEventQueue.prototype.next = function () {
        var pendingTrees = this.pendingTrees;
        var nextEvent = this.queue[this.nextIndex];
        if (pendingTrees === undefined) {
            this.nextIndex++;
            return nextEvent;
        }
        else if (nextEvent === undefined) {
            this.pendingTrees = undefined;
            return new StartEvent(this.pendingOffset, pendingTrees);
        }
        else {
            if (this.pendingOffset < nextEvent.offset) {
                this.pendingTrees = undefined;
                return new StartEvent(this.pendingOffset, pendingTrees);
            }
            else {
                if (this.pendingOffset === nextEvent.offset) {
                    this.pendingTrees = undefined;
                    for (var _i = 0, pendingTrees_1 = pendingTrees; _i < pendingTrees_1.length; _i++) {
                        var tree = pendingTrees_1[_i];
                        nextEvent.trees.push(tree);
                    }
                }
                this.nextIndex++;
                return nextEvent;
            }
        }
    };
    return StartEventQueue;
}());
function mergeRangeTreeChildren(parentTrees) {
    var result = [];
    var startEventQueue = StartEventQueue.fromParentTrees(parentTrees);
    var parentToNested = new Map();
    var openRange;
    while (true) {
        var event = startEventQueue.next();
        if (event === undefined) {
            break;
        }
        if (openRange !== undefined && openRange.end <= event.offset) {
            result.push(nextChild(openRange, parentToNested));
            openRange = undefined;
        }
        if (openRange === undefined) {
            var openRangeEnd = event.offset + 1;
            for (var _i = 0, _a = event.trees; _i < _a.length; _i++) {
                var _b = _a[_i], parentIndex = _b.parentIndex, tree = _b.tree;
                openRangeEnd = Math.max(openRangeEnd, tree.end);
                insertChild(parentToNested, parentIndex, tree);
            }
            startEventQueue.setPendingOffset(openRangeEnd);
            openRange = { start: event.offset, end: openRangeEnd };
        }
        else {
            for (var _c = 0, _d = event.trees; _c < _d.length; _c++) {
                var _e = _d[_c], parentIndex = _e.parentIndex, tree = _e.tree;
                if (tree.end > openRange.end) {
                    var right = tree.split(openRange.end);
                    startEventQueue.pushPendingTree(new RangeTreeWithParent(parentIndex, right));
                }
                insertChild(parentToNested, parentIndex, tree);
            }
        }
    }
    if (openRange !== undefined) {
        result.push(nextChild(openRange, parentToNested));
    }
    return result;
}
function insertChild(parentToNested, parentIndex, tree) {
    var nested = parentToNested.get(parentIndex);
    if (nested === undefined) {
        nested = [];
        parentToNested.set(parentIndex, nested);
    }
    nested.push(tree);
}
function nextChild(openRange, parentToNested) {
    var matchingTrees = [];
    for (var _i = 0, _a = parentToNested.values(); _i < _a.length; _i++) {
        var nested = _a[_i];
        if (nested.length === 1 && nested[0].start === openRange.start && nested[0].end === openRange.end) {
            matchingTrees.push(nested[0]);
        }
        else {
            matchingTrees.push(new range_tree_1.RangeTree(openRange.start, openRange.end, 0, nested));
        }
    }
    parentToNested.clear();
    return mergeRangeTrees(matchingTrees);
}
