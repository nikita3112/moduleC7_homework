'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var JestHooks =
/*#__PURE__*/
function () {
  function JestHooks() {
    var _this = this;

    _classCallCheck(this, JestHooks);

    _defineProperty(this, '_listeners', void 0);

    _defineProperty(this, '_subscriber', void 0);

    _defineProperty(this, '_emitter', void 0);

    this._listeners = {
      onFileChange: [],
      onTestRunComplete: [],
      shouldRunTestSuite: []
    };
    this._subscriber = {
      onFileChange: function onFileChange(fn) {
        _this._listeners.onFileChange.push(fn);
      },
      onTestRunComplete: function onTestRunComplete(fn) {
        _this._listeners.onTestRunComplete.push(fn);
      },
      shouldRunTestSuite: function shouldRunTestSuite(fn) {
        _this._listeners.shouldRunTestSuite.push(fn);
      }
    };
    this._emitter = {
      onFileChange: function onFileChange(fs) {
        return _this._listeners.onFileChange.forEach(function (listener) {
          return listener(fs);
        });
      },
      onTestRunComplete: function onTestRunComplete(results) {
        return _this._listeners.onTestRunComplete.forEach(function (listener) {
          return listener(results);
        });
      },
      shouldRunTestSuite: function shouldRunTestSuite(testSuiteInfo) {
        var result;
        return regeneratorRuntime.async(function shouldRunTestSuite$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(Promise.all(_this._listeners.shouldRunTestSuite.map(function (listener) {
                  return listener(testSuiteInfo);
                })));

              case 2:
                result = _context.sent;
                return _context.abrupt("return", result.every(Boolean));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        });
      }
    };
  }

  _createClass(JestHooks, [{
    key: "isUsed",
    value: function isUsed(hook) {
      var _this$_listeners$hook;

      return ((_this$_listeners$hook = this._listeners[hook]) === null || _this$_listeners$hook === void 0 ? void 0 : _this$_listeners$hook.length) > 0;
    }
  }, {
    key: "getSubscriber",
    value: function getSubscriber() {
      return this._subscriber;
    }
  }, {
    key: "getEmitter",
    value: function getEmitter() {
      return this._emitter;
    }
  }]);

  return JestHooks;
}();

var _default = JestHooks;
exports["default"] = _default;