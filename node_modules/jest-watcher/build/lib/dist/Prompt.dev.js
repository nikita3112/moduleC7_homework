'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _constants() {
  var data = require('../constants');

  _constants = function _constants() {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var Prompt =
/*#__PURE__*/
function () {
  function Prompt() {
    var _this = this;

    _classCallCheck(this, Prompt);

    _defineProperty(this, '_entering', void 0);

    _defineProperty(this, '_value', void 0);

    _defineProperty(this, '_onChange', void 0);

    _defineProperty(this, '_onSuccess', void 0);

    _defineProperty(this, '_onCancel', void 0);

    _defineProperty(this, '_offset', void 0);

    _defineProperty(this, '_promptLength', void 0);

    _defineProperty(this, '_selection', void 0);

    _defineProperty(this, '_onResize', function () {
      _this._onChange();
    }); // Copied from `enter` to satisfy TS


    this._entering = true;
    this._value = '';
    this._selection = null;
    this._offset = -1;
    this._promptLength = 0;

    this._onChange = function () {};

    this._onSuccess = function () {};

    this._onCancel = function () {};
  }

  _createClass(Prompt, [{
    key: "enter",
    value: function enter(onChange, onSuccess, onCancel) {
      var _this2 = this;

      this._entering = true;
      this._value = '';
      this._onSuccess = onSuccess;
      this._onCancel = onCancel;
      this._selection = null;
      this._offset = -1;
      this._promptLength = 0;

      this._onChange = function () {
        return onChange(_this2._value, {
          max: 10,
          offset: _this2._offset
        });
      };

      this._onChange();

      process.stdout.on('resize', this._onResize);
    }
  }, {
    key: "setPromptLength",
    value: function setPromptLength(length) {
      this._promptLength = length;
    }
  }, {
    key: "setPromptSelection",
    value: function setPromptSelection(selected) {
      this._selection = selected;
    }
  }, {
    key: "put",
    value: function put(key) {
      switch (key) {
        case _constants().KEYS.ENTER:
          this._entering = false;

          this._onSuccess(this._selection || this._value);

          this.abort();
          break;

        case _constants().KEYS.ESCAPE:
          this._entering = false;

          this._onCancel(this._value);

          this.abort();
          break;

        case _constants().KEYS.ARROW_DOWN:
          this._offset = Math.min(this._offset + 1, this._promptLength - 1);

          this._onChange();

          break;

        case _constants().KEYS.ARROW_UP:
          this._offset = Math.max(this._offset - 1, -1);

          this._onChange();

          break;

        case _constants().KEYS.ARROW_LEFT:
        case _constants().KEYS.ARROW_RIGHT:
          break;

        default:
          this._value = key === _constants().KEYS.BACKSPACE ? this._value.slice(0, -1) : this._value + key;
          this._offset = -1;
          this._selection = null;

          this._onChange();

          break;
      }
    }
  }, {
    key: "abort",
    value: function abort() {
      this._entering = false;
      this._value = '';
      process.stdout.removeListener('resize', this._onResize);
    }
  }, {
    key: "isEntering",
    value: function isEntering() {
      return this._entering;
    }
  }]);

  return Prompt;
}();

exports["default"] = Prompt;