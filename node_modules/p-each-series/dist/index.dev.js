'use strict';

var pEachSeries = function pEachSeries(iterable, iterator) {
  var index, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, value, returnValue;

  return regeneratorRuntime.async(function pEachSeries$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          index = 0;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 4;
          _iterator = iterable[Symbol.iterator]();

        case 6:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 23;
            break;
          }

          value = _step.value;
          _context.t0 = regeneratorRuntime;
          _context.t1 = iterator;
          _context.next = 12;
          return regeneratorRuntime.awrap(value);

        case 12:
          _context.t2 = _context.sent;
          _context.t3 = index++;
          _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
          _context.next = 17;
          return _context.t0.awrap.call(_context.t0, _context.t4);

        case 17:
          returnValue = _context.sent;

          if (!(returnValue === pEachSeries.stop)) {
            _context.next = 20;
            break;
          }

          return _context.abrupt("break", 23);

        case 20:
          _iteratorNormalCompletion = true;
          _context.next = 6;
          break;

        case 23:
          _context.next = 29;
          break;

        case 25:
          _context.prev = 25;
          _context.t5 = _context["catch"](4);
          _didIteratorError = true;
          _iteratorError = _context.t5;

        case 29:
          _context.prev = 29;
          _context.prev = 30;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 32:
          _context.prev = 32;

          if (!_didIteratorError) {
            _context.next = 35;
            break;
          }

          throw _iteratorError;

        case 35:
          return _context.finish(32);

        case 36:
          return _context.finish(29);

        case 37:
          return _context.abrupt("return", iterable);

        case 38:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[4, 25, 29, 37], [30,, 32, 36]]);
};

pEachSeries.stop = Symbol('pEachSeries.stop');
module.exports = pEachSeries; // TODO: Remove this for the next major release

module.exports["default"] = pEachSeries;