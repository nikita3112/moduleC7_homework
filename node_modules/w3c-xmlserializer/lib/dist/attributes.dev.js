"use strict";

var xnv = require("xml-name-validator");

var _require = require("./constants"),
    NAMESPACES = _require.NAMESPACES;

function generatePrefix(map, newNamespace, prefixIndex) {
  var generatedPrefix = "ns" + prefixIndex;
  map[newNamespace] = [generatedPrefix];
  return generatedPrefix;
}

function preferredPrefixString(map, ns, preferredPrefix) {
  var candidateList = map[ns];

  if (!candidateList) {
    return null;
  }

  if (candidateList.includes(preferredPrefix)) {
    return preferredPrefix;
  }

  return candidateList[candidateList.length - 1];
}

function serializeAttributeValue(value
/* , requireWellFormed*/
) {
  if (value === null) {
    return "";
  } // TODO: Check well-formedness


  return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
}

function serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {
  var result = "";
  var namespaceLocalnames = Object.create(null);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = element.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var attr = _step.value;

      if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {
        throw new Error("Found duplicated attribute");
      }

      if (!namespaceLocalnames[attr.namespaceURI]) {
        namespaceLocalnames[attr.namespaceURI] = new Set();
      }

      namespaceLocalnames[attr.namespaceURI].add(attr.localName);
      var attributeNamespace = attr.namespaceURI;
      var candidatePrefix = null;

      if (attributeNamespace !== null) {
        candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);

        if (attributeNamespace === NAMESPACES.XMLNS) {
          if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {
            continue;
          }

          if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {
            throw new Error("The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing");
          }

          if (requireWellFormed && attr.value === "") {
            throw new Error("Namespace prefix declarations cannot be used to undeclare a namespace");
          }

          if (attr.prefix === "xmlns") {
            candidatePrefix = "xmlns";
          }
        } else if (candidatePrefix === null) {
          candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);
          result += " xmlns:".concat(candidatePrefix, "=\"").concat(serializeAttributeValue(attributeNamespace, requireWellFormed), "\"");
        }
      }

      result += " ";

      if (candidatePrefix !== null) {
        result += candidatePrefix + ":";
      }

      if (requireWellFormed && (attr.localName.includes(":") || !xnv.name(attr.localName) || attr.localName === "xmlns" && attributeNamespace === null)) {
        throw new Error("Invalid attribute localName value");
      }

      result += "".concat(attr.localName, "=\"").concat(serializeAttributeValue(attr.value, requireWellFormed), "\"");
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

module.exports.preferredPrefixString = preferredPrefixString;
module.exports.generatePrefix = generatePrefix;
module.exports.serializeAttributeValue = serializeAttributeValue;
module.exports.serializeAttributes = serializeAttributes;