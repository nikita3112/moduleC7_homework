'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var findUp = require('find-up');

var readPkg = require('read-pkg');

module.exports = function _callee(options) {
  var filePath;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(findUp('package.json', options));

        case 2:
          filePath = _context.sent;

          if (filePath) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return");

        case 5:
          _context.next = 7;
          return regeneratorRuntime.awrap(readPkg(_objectSpread({}, options, {
            cwd: path.dirname(filePath)
          })));

        case 7:
          _context.t0 = _context.sent;
          _context.t1 = filePath;
          return _context.abrupt("return", {
            packageJson: _context.t0,
            path: _context.t1
          });

        case 10:
        case "end":
          return _context.stop();
      }
    }
  });
};

module.exports.sync = function (options) {
  var filePath = findUp.sync('package.json', options);

  if (!filePath) {
    return;
  }

  return {
    packageJson: readPkg.sync(_objectSpread({}, options, {
      cwd: path.dirname(filePath)
    })),
    path: filePath
  };
};