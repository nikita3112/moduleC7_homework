"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _wrapRegExp(re, groups) { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _RegExp = _wrapNativeSuper(RegExp); var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = _RegExp.call(this, re, flags); _groups.set(_this, groups || _groups.get(re)); return _this; } _inherits(BabelRegExp, _RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = []; args.push.apply(args, arguments); if (_typeof(args[args.length - 1]) !== "object") { args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CovLine = require('./line');

var _require$SourceMapCon = require('source-map').SourceMapConsumer,
    GREATEST_LOWER_BOUND = _require$SourceMapCon.GREATEST_LOWER_BOUND,
    LEAST_UPPER_BOUND = _require$SourceMapCon.LEAST_UPPER_BOUND;

module.exports =
/*#__PURE__*/
function () {
  function CovSource(sourceRaw, wrapperLength) {
    _classCallCheck(this, CovSource);

    sourceRaw = sourceRaw.trimEnd();
    this.lines = [];
    this.eof = sourceRaw.length;
    this.shebangLength = getShebangLength(sourceRaw);
    this.wrapperLength = wrapperLength - this.shebangLength;

    this._buildLines(sourceRaw);
  }

  _createClass(CovSource, [{
    key: "_buildLines",
    value: function _buildLines(source) {
      var position = 0;
      var ignoreCount = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = source.split(/(?<=\r?\n)/).entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              i = _step$value[0],
              lineStr = _step$value[1];

          var line = new CovLine(i + 1, position, lineStr);

          if (ignoreCount > 0) {
            line.ignore = true;
            ignoreCount--;
          } else {
            ignoreCount = this._parseIgnoreNext(lineStr, line);
          }

          this.lines.push(line);
          position += lineStr.length;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_parseIgnoreNext",
    value: function _parseIgnoreNext(lineStr, line) {
      var testIgnoreNextLines = lineStr.match(_wrapRegExp(/^[\0-\/:-@\[-\^`\{-\uFFFF]*\/\* c8 ignore next ([0-9]+)? *\*\/[\0-\/:-@\[-\^`\{-\uFFFF]*$/, {
        count: 1
      }));

      if (testIgnoreNextLines) {
        line.ignore = true;

        if (testIgnoreNextLines.groups.count) {
          return Number(testIgnoreNextLines.groups.count);
        } else {
          return 1;
        }
      } else {
        if (lineStr.match(/\/\* c8 ignore next \*\//)) {
          line.ignore = true;
        }
      }

      return 0;
    } // given a start column and end column in absolute offsets within
    // a source file (0 - EOF), returns the relative line column positions.

  }, {
    key: "offsetToOriginalRelative",
    value: function offsetToOriginalRelative(sourceMap, startCol, endCol) {
      var lines = this.lines.filter(function (line, i) {
        return startCol <= line.endCol && endCol >= line.startCol;
      });
      if (!lines.length) return {};
      var start = originalPositionTryBoth(sourceMap, lines[0].line, Math.max(0, startCol - lines[0].startCol));
      var end = originalEndPositionFor(sourceMap, lines[lines.length - 1].line, endCol - lines[lines.length - 1].startCol);

      if (!(start && end)) {
        return {};
      }

      if (!(start.source && end.source)) {
        return {};
      }

      if (start.source !== end.source) {
        return {};
      }

      if (start.line === end.line && start.column === end.column) {
        end = sourceMap.originalPositionFor({
          line: lines[lines.length - 1].line,
          column: endCol - lines[lines.length - 1].startCol,
          bias: LEAST_UPPER_BOUND
        });
        end.column -= 1;
      }

      return {
        source: start.source,
        startLine: start.line,
        relStartCol: start.column,
        endLine: end.line,
        relEndCol: end.column
      };
    }
  }, {
    key: "relativeToOffset",
    value: function relativeToOffset(line, relCol) {
      line = Math.max(line, 1);
      if (this.lines[line - 1] === undefined) return this.eof;
      return Math.min(this.lines[line - 1].startCol + relCol, this.lines[line - 1].endCol);
    }
  }]);

  return CovSource;
}(); // this implementation is pulled over from istanbul-lib-sourcemap:
// https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-source-maps/lib/get-mapping.js
//

/**
 * AST ranges are inclusive for start positions and exclusive for end positions.
 * Source maps are also logically ranges over text, though interacting with
 * them is generally achieved by working with explicit positions.
 *
 * When finding the _end_ location of an AST item, the range behavior is
 * important because what we're asking for is the _end_ of whatever range
 * corresponds to the end location we seek.
 *
 * This boils down to the following steps, conceptually, though the source-map
 * library doesn't expose primitives to do this nicely:
 *
 * 1. Find the range on the generated file that ends at, or exclusively
 *    contains the end position of the AST node.
 * 2. Find the range on the original file that corresponds to
 *    that generated range.
 * 3. Find the _end_ location of that original range.
 */


function originalEndPositionFor(sourceMap, line, column) {
  // Given the generated location, find the original location of the mapping
  // that corresponds to a range on the generated file that overlaps the
  // generated file end location. Note however that this position on its
  // own is not useful because it is the position of the _start_ of the range
  // on the original file, and we want the _end_ of the range.
  var beforeEndMapping = originalPositionTryBoth(sourceMap, line, Math.max(column - 1, 1));

  if (beforeEndMapping.source === null) {
    return null;
  } // Convert that original position back to a generated one, with a bump
  // to the right, and a rightward bias. Since 'generatedPositionFor' searches
  // for mappings in the original-order sorted list, this will find the
  // mapping that corresponds to the one immediately after the
  // beforeEndMapping mapping.


  var afterEndMapping = sourceMap.generatedPositionFor({
    source: beforeEndMapping.source,
    line: beforeEndMapping.line,
    column: beforeEndMapping.column + 1,
    bias: LEAST_UPPER_BOUND
  });

  if ( // If this is null, it means that we've hit the end of the file,
  // so we can use Infinity as the end column.
  afterEndMapping.line === null || // If these don't match, it means that the call to
  // 'generatedPositionFor' didn't find any other original mappings on
  // the line we gave, so consider the binding to extend to infinity.
  sourceMap.originalPositionFor(afterEndMapping).line !== beforeEndMapping.line) {
    return {
      source: beforeEndMapping.source,
      line: beforeEndMapping.line,
      column: Infinity
    };
  } // Convert the end mapping into the real original position.


  return sourceMap.originalPositionFor(afterEndMapping);
}

function originalPositionTryBoth(sourceMap, line, column) {
  var original = sourceMap.originalPositionFor({
    line: line,
    column: column,
    bias: GREATEST_LOWER_BOUND
  });

  if (original.line === null) {
    original = sourceMap.originalPositionFor({
      line: line,
      column: column,
      bias: LEAST_UPPER_BOUND
    });
  } // The source maps generated by https://github.com/istanbuljs/istanbuljs
  // (using @babel/core 7.7.5) have behavior, such that a mapping
  // mid-way through a line maps to an earlier line than a mapping
  // at position 0. Using the line at positon 0 seems to provide better reports:
  //
  //     if (true) {
  //        cov_y5divc6zu().b[1][0]++;
  //        cov_y5divc6zu().s[3]++;
  //        console.info('reachable');
  //     }  else { ... }
  //  ^  ^
  // l5  l3


  var min = sourceMap.originalPositionFor({
    line: line,
    column: 0,
    bias: GREATEST_LOWER_BOUND
  });

  if (min.line > original.line) {
    original = min;
  }

  return original;
} // Not required since Node 12, see: https://github.com/nodejs/node/pull/27375


var isPreNode12 = /^v1[01]\./.test(process.version);

function getShebangLength(source) {
  if (isPreNode12 && source.indexOf('#!') === 0) {
    var match = source.match(_wrapRegExp(/(#!.*)/, {
      shebang: 1
    }));

    if (match) {
      return match.groups.shebang.length;
    }
  } else {
    return 0;
  }
}