"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function CovLine(line, startCol, lineStr) {
    _classCallCheck(this, CovLine);

    this.line = line; // note that startCol and endCol are absolute positions
    // within a file, not relative to the line.

    this.startCol = startCol; // the line length itself does not include the newline characters,
    // these are however taken into account when enumerating absolute offset.

    var matchedNewLineChar = lineStr.match(/\r?\n$/);
    var newLineLength = matchedNewLineChar ? matchedNewLineChar[0].length : 0;
    this.endCol = startCol + lineStr.length - newLineLength; // we start with all lines having been executed, and work
    // backwards zeroing out lines based on V8 output.

    this.count = 1; // set by source.js during parsing, if /* c8 ignore next */ is found.

    this.ignore = false;
  }

  _createClass(CovLine, [{
    key: "toIstanbul",
    value: function toIstanbul() {
      return {
        start: {
          line: this.line,
          column: 0
        },
        end: {
          line: this.line,
          column: this.endCol - this.startCol
        }
      };
    }
  }]);

  return CovLine;
}();