'use strict';

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var anyMap = new WeakMap();
var eventsMap = new WeakMap();
var producersMap = new WeakMap();
var anyProducer = Symbol('anyProducer');
var resolvedPromise = Promise.resolve();
var listenerAdded = Symbol('listenerAdded');
var listenerRemoved = Symbol('listenerRemoved');

function assertEventName(eventName) {
  if (typeof eventName !== 'string' && _typeof(eventName) !== 'symbol') {
    throw new TypeError('eventName must be a string or a symbol');
  }
}

function assertListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('listener must be a function');
  }
}

function getListeners(instance, eventName) {
  var events = eventsMap.get(instance);

  if (!events.has(eventName)) {
    events.set(eventName, new Set());
  }

  return events.get(eventName);
}

function getEventProducers(instance, eventName) {
  var key = typeof eventName === 'string' || _typeof(eventName) === 'symbol' ? eventName : anyProducer;
  var producers = producersMap.get(instance);

  if (!producers.has(key)) {
    producers.set(key, new Set());
  }

  return producers.get(key);
}

function enqueueProducers(instance, eventName, eventData) {
  var producers = producersMap.get(instance);

  if (producers.has(eventName)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = producers.get(eventName)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var producer = _step.value;
        producer.enqueue(eventData);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if (producers.has(anyProducer)) {
    var item = Promise.all([eventName, eventData]);
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = producers.get(anyProducer)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _producer = _step2.value;

        _producer.enqueue(item);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
}

function iterator(instance, eventNames) {
  eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
  var isFinished = false;

  var flush = function flush() {};

  var queue = [];
  var producer = {
    enqueue: function enqueue(item) {
      queue.push(item);
      flush();
    },
    finish: function finish() {
      isFinished = true;
      flush();
    }
  };
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = eventNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var eventName = _step3.value;
      getEventProducers(instance, eventName).add(producer);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return _defineProperty({
    next: function next() {
      return regeneratorRuntime.async(function next$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (queue) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", {
                done: true
              });

            case 2:
              if (!(queue.length === 0)) {
                _context.next = 9;
                break;
              }

              if (!isFinished) {
                _context.next = 6;
                break;
              }

              queue = undefined;
              return _context.abrupt("return", this.next());

            case 6:
              _context.next = 8;
              return regeneratorRuntime.awrap(new Promise(function (resolve) {
                flush = resolve;
              }));

            case 8:
              return _context.abrupt("return", this.next());

            case 9:
              _context.next = 11;
              return regeneratorRuntime.awrap(queue.shift());

            case 11:
              _context.t0 = _context.sent;
              return _context.abrupt("return", {
                done: false,
                value: _context.t0
              });

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    "return": function _return(value) {
      var _iteratorNormalCompletion4,
          _didIteratorError4,
          _iteratorError4,
          _iterator4,
          _step4,
          eventName,
          _args2 = arguments;

      return regeneratorRuntime.async(function _return$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              queue = undefined;
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 4;

              for (_iterator4 = eventNames[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                eventName = _step4.value;
                getEventProducers(instance, eventName)["delete"](producer);
              }

              _context2.next = 12;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](4);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t0;

            case 12:
              _context2.prev = 12;
              _context2.prev = 13;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 15:
              _context2.prev = 15;

              if (!_didIteratorError4) {
                _context2.next = 18;
                break;
              }

              throw _iteratorError4;

            case 18:
              return _context2.finish(15);

            case 19:
              return _context2.finish(12);

            case 20:
              flush();

              if (!(_args2.length > 0)) {
                _context2.next = 28;
                break;
              }

              _context2.next = 24;
              return regeneratorRuntime.awrap(value);

            case 24:
              _context2.t2 = _context2.sent;
              _context2.t1 = {
                done: true,
                value: _context2.t2
              };
              _context2.next = 29;
              break;

            case 28:
              _context2.t1 = {
                done: true
              };

            case 29:
              return _context2.abrupt("return", _context2.t1);

            case 30:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, [[4, 8, 12, 20], [13,, 15, 19]]);
    }
  }, Symbol.asyncIterator, function () {
    return this;
  });
}

function defaultMethodNamesOrAssert(methodNames) {
  if (methodNames === undefined) {
    return allEmitteryMethods;
  }

  if (!Array.isArray(methodNames)) {
    throw new TypeError('`methodNames` must be an array of strings');
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = methodNames[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var methodName = _step5.value;

      if (!allEmitteryMethods.includes(methodName)) {
        if (typeof methodName !== 'string') {
          throw new TypeError('`methodNames` element must be a string');
        }

        throw new Error("".concat(methodName, " is not Emittery method"));
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return methodNames;
}

var isListenerSymbol = function isListenerSymbol(symbol) {
  return symbol === listenerAdded || symbol === listenerRemoved;
};

var Emittery =
/*#__PURE__*/
function () {
  _createClass(Emittery, null, [{
    key: "mixin",
    value: function mixin(emitteryPropertyName, methodNames) {
      methodNames = defaultMethodNamesOrAssert(methodNames);
      return function (target) {
        if (typeof target !== 'function') {
          throw new TypeError('`target` must be function');
        }

        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = methodNames[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var methodName = _step6.value;

            if (target.prototype[methodName] !== undefined) {
              throw new Error("The property `".concat(methodName, "` already exists on `target`"));
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        function getEmitteryProperty() {
          Object.defineProperty(this, emitteryPropertyName, {
            enumerable: false,
            value: new Emittery()
          });
          return this[emitteryPropertyName];
        }

        Object.defineProperty(target.prototype, emitteryPropertyName, {
          enumerable: false,
          get: getEmitteryProperty
        });

        var emitteryMethodCaller = function emitteryMethodCaller(methodName) {
          return function () {
            var _this$emitteryPropert;

            return (_this$emitteryPropert = this[emitteryPropertyName])[methodName].apply(_this$emitteryPropert, arguments);
          };
        };

        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = methodNames[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _methodName = _step7.value;
            Object.defineProperty(target.prototype, _methodName, {
              enumerable: false,
              value: emitteryMethodCaller(_methodName)
            });
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
              _iterator7["return"]();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }

        return target;
      };
    }
  }]);

  function Emittery() {
    _classCallCheck(this, Emittery);

    anyMap.set(this, new Set());
    eventsMap.set(this, new Map());
    producersMap.set(this, new Map());
  }

  _createClass(Emittery, [{
    key: "on",
    value: function on(eventNames, listener) {
      assertListener(listener);
      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = eventNames[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var eventName = _step8.value;
          assertEventName(eventName);
          getListeners(this, eventName).add(listener);

          if (!isListenerSymbol(eventName)) {
            this.emit(listenerAdded, {
              eventName: eventName,
              listener: listener
            });
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      return this.off.bind(this, eventNames, listener);
    }
  }, {
    key: "off",
    value: function off(eventNames, listener) {
      assertListener(listener);
      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = eventNames[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var eventName = _step9.value;
          assertEventName(eventName);
          getListeners(this, eventName)["delete"](listener);

          if (!isListenerSymbol(eventName)) {
            this.emit(listenerRemoved, {
              eventName: eventName,
              listener: listener
            });
          }
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
            _iterator9["return"]();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }
    }
  }, {
    key: "once",
    value: function once(eventNames) {
      var _this = this;

      return new Promise(function (resolve) {
        var off = _this.on(eventNames, function (data) {
          off();
          resolve(data);
        });
      });
    }
  }, {
    key: "events",
    value: function events(eventNames) {
      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = eventNames[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var eventName = _step10.value;
          assertEventName(eventName);
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
            _iterator10["return"]();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }

      return iterator(this, eventNames);
    }
  }, {
    key: "emit",
    value: function emit(eventName, eventData) {
      var listeners, anyListeners, staticListeners, staticAnyListeners;
      return regeneratorRuntime.async(function emit$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              assertEventName(eventName);
              enqueueProducers(this, eventName, eventData);
              listeners = getListeners(this, eventName);
              anyListeners = anyMap.get(this);
              staticListeners = _toConsumableArray(listeners);
              staticAnyListeners = isListenerSymbol(eventName) ? [] : _toConsumableArray(anyListeners);
              _context5.next = 8;
              return regeneratorRuntime.awrap(resolvedPromise);

            case 8:
              _context5.next = 10;
              return regeneratorRuntime.awrap(Promise.all([].concat(_toConsumableArray(staticListeners.map(function _callee(listener) {
                return regeneratorRuntime.async(function _callee$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!listeners.has(listener)) {
                          _context3.next = 2;
                          break;
                        }

                        return _context3.abrupt("return", listener(eventData));

                      case 2:
                      case "end":
                        return _context3.stop();
                    }
                  }
                });
              })), _toConsumableArray(staticAnyListeners.map(function _callee2(listener) {
                return regeneratorRuntime.async(function _callee2$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!anyListeners.has(listener)) {
                          _context4.next = 2;
                          break;
                        }

                        return _context4.abrupt("return", listener(eventName, eventData));

                      case 2:
                      case "end":
                        return _context4.stop();
                    }
                  }
                });
              })))));

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "emitSerial",
    value: function emitSerial(eventName, eventData) {
      var listeners, anyListeners, staticListeners, staticAnyListeners, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, listener, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, _listener;

      return regeneratorRuntime.async(function emitSerial$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              assertEventName(eventName);
              listeners = getListeners(this, eventName);
              anyListeners = anyMap.get(this);
              staticListeners = _toConsumableArray(listeners);
              staticAnyListeners = _toConsumableArray(anyListeners);
              _context6.next = 7;
              return regeneratorRuntime.awrap(resolvedPromise);

            case 7:
              /* eslint-disable no-await-in-loop */
              _iteratorNormalCompletion11 = true;
              _didIteratorError11 = false;
              _iteratorError11 = undefined;
              _context6.prev = 10;
              _iterator11 = staticListeners[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {
                _context6.next = 20;
                break;
              }

              listener = _step11.value;

              if (!listeners.has(listener)) {
                _context6.next = 17;
                break;
              }

              _context6.next = 17;
              return regeneratorRuntime.awrap(listener(eventData));

            case 17:
              _iteratorNormalCompletion11 = true;
              _context6.next = 12;
              break;

            case 20:
              _context6.next = 26;
              break;

            case 22:
              _context6.prev = 22;
              _context6.t0 = _context6["catch"](10);
              _didIteratorError11 = true;
              _iteratorError11 = _context6.t0;

            case 26:
              _context6.prev = 26;
              _context6.prev = 27;

              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }

            case 29:
              _context6.prev = 29;

              if (!_didIteratorError11) {
                _context6.next = 32;
                break;
              }

              throw _iteratorError11;

            case 32:
              return _context6.finish(29);

            case 33:
              return _context6.finish(26);

            case 34:
              _iteratorNormalCompletion12 = true;
              _didIteratorError12 = false;
              _iteratorError12 = undefined;
              _context6.prev = 37;
              _iterator12 = staticAnyListeners[Symbol.iterator]();

            case 39:
              if (_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done) {
                _context6.next = 47;
                break;
              }

              _listener = _step12.value;

              if (!anyListeners.has(_listener)) {
                _context6.next = 44;
                break;
              }

              _context6.next = 44;
              return regeneratorRuntime.awrap(_listener(eventName, eventData));

            case 44:
              _iteratorNormalCompletion12 = true;
              _context6.next = 39;
              break;

            case 47:
              _context6.next = 53;
              break;

            case 49:
              _context6.prev = 49;
              _context6.t1 = _context6["catch"](37);
              _didIteratorError12 = true;
              _iteratorError12 = _context6.t1;

            case 53:
              _context6.prev = 53;
              _context6.prev = 54;

              if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                _iterator12["return"]();
              }

            case 56:
              _context6.prev = 56;

              if (!_didIteratorError12) {
                _context6.next = 59;
                break;
              }

              throw _iteratorError12;

            case 59:
              return _context6.finish(56);

            case 60:
              return _context6.finish(53);

            case 61:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this, [[10, 22, 26, 34], [27,, 29, 33], [37, 49, 53, 61], [54,, 56, 60]]);
    }
  }, {
    key: "onAny",
    value: function onAny(listener) {
      assertListener(listener);
      anyMap.get(this).add(listener);
      this.emit(listenerAdded, {
        listener: listener
      });
      return this.offAny.bind(this, listener);
    }
  }, {
    key: "anyEvent",
    value: function anyEvent() {
      return iterator(this);
    }
  }, {
    key: "offAny",
    value: function offAny(listener) {
      assertListener(listener);
      this.emit(listenerRemoved, {
        listener: listener
      });
      anyMap.get(this)["delete"](listener);
    }
  }, {
    key: "clearListeners",
    value: function clearListeners(eventNames) {
      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
      var _iteratorNormalCompletion13 = true;
      var _didIteratorError13 = false;
      var _iteratorError13 = undefined;

      try {
        for (var _iterator13 = eventNames[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
          var eventName = _step13.value;

          if (typeof eventName === 'string' || _typeof(eventName) === 'symbol') {
            getListeners(this, eventName).clear();
            var producers = getEventProducers(this, eventName);
            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
              for (var _iterator14 = producers[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                var producer = _step14.value;
                producer.finish();
              }
            } catch (err) {
              _didIteratorError14 = true;
              _iteratorError14 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                  _iterator14["return"]();
                }
              } finally {
                if (_didIteratorError14) {
                  throw _iteratorError14;
                }
              }
            }

            producers.clear();
          } else {
            anyMap.get(this).clear();
            var _iteratorNormalCompletion15 = true;
            var _didIteratorError15 = false;
            var _iteratorError15 = undefined;

            try {
              for (var _iterator15 = eventsMap.get(this).values()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                var listeners = _step15.value;
                listeners.clear();
              }
            } catch (err) {
              _didIteratorError15 = true;
              _iteratorError15 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                  _iterator15["return"]();
                }
              } finally {
                if (_didIteratorError15) {
                  throw _iteratorError15;
                }
              }
            }

            var _iteratorNormalCompletion16 = true;
            var _didIteratorError16 = false;
            var _iteratorError16 = undefined;

            try {
              for (var _iterator16 = producersMap.get(this).values()[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                var _producers = _step16.value;
                var _iteratorNormalCompletion17 = true;
                var _didIteratorError17 = false;
                var _iteratorError17 = undefined;

                try {
                  for (var _iterator17 = _producers[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                    var _producer2 = _step17.value;

                    _producer2.finish();
                  }
                } catch (err) {
                  _didIteratorError17 = true;
                  _iteratorError17 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                      _iterator17["return"]();
                    }
                  } finally {
                    if (_didIteratorError17) {
                      throw _iteratorError17;
                    }
                  }
                }

                _producers.clear();
              }
            } catch (err) {
              _didIteratorError16 = true;
              _iteratorError16 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                  _iterator16["return"]();
                }
              } finally {
                if (_didIteratorError16) {
                  throw _iteratorError16;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError13 = true;
        _iteratorError13 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
            _iterator13["return"]();
          }
        } finally {
          if (_didIteratorError13) {
            throw _iteratorError13;
          }
        }
      }
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventNames) {
      eventNames = Array.isArray(eventNames) ? eventNames : [eventNames];
      var count = 0;
      var _iteratorNormalCompletion18 = true;
      var _didIteratorError18 = false;
      var _iteratorError18 = undefined;

      try {
        for (var _iterator18 = eventNames[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
          var eventName = _step18.value;

          if (typeof eventName === 'string') {
            count += anyMap.get(this).size + getListeners(this, eventName).size + getEventProducers(this, eventName).size + getEventProducers(this).size;
            continue;
          }

          if (typeof eventName !== 'undefined') {
            assertEventName(eventName);
          }

          count += anyMap.get(this).size;
          var _iteratorNormalCompletion19 = true;
          var _didIteratorError19 = false;
          var _iteratorError19 = undefined;

          try {
            for (var _iterator19 = eventsMap.get(this).values()[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
              var value = _step19.value;
              count += value.size;
            }
          } catch (err) {
            _didIteratorError19 = true;
            _iteratorError19 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
                _iterator19["return"]();
              }
            } finally {
              if (_didIteratorError19) {
                throw _iteratorError19;
              }
            }
          }

          var _iteratorNormalCompletion20 = true;
          var _didIteratorError20 = false;
          var _iteratorError20 = undefined;

          try {
            for (var _iterator20 = producersMap.get(this).values()[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
              var _value = _step20.value;
              count += _value.size;
            }
          } catch (err) {
            _didIteratorError20 = true;
            _iteratorError20 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
                _iterator20["return"]();
              }
            } finally {
              if (_didIteratorError20) {
                throw _iteratorError20;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
            _iterator18["return"]();
          }
        } finally {
          if (_didIteratorError18) {
            throw _iteratorError18;
          }
        }
      }

      return count;
    }
  }, {
    key: "bindMethods",
    value: function bindMethods(target, methodNames) {
      if (_typeof(target) !== 'object' || target === null) {
        throw new TypeError('`target` must be an object');
      }

      methodNames = defaultMethodNamesOrAssert(methodNames);
      var _iteratorNormalCompletion21 = true;
      var _didIteratorError21 = false;
      var _iteratorError21 = undefined;

      try {
        for (var _iterator21 = methodNames[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
          var methodName = _step21.value;

          if (target[methodName] !== undefined) {
            throw new Error("The property `".concat(methodName, "` already exists on `target`"));
          }

          Object.defineProperty(target, methodName, {
            enumerable: false,
            value: this[methodName].bind(this)
          });
        }
      } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
            _iterator21["return"]();
          }
        } finally {
          if (_didIteratorError21) {
            throw _iteratorError21;
          }
        }
      }
    }
  }]);

  return Emittery;
}();

var allEmitteryMethods = Object.getOwnPropertyNames(Emittery.prototype).filter(function (v) {
  return v !== 'constructor';
}); // Subclass used to encourage TS users to type their events.

Emittery.Typed =
/*#__PURE__*/
function (_Emittery) {
  _inherits(_class, _Emittery);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));
  }

  return _class;
}(Emittery);

Object.defineProperty(Emittery.Typed, 'Typed', {
  enumerable: false,
  value: undefined
});
Object.defineProperty(Emittery, 'listenerAdded', {
  value: listenerAdded,
  writable: false,
  enumerable: true,
  configurable: false
});
Object.defineProperty(Emittery, 'listenerRemoved', {
  value: listenerRemoved,
  writable: false,
  enumerable: true,
  configurable: false
});
module.exports = Emittery;