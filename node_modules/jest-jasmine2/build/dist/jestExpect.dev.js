'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

var _expect = _interopRequireDefault(require('expect'));

var _jestSnapshot = require('jest-snapshot');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable local/prefer-spread-eventually */


var _default = function _default(config) {
  global.expect = _expect["default"];

  _expect["default"].setState({
    expand: config.expand
  });

  _expect["default"].extend({
    toMatchInlineSnapshot: _jestSnapshot.toMatchInlineSnapshot,
    toMatchSnapshot: _jestSnapshot.toMatchSnapshot,
    toThrowErrorMatchingInlineSnapshot: _jestSnapshot.toThrowErrorMatchingInlineSnapshot,
    toThrowErrorMatchingSnapshot: _jestSnapshot.toThrowErrorMatchingSnapshot
  });

  _expect["default"].addSnapshotSerializer = _jestSnapshot.addSerializer;
  var jasmine = global.jasmine;
  jasmine.anything = _expect["default"].anything;
  jasmine.any = _expect["default"].any;
  jasmine.objectContaining = _expect["default"].objectContaining;
  jasmine.arrayContaining = _expect["default"].arrayContaining;
  jasmine.stringMatching = _expect["default"].stringMatching;

  jasmine.addMatchers = function (jasmineMatchersObject) {
    var jestMatchersObject = Object.create(null);
    Object.keys(jasmineMatchersObject).forEach(function (name) {
      jestMatchersObject[name] = function () {
        // use "expect.extend" if you need to use equality testers (via this.equal)
        var result = jasmineMatchersObject[name](null, null); // if there is no 'negativeCompare', both should be handled by `compare`

        var negativeCompare = result.negativeCompare || result.compare;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return this.isNot ? negativeCompare.apply(null, // @ts-expect-error
        args) : result.compare.apply(null, // @ts-expect-error
        args);
      };
    });
    var expect = global.expect;
    expect.extend(jestMatchersObject);
  };
};

exports["default"] = _default;