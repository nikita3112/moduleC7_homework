'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

var _jestUtil = require('jest-util');

var _ExpectationFailed = _interopRequireDefault(require('../ExpectationFailed'));

var _expectationResultFactory = _interopRequireDefault(require('../expectationResultFactory'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var Suite =
/*#__PURE__*/
function () {
  function Suite(attrs) {
    _classCallCheck(this, Suite);

    _defineProperty(this, 'id', void 0);

    _defineProperty(this, 'parentSuite', void 0);

    _defineProperty(this, 'description', void 0);

    _defineProperty(this, 'throwOnExpectationFailure', void 0);

    _defineProperty(this, 'beforeFns', void 0);

    _defineProperty(this, 'afterFns', void 0);

    _defineProperty(this, 'beforeAllFns', void 0);

    _defineProperty(this, 'afterAllFns', void 0);

    _defineProperty(this, 'disabled', void 0);

    _defineProperty(this, 'children', void 0);

    _defineProperty(this, 'result', void 0);

    _defineProperty(this, 'sharedContext', void 0);

    _defineProperty(this, 'markedPending', void 0);

    _defineProperty(this, 'markedTodo', void 0);

    _defineProperty(this, 'isFocused', void 0);

    this.markedPending = false;
    this.markedTodo = false;
    this.isFocused = false;
    this.id = attrs.id;
    this.parentSuite = attrs.parentSuite;
    this.description = (0, _jestUtil.convertDescriptorToString)(attrs.description);
    this.throwOnExpectationFailure = !!attrs.throwOnExpectationFailure;
    this.beforeFns = [];
    this.afterFns = [];
    this.beforeAllFns = [];
    this.afterAllFns = [];
    this.disabled = false;
    this.children = [];
    this.result = {
      id: this.id,
      description: this.description,
      fullName: this.getFullName(),
      failedExpectations: [],
      testPath: attrs.getTestPath()
    };
  }

  _createClass(Suite, [{
    key: "getFullName",
    value: function getFullName() {
      var fullName = [];

      for (var parentSuite = this; parentSuite; parentSuite = parentSuite.parentSuite) {
        if (parentSuite.parentSuite) {
          fullName.unshift(parentSuite.description);
        }
      }

      return fullName.join(' ');
    }
  }, {
    key: "disable",
    value: function disable() {
      this.disabled = true;
    }
  }, {
    key: "pend",
    value: function pend(_message) {
      this.markedPending = true;
    }
  }, {
    key: "beforeEach",
    value: function beforeEach(fn) {
      this.beforeFns.unshift(fn);
    }
  }, {
    key: "beforeAll",
    value: function beforeAll(fn) {
      this.beforeAllFns.push(fn);
    }
  }, {
    key: "afterEach",
    value: function afterEach(fn) {
      this.afterFns.unshift(fn);
    }
  }, {
    key: "afterAll",
    value: function afterAll(fn) {
      this.afterAllFns.unshift(fn);
    }
  }, {
    key: "addChild",
    value: function addChild(child) {
      this.children.push(child);
    }
  }, {
    key: "status",
    value: function status() {
      if (this.disabled) {
        return 'disabled';
      }

      if (this.markedPending) {
        return 'pending';
      }

      if (this.result.failedExpectations.length > 0) {
        return 'failed';
      } else {
        return 'finished';
      }
    }
  }, {
    key: "isExecutable",
    value: function isExecutable() {
      return !this.disabled;
    }
  }, {
    key: "canBeReentered",
    value: function canBeReentered() {
      return this.beforeAllFns.length === 0 && this.afterAllFns.length === 0;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      this.result.status = this.status();
      return this.result;
    }
  }, {
    key: "sharedUserContext",
    value: function sharedUserContext() {
      if (!this.sharedContext) {
        this.sharedContext = {};
      }

      return this.sharedContext;
    }
  }, {
    key: "clonedSharedUserContext",
    value: function clonedSharedUserContext() {
      return this.sharedUserContext();
    }
  }, {
    key: "onException",
    value: function onException() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (args[0] instanceof _ExpectationFailed["default"]) {
        return;
      }

      if (isAfterAll(this.children)) {
        var data = {
          matcherName: '',
          passed: false,
          expected: '',
          actual: '',
          error: arguments[0]
        };
        this.result.failedExpectations.push((0, _expectationResultFactory["default"])(data));
      } else {
        for (var i = 0; i < this.children.length; i++) {
          var child = this.children[i];
          child.onException.apply(child, args);
        }
      }
    }
  }, {
    key: "addExpectationResult",
    value: function addExpectationResult() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      if (isAfterAll(this.children) && isFailure(args)) {
        var data = args[1];
        this.result.failedExpectations.push((0, _expectationResultFactory["default"])(data));

        if (this.throwOnExpectationFailure) {
          throw new _ExpectationFailed["default"]();
        }
      } else {
        for (var i = 0; i < this.children.length; i++) {
          var child = this.children[i];

          try {
            child.addExpectationResult.apply(child, args);
          } catch (_unused) {// keep going
          }
        }
      }
    }
  }, {
    key: "execute",
    value: function execute() {}
  }]);

  return Suite;
}();

exports["default"] = Suite;

function isAfterAll(children) {
  return children && children[0] && children[0].result.status;
}

function isFailure(args) {
  return !args[0];
}