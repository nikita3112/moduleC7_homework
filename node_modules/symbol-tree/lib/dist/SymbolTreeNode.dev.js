'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function SymbolTreeNode() {
    _classCallCheck(this, SymbolTreeNode);

    this.parent = null;
    this.previousSibling = null;
    this.nextSibling = null;
    this.firstChild = null;
    this.lastChild = null;
    /** This value is incremented anytime a children is added or removed */

    this.childrenVersion = 0;
    /** The last child object which has a cached index */

    this.childIndexCachedUpTo = null;
    /** This value represents the cached node index, as long as
     * cachedIndexVersion matches with the childrenVersion of the parent */

    this.cachedIndex = -1;
    this.cachedIndexVersion = NaN; // NaN is never equal to anything
  }

  _createClass(SymbolTreeNode, [{
    key: "childrenChanged",
    value: function childrenChanged() {
      /* jshint -W016 */
      // integer wrap around
      this.childrenVersion = this.childrenVersion + 1 & 0xFFFFFFFF;
      this.childIndexCachedUpTo = null;
    }
  }, {
    key: "getCachedIndex",
    value: function getCachedIndex(parentNode) {
      // (assumes parentNode is actually the parent)
      if (this.cachedIndexVersion !== parentNode.childrenVersion) {
        this.cachedIndexVersion = NaN; // cachedIndex is no longer valid

        return -1;
      }

      return this.cachedIndex; // -1 if not cached
    }
  }, {
    key: "setCachedIndex",
    value: function setCachedIndex(parentNode, index) {
      // (assumes parentNode is actually the parent)
      this.cachedIndexVersion = parentNode.childrenVersion;
      this.cachedIndex = index;
    }
  }, {
    key: "isAttached",
    get: function get() {
      return Boolean(this.parent || this.previousSibling || this.nextSibling);
    }
  }, {
    key: "hasChildren",
    get: function get() {
      return Boolean(this.firstChild);
    }
  }]);

  return SymbolTreeNode;
}();