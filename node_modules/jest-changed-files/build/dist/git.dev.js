'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _execa() {
  var data = _interopRequireDefault(require('execa'));

  _execa = function _execa() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var findChangedFilesUsingCommand = function findChangedFilesUsingCommand(args, cwd) {
  var result;
  return regeneratorRuntime.async(function findChangedFilesUsingCommand$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return regeneratorRuntime.awrap((0, _execa()["default"])('git', args, {
            cwd: cwd
          }));

        case 3:
          result = _context.sent;
          _context.next = 10;
          break;

        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](0);
          // TODO: Should we keep the original `message`?
          _context.t0.message = _context.t0.stderr;
          throw _context.t0;

        case 10:
          return _context.abrupt("return", result.stdout.split('\n').filter(function (s) {
            return s !== '';
          }).map(function (changedPath) {
            return path().resolve(cwd, changedPath);
          }));

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 6]]);
};

var adapter = {
  findChangedFiles: function findChangedFiles(cwd, options) {
    var changedSince, includePaths, _ref, _ref2, committed, _staged, _unstaged, _ref3, _ref4, staged, unstaged;

    return regeneratorRuntime.async(function findChangedFiles$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            changedSince = options && (options.withAncestor ? 'HEAD^' : options.changedSince);
            includePaths = (options && options.includePaths || []).map(function (absoluteRoot) {
              return path().normalize(path().relative(cwd, absoluteRoot));
            });

            if (!(options && options.lastCommit)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", findChangedFilesUsingCommand(['show', '--name-only', '--pretty=format:', 'HEAD'].concat(includePaths), cwd));

          case 4:
            if (!changedSince) {
              _context2.next = 13;
              break;
            }

            _context2.next = 7;
            return regeneratorRuntime.awrap(Promise.all([findChangedFilesUsingCommand(['diff', '--name-only', "".concat(changedSince, "...HEAD")].concat(includePaths), cwd), findChangedFilesUsingCommand(['diff', '--cached', '--name-only'].concat(includePaths), cwd), findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd)]));

          case 7:
            _ref = _context2.sent;
            _ref2 = _slicedToArray(_ref, 3);
            committed = _ref2[0];
            _staged = _ref2[1];
            _unstaged = _ref2[2];
            return _context2.abrupt("return", [].concat(_toConsumableArray(committed), _toConsumableArray(_staged), _toConsumableArray(_unstaged)));

          case 13:
            _context2.next = 15;
            return regeneratorRuntime.awrap(Promise.all([findChangedFilesUsingCommand(['diff', '--cached', '--name-only'].concat(includePaths), cwd), findChangedFilesUsingCommand(['ls-files', '--other', '--modified', '--exclude-standard'].concat(includePaths), cwd)]));

          case 15:
            _ref3 = _context2.sent;
            _ref4 = _slicedToArray(_ref3, 2);
            staged = _ref4[0];
            unstaged = _ref4[1];
            return _context2.abrupt("return", [].concat(_toConsumableArray(staged), _toConsumableArray(unstaged)));

          case 20:
          case "end":
            return _context2.stop();
        }
      }
    });
  },
  getRoot: function getRoot(cwd) {
    var options, result;
    return regeneratorRuntime.async(function getRoot$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = ['rev-parse', '--show-cdup'];
            _context3.prev = 1;
            _context3.next = 4;
            return regeneratorRuntime.awrap((0, _execa()["default"])('git', options, {
              cwd: cwd
            }));

          case 4:
            result = _context3.sent;
            return _context3.abrupt("return", path().resolve(cwd, result.stdout));

          case 8:
            _context3.prev = 8;
            _context3.t0 = _context3["catch"](1);
            return _context3.abrupt("return", null);

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[1, 8]]);
  }
};
var _default = adapter;
exports["default"] = _default;