'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.findRepos = exports.getChangedFilesForRoots = void 0;

function _throat() {
  var data = _interopRequireDefault(require('throat'));

  _throat = function _throat() {
    return data;
  };

  return data;
}

var _git = _interopRequireDefault(require('./git'));

var _hg = _interopRequireDefault(require('./hg'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


function notEmpty(value) {
  return value != null;
} // This is an arbitrary number. The main goal is to prevent projects with
// many roots (50+) from spawning too many processes at once.


var mutex = (0, _throat()["default"])(5);

var findGitRoot = function findGitRoot(dir) {
  return mutex(function () {
    return _git["default"].getRoot(dir);
  });
};

var findHgRoot = function findHgRoot(dir) {
  return mutex(function () {
    return _hg["default"].getRoot(dir);
  });
};

var getChangedFilesForRoots = function getChangedFilesForRoots(roots, options) {
  var repos, changedFilesOptions, gitPromises, hgPromises, changedFiles;
  return regeneratorRuntime.async(function getChangedFilesForRoots$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(findRepos(roots));

        case 2:
          repos = _context.sent;
          changedFilesOptions = _objectSpread({
            includePaths: roots
          }, options);
          gitPromises = Array.from(repos.git).map(function (repo) {
            return _git["default"].findChangedFiles(repo, changedFilesOptions);
          });
          hgPromises = Array.from(repos.hg).map(function (repo) {
            return _hg["default"].findChangedFiles(repo, changedFilesOptions);
          });
          _context.next = 8;
          return regeneratorRuntime.awrap(Promise.all(gitPromises.concat(hgPromises)));

        case 8:
          _context.t0 = function (allFiles, changedFilesInTheRepo) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = changedFilesInTheRepo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var file = _step.value;
                allFiles.add(file);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return allFiles;
          };

          _context.t1 = new Set();
          changedFiles = _context.sent.reduce(_context.t0, _context.t1);
          return _context.abrupt("return", {
            changedFiles: changedFiles,
            repos: repos
          });

        case 12:
        case "end":
          return _context.stop();
      }
    }
  });
};

exports.getChangedFilesForRoots = getChangedFilesForRoots;

var findRepos = function findRepos(roots) {
  var gitRepos, hgRepos;
  return regeneratorRuntime.async(function findRepos$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(Promise.all(roots.reduce(function (promises, root) {
            return promises.concat(findGitRoot(root));
          }, [])));

        case 2:
          gitRepos = _context2.sent;
          _context2.next = 5;
          return regeneratorRuntime.awrap(Promise.all(roots.reduce(function (promises, root) {
            return promises.concat(findHgRoot(root));
          }, [])));

        case 5:
          hgRepos = _context2.sent;
          return _context2.abrupt("return", {
            git: new Set(gitRepos.filter(notEmpty)),
            hg: new Set(hgRepos.filter(notEmpty))
          });

        case 7:
        case "end":
          return _context2.stop();
      }
    }
  });
};

exports.findRepos = findRepos;