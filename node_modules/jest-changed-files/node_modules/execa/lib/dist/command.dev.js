'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var SPACES_REGEXP = / +/g;

var joinCommand = function joinCommand(file) {
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!Array.isArray(args)) {
    return file;
  }

  return [file].concat(_toConsumableArray(args)).join(' ');
}; // Handle `execa.command()`


var parseCommand = function parseCommand(command) {
  var tokens = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = command.trim().split(SPACES_REGEXP)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var token = _step.value;
      // Allow spaces to be escaped by a backslash if not meant as a delimiter
      var previousToken = tokens[tokens.length - 1];

      if (previousToken && previousToken.endsWith('\\')) {
        // Merge previous token with current one
        tokens[tokens.length - 1] = "".concat(previousToken.slice(0, -1), " ").concat(token);
      } else {
        tokens.push(token);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return tokens;
};

module.exports = {
  joinCommand: joinCommand,
  parseCommand: parseCommand
};