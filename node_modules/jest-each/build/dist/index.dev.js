'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'bind', {
  enumerable: true,
  get: function get() {
    return _bind["default"];
  }
});
exports["default"] = void 0;

var _bind = _interopRequireDefault(require('./bind'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var install = function install(g, table) {
  for (var _len = arguments.length, data = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    data[_key - 2] = arguments[_key];
  }

  var bindingWithArray = data.length === 0;
  var bindingWithTemplate = Array.isArray(table) && !!table.raw;

  if (!bindingWithArray && !bindingWithTemplate) {
    throw new Error('`.each` must only be called with an Array or Tagged Template Literal.');
  }

  var test = function test(title, _test, timeout) {
    return (0, _bind["default"])(g.test).apply(void 0, [table].concat(data))(title, _test, timeout);
  };

  test.skip = (0, _bind["default"])(g.test.skip).apply(void 0, [table].concat(data));
  test.only = (0, _bind["default"])(g.test.only).apply(void 0, [table].concat(data));

  var testConcurrent = function testConcurrent(title, test, timeout) {
    return (0, _bind["default"])(g.test.concurrent).apply(void 0, [table].concat(data))(title, test, timeout);
  };

  test.concurrent = testConcurrent;
  testConcurrent.only = (0, _bind["default"])(g.test.concurrent.only).apply(void 0, [table].concat(data));
  testConcurrent.skip = (0, _bind["default"])(g.test.concurrent.skip).apply(void 0, [table].concat(data));

  var it = function it(title, test, timeout) {
    return (0, _bind["default"])(g.it).apply(void 0, [table].concat(data))(title, test, timeout);
  };

  it.skip = (0, _bind["default"])(g.it.skip).apply(void 0, [table].concat(data));
  it.only = (0, _bind["default"])(g.it.only).apply(void 0, [table].concat(data));
  it.concurrent = testConcurrent;
  var xit = (0, _bind["default"])(g.xit).apply(void 0, [table].concat(data));
  var fit = (0, _bind["default"])(g.fit).apply(void 0, [table].concat(data));
  var xtest = (0, _bind["default"])(g.xtest).apply(void 0, [table].concat(data));

  var describe = function describe(title, suite, timeout) {
    return (0, _bind["default"])(g.describe, false).apply(void 0, [table].concat(data))(title, suite, timeout);
  };

  describe.skip = (0, _bind["default"])(g.describe.skip, false).apply(void 0, [table].concat(data));
  describe.only = (0, _bind["default"])(g.describe.only, false).apply(void 0, [table].concat(data));
  var fdescribe = (0, _bind["default"])(g.fdescribe, false).apply(void 0, [table].concat(data));
  var xdescribe = (0, _bind["default"])(g.xdescribe, false).apply(void 0, [table].concat(data));
  return {
    describe: describe,
    fdescribe: fdescribe,
    fit: fit,
    it: it,
    test: test,
    xdescribe: xdescribe,
    xit: xit,
    xtest: xtest
  };
};

var each = function each(table) {
  for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    data[_key2 - 1] = arguments[_key2];
  }

  return install.apply(void 0, [global, table].concat(data));
};

each.withGlobal = function (g) {
  return function (table) {
    for (var _len3 = arguments.length, data = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      data[_key3 - 1] = arguments[_key3];
    }

    return install.apply(void 0, [g, table].concat(data));
  };
};

var _default = each;
exports["default"] = _default;