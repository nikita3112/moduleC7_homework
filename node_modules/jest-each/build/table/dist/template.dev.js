'use strict';

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getPath = getPath;
exports["default"] = void 0;

function _jestGetType() {
  var data = require('jest-get-type');

  _jestGetType = function _jestGetType() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var _default = function _default(title, headings, row) {
  var table = convertRowToTable(row, headings);
  var templates = convertTableToTemplates(table, headings);
  return templates.map(function (template) {
    return {
      arguments: [template],
      title: interpolate(title, template)
    };
  });
};

exports["default"] = _default;

var convertRowToTable = function convertRowToTable(row, headings) {
  return Array.from({
    length: row.length / headings.length
  }).map(function (_, index) {
    return row.slice(index * headings.length, index * headings.length + headings.length);
  });
};

var convertTableToTemplates = function convertTableToTemplates(table, headings) {
  return table.map(function (row) {
    return row.reduce(function (acc, value, index) {
      return Object.assign(acc, _defineProperty({}, headings[index], value));
    }, {});
  });
};

var interpolate = function interpolate(title, template) {
  return Object.keys(template).reduce(getMatchingKeyPaths(title), []) // aka flatMap
  .reduce(replaceKeyPathWithValue(template), title);
};

var getMatchingKeyPaths = function getMatchingKeyPaths(title) {
  return function (matches, key) {
    return matches.concat(title.match(new RegExp("\\$".concat(key, "[\\.\\w]*"), 'g')) || []);
  };
};

var replaceKeyPathWithValue = function replaceKeyPathWithValue(template) {
  return function (title, match) {
    var keyPath = match.replace('$', '').split('.');
    var value = getPath(template, keyPath);

    if ((0, _jestGetType().isPrimitive)(value)) {
      return title.replace(match, String(value));
    }

    return title.replace(match, (0, _prettyFormat()["default"])(value, {
      maxDepth: 1,
      min: true
    }));
  };
};
/* eslint import/export: 0*/


function getPath(template, _ref) {
  var _ref2 = _toArray(_ref),
      head = _ref2[0],
      tail = _ref2.slice(1);

  if (!head || !template.hasOwnProperty || !template.hasOwnProperty(head)) return template;
  return getPath(template[head], tail);
}