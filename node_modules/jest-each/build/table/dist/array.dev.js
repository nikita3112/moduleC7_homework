'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function util() {
  var data = _interopRequireWildcard(require('util'));

  util = function util() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var SUPPORTED_PLACEHOLDERS = /%[sdifjoOp%]/g;
var PRETTY_PLACEHOLDER = '%p';
var INDEX_PLACEHOLDER = '%#';
var PLACEHOLDER_PREFIX = '%';
var JEST_EACH_PLACEHOLDER_ESCAPE = '@@__JEST_EACH_PLACEHOLDER_ESCAPE__@@';

var _default = function _default(title, arrayTable) {
  return normaliseTable(arrayTable).map(function (row, index) {
    return {
      arguments: row,
      title: formatTitle(title, row, index)
    };
  });
};

exports["default"] = _default;

var normaliseTable = function normaliseTable(table) {
  return isTable(table) ? table : table.map(colToRow);
};

var isTable = function isTable(table) {
  return table.every(Array.isArray);
};

var colToRow = function colToRow(col) {
  return [col];
};

var formatTitle = function formatTitle(title, row, rowIndex) {
  return row.reduce(function (formattedTitle, value) {
    var _getMatchingPlacehold = getMatchingPlaceholders(formattedTitle),
        _getMatchingPlacehold2 = _slicedToArray(_getMatchingPlacehold, 1),
        placeholder = _getMatchingPlacehold2[0];

    var normalisedValue = normalisePlaceholderValue(value);
    if (!placeholder) return formattedTitle;
    if (placeholder === PRETTY_PLACEHOLDER) return interpolatePrettyPlaceholder(formattedTitle, normalisedValue);
    return util().format(formattedTitle, normalisedValue);
  }, interpolateTitleIndex(title, rowIndex)).replace(new RegExp(JEST_EACH_PLACEHOLDER_ESCAPE, 'g'), PLACEHOLDER_PREFIX);
};

var normalisePlaceholderValue = function normalisePlaceholderValue(value) {
  return typeof value === 'string' && SUPPORTED_PLACEHOLDERS.test(value) ? value.replace(PLACEHOLDER_PREFIX, JEST_EACH_PLACEHOLDER_ESCAPE) : value;
};

var getMatchingPlaceholders = function getMatchingPlaceholders(title) {
  return title.match(SUPPORTED_PLACEHOLDERS) || [];
};

var interpolateTitleIndex = function interpolateTitleIndex(title, index) {
  return title.replace(INDEX_PLACEHOLDER, index.toString());
};

var interpolatePrettyPlaceholder = function interpolatePrettyPlaceholder(title, value) {
  return title.replace(PRETTY_PLACEHOLDER, (0, _prettyFormat()["default"])(value, {
    maxDepth: 1,
    min: true
  }));
};