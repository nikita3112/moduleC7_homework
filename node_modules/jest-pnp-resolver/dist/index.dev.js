"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _readOnlyError(name) { throw new Error("\"" + name + "\" is read-only"); }

var globalPnpApi;

try {
  globalPnpApi = require("pnpapi");
} catch (_unused) {// Just ignore if we don't have a global PnP instance - perhaps
  // we'll eventually find one at runtime due to multi-tree
}

var createRequire = require("./createRequire");

var getDefaultResolver = require("./getDefaultResolver");

module.exports = function (request, options) {
  var basedir = options.basedir,
      defaultResolver = options.defaultResolver,
      extensions = options.extensions;

  if (process.versions.pnp) {
    var pnpApi = globalPnpApi; // While technically it would be more correct to run this code
    // everytime (since they file being run *may* belong to a
    // different dependency tree than the one owning Jest), in
    // practice this doesn't happen anywhere else than on the Jest
    // repository itself (in the test env). So in order to preserve
    // the performances, we can afford a slight incoherence here.

    if (!pnpApi) {
      try {
        var baseReq = createRequire("".concat(basedir, "/internal.js"));
        pnpApi = baseReq("pnpapi");
      } catch (_unused2) {// The file isn't part of a PnP dependency tree, so we can
        // just use the default Jest resolver.
      }
    }

    if (pnpApi) {
      var resolution = pnpApi.resolveRequest(request, "".concat(basedir, "/"), {
        extensions: extensions
      }); // When the request is a native module, Jest expects to get the string back unmodified, but pnp returns null instead.

      if (resolution === null) return request;
      return resolution;
    }
  }

  if (!defaultResolver) defaultResolver = (_readOnlyError("defaultResolver"), getDefaultResolver());
  return defaultResolver(request, _objectSpread({}, options, {
    allowPnp: false
  }));
};