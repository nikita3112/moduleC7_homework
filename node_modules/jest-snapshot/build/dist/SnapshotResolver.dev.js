'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.buildSnapshotResolver = exports.isSnapshotPath = exports.DOT_EXTENSION = exports.EXTENSION = void 0;

var path = _interopRequireWildcard(require('path'));

var _chalk = _interopRequireDefault(require('chalk'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var EXTENSION = 'snap';
exports.EXTENSION = EXTENSION;
var DOT_EXTENSION = '.' + EXTENSION;
exports.DOT_EXTENSION = DOT_EXTENSION;

var isSnapshotPath = function isSnapshotPath(path) {
  return path.endsWith(DOT_EXTENSION);
};

exports.isSnapshotPath = isSnapshotPath;
var cache = new Map();

var buildSnapshotResolver = function buildSnapshotResolver(config) {
  var key = config.rootDir;

  if (!cache.has(key)) {
    cache.set(key, createSnapshotResolver(config.snapshotResolver));
  }

  return cache.get(key);
};

exports.buildSnapshotResolver = buildSnapshotResolver;

function createSnapshotResolver(snapshotResolverPath) {
  return typeof snapshotResolverPath === 'string' ? createCustomSnapshotResolver(snapshotResolverPath) : createDefaultSnapshotResolver();
}

function createDefaultSnapshotResolver() {
  return {
    resolveSnapshotPath: function resolveSnapshotPath(testPath) {
      return path.join(path.join(path.dirname(testPath), '__snapshots__'), path.basename(testPath) + DOT_EXTENSION);
    },
    resolveTestPath: function resolveTestPath(snapshotPath) {
      return path.resolve(path.dirname(snapshotPath), '..', path.basename(snapshotPath, DOT_EXTENSION));
    },
    testPathForConsistencyCheck: path.posix.join('consistency_check', '__tests__', 'example.test.js')
  };
}

function createCustomSnapshotResolver(snapshotResolverPath) {
  var custom = require(snapshotResolverPath);

  var keys = [['resolveSnapshotPath', 'function'], ['resolveTestPath', 'function'], ['testPathForConsistencyCheck', 'string']];
  keys.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        propName = _ref2[0],
        requiredType = _ref2[1];

    if (_typeof(custom[propName]) !== requiredType) {
      throw new TypeError(mustImplement(propName, requiredType));
    }
  });
  var customResolver = {
    resolveSnapshotPath: function resolveSnapshotPath(testPath) {
      return custom.resolveSnapshotPath(testPath, DOT_EXTENSION);
    },
    resolveTestPath: function resolveTestPath(snapshotPath) {
      return custom.resolveTestPath(snapshotPath, DOT_EXTENSION);
    },
    testPathForConsistencyCheck: custom.testPathForConsistencyCheck
  };
  verifyConsistentTransformations(customResolver);
  return customResolver;
}

function mustImplement(propName, requiredType) {
  return _chalk["default"].bold("Custom snapshot resolver must implement a `".concat(propName, "` as a ").concat(requiredType, ".")) + '\nDocumentation: https://facebook.github.io/jest/docs/en/configuration.html#snapshotResolver';
}

function verifyConsistentTransformations(custom) {
  var resolvedSnapshotPath = custom.resolveSnapshotPath(custom.testPathForConsistencyCheck);
  var resolvedTestPath = custom.resolveTestPath(resolvedSnapshotPath);

  if (resolvedTestPath !== custom.testPathForConsistencyCheck) {
    throw new Error(_chalk["default"].bold("Custom snapshot resolver functions must transform paths consistently, i.e. expects resolveTestPath(resolveSnapshotPath('".concat(custom.testPathForConsistencyCheck, "')) === ").concat(resolvedTestPath)));
  }
}