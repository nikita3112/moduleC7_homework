"use strict"; // Actual implementation of the Performance class.

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var clockIsAccurate = require("./clock-is-accurate");

var calculateClockOffset = require("./calculate-clock-offset");

var _require = require("./utils"),
    hrtime = _require.hrtime,
    toMS = _require.toMS;

var kTimeOrigin = Symbol("time origin");
var kTimeOriginTimestamp = Symbol("time origin timestamp");

var Performance =
/*#__PURE__*/
function () {
  function Performance() {
    _classCallCheck(this, Performance);

    // Time origin.
    var timeOrigin = hrtime();
    this[kTimeOrigin] = timeOrigin;

    if (clockIsAccurate) {
      // Let |t1| be the DOMHighResTimeStamp representing the high resolution Unix time at which the global monotonic
      // clock is zero. This has to be calculated for every Performance object to account for clock drifts.
      var t1 = calculateClockOffset(); // Let |t2| be the DOMHighResTimeStamp representing the high resolution time value of the global monotonic clock
      // at global's time origin.

      var t2 = toMS(timeOrigin); // Return the sum of |t1| and |t2|.

      this[kTimeOriginTimestamp] = t1 + t2;
    } else {
      // Clock isn't accurate enough. Use millisecond accuracy per spec.
      var cur = Date.now();
      this[kTimeOriginTimestamp] = cur;
    }
  } // The timeOrigin getter actually returns the time origin timestamp, not the raw time origin.


  _createClass(Performance, [{
    key: "now",
    value: function now() {
      var diff = toMS(hrtime(this[kTimeOrigin]));
      return clockIsAccurate ? diff : Math.round(diff);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        timeOrigin: this.timeOrigin
      };
    }
  }, {
    key: "timeOrigin",
    get: function get() {
      return this[kTimeOriginTimestamp];
    }
  }]);

  return Performance;
}();

module.exports = {
  Performance: Performance
};