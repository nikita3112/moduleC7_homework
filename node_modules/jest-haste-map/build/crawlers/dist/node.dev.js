'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _child_process() {
  var data = require('child_process');

  _child_process = function _child_process() {
    return data;
  };

  return data;
}

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _constants() {
  var data = _interopRequireDefault(require('../constants'));

  _constants = function _constants() {
    return data;
  };

  return data;
}

function fastPath() {
  var data = _interopRequireWildcard(require('../lib/fast_path'));

  fastPath = function fastPath() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function hasNativeFindSupport(forceNodeFilesystemAPI) {
  return regeneratorRuntime.async(function hasNativeFindSupport$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!forceNodeFilesystemAPI) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return", false);

        case 2:
          _context.prev = 2;
          _context.next = 5;
          return regeneratorRuntime.awrap(new Promise(function (resolve) {
            // Check the find binary supports the non-POSIX -iname parameter wrapped in parens.
            var args = ['.', '-type', 'f', '(', '-iname', '*.ts', '-o', '-iname', '*.js', ')'];
            var child = (0, _child_process().spawn)('find', args, {
              cwd: __dirname
            });
            child.on('error', function () {
              resolve(false);
            });
            child.on('exit', function (code) {
              resolve(code === 0);
            });
          }));

        case 5:
          return _context.abrupt("return", _context.sent);

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](2);
          return _context.abrupt("return", false);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 8]]);
}

function find(roots, extensions, ignore, callback) {
  var result = [];
  var activeCalls = 0;

  function search(directory) {
    activeCalls++;
    fs().readdir(directory, {
      withFileTypes: true
    }, function (err, entries) {
      activeCalls--;

      if (err) {
        callback(result);
        return;
      } // node < v10.10 does not support the withFileTypes option, and
      // entry will be a string.


      entries.forEach(function (entry) {
        var file = path().join(directory, typeof entry === 'string' ? entry : entry.name);

        if (ignore(file)) {
          return;
        }

        if (typeof entry !== 'string') {
          if (entry.isSymbolicLink()) {
            return;
          }

          if (entry.isDirectory()) {
            search(file);
            return;
          }
        }

        activeCalls++;
        fs().lstat(file, function (err, stat) {
          activeCalls--; // This logic is unnecessary for node > v10.10, but leaving it in
          // since we need it for backwards-compatibility still.

          if (!err && stat && !stat.isSymbolicLink()) {
            if (stat.isDirectory()) {
              search(file);
            } else {
              var ext = path().extname(file).substr(1);

              if (extensions.indexOf(ext) !== -1) {
                result.push([file, stat.mtime.getTime(), stat.size]);
              }
            }
          }

          if (activeCalls === 0) {
            callback(result);
          }
        });
      });

      if (activeCalls === 0) {
        callback(result);
      }
    });
  }

  if (roots.length > 0) {
    roots.forEach(search);
  } else {
    callback(result);
  }
}

function findNative(roots, extensions, ignore, callback) {
  var args = Array.from(roots);
  args.push('-type', 'f');

  if (extensions.length) {
    args.push('(');
  }

  extensions.forEach(function (ext, index) {
    if (index) {
      args.push('-o');
    }

    args.push('-iname');
    args.push('*.' + ext);
  });

  if (extensions.length) {
    args.push(')');
  }

  var child = (0, _child_process().spawn)('find', args);
  var stdout = '';

  if (child.stdout === null) {
    throw new Error('stdout is null - this should never happen. Please open up an issue at https://github.com/facebook/jest');
  }

  child.stdout.setEncoding('utf-8');
  child.stdout.on('data', function (data) {
    return stdout += data;
  });
  child.stdout.on('close', function () {
    var lines = stdout.trim().split('\n').filter(function (x) {
      return !ignore(x);
    });
    var result = [];
    var count = lines.length;

    if (!count) {
      callback([]);
    } else {
      lines.forEach(function (path) {
        fs().stat(path, function (err, stat) {
          if (!err && stat) {
            result.push([path, stat.mtime.getTime(), stat.size]);
          }

          if (--count === 0) {
            callback(result);
          }
        });
      });
    }
  });
}

module.exports = function nodeCrawl(options) {
  var data, extensions, forceNodeFilesystemAPI, ignore, rootDir, roots, useNativeFind;
  return regeneratorRuntime.async(function nodeCrawl$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          data = options.data, extensions = options.extensions, forceNodeFilesystemAPI = options.forceNodeFilesystemAPI, ignore = options.ignore, rootDir = options.rootDir, roots = options.roots;
          _context2.next = 3;
          return regeneratorRuntime.awrap(hasNativeFindSupport(forceNodeFilesystemAPI));

        case 3:
          useNativeFind = _context2.sent;
          return _context2.abrupt("return", new Promise(function (resolve) {
            var callback = function callback(list) {
              var files = new Map();
              var removedFiles = new Map(data.files);
              list.forEach(function (fileData) {
                var _fileData = _slicedToArray(fileData, 3),
                    filePath = _fileData[0],
                    mtime = _fileData[1],
                    size = _fileData[2];

                var relativeFilePath = fastPath().relative(rootDir, filePath);
                var existingFile = data.files.get(relativeFilePath);

                if (existingFile && existingFile[_constants()["default"].MTIME] === mtime) {
                  files.set(relativeFilePath, existingFile);
                } else {
                  // See ../constants.js; SHA-1 will always be null and fulfilled later.
                  files.set(relativeFilePath, ['', mtime, size, 0, '', null]);
                }

                removedFiles["delete"](relativeFilePath);
              });
              data.files = files;
              resolve({
                hasteMap: data,
                removedFiles: removedFiles
              });
            };

            if (useNativeFind) {
              findNative(roots, extensions, ignore, callback);
            } else {
              find(roots, extensions, ignore, callback);
            }
          }));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
};