'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _events() {
  var data = require('events');

  _events = function _events() {
    return data;
  };

  return data;
}

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _anymatch() {
  var data = _interopRequireDefault(require('anymatch'));

  _anymatch = function _anymatch() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _micromatch() {
  var data = _interopRequireDefault(require('micromatch'));

  _micromatch = function _micromatch() {
    return data;
  };

  return data;
}

function _walker() {
  var data = _interopRequireDefault(require('walker'));

  _walker = function _walker() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
} // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error
// @ts-ignore: this is for CI which runs linux and might not have this


var fsevents = null;

try {
  fsevents = require('fsevents');
} catch (_unused) {// Optional dependency, only supported on Darwin.
}

var CHANGE_EVENT = 'change';
var DELETE_EVENT = 'delete';
var ADD_EVENT = 'add';
var ALL_EVENT = 'all';
/**
 * Export `FSEventsWatcher` class.
 * Watches `dir`.
 */

var FSEventsWatcher =
/*#__PURE__*/
function (_events$EventEmitter) {
  _inherits(FSEventsWatcher, _events$EventEmitter);

  _createClass(FSEventsWatcher, null, [{
    key: "isSupported",
    value: function isSupported() {
      return fsevents !== null;
    }
  }, {
    key: "normalizeProxy",
    value: function normalizeProxy(callback) {
      return function (filepath, stats) {
        return callback(path().normalize(filepath), stats);
      };
    }
  }, {
    key: "recReaddir",
    value: function recReaddir(dir, dirCallback, fileCallback, endCallback, errorCallback, ignored) {
      (0, _walker()["default"])(dir).filterDir(function (currentDir) {
        return !ignored || !(0, _anymatch()["default"])(ignored, currentDir);
      }).on('dir', FSEventsWatcher.normalizeProxy(dirCallback)).on('file', FSEventsWatcher.normalizeProxy(fileCallback)).on('error', errorCallback).on('end', function () {
        endCallback();
      });
    }
  }]);

  function FSEventsWatcher(dir, opts) {
    var _this;

    _classCallCheck(this, FSEventsWatcher);

    if (!fsevents) {
      throw new Error('`fsevents` unavailable (this watcher can only be used on Darwin)');
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FSEventsWatcher).call(this));

    _defineProperty(_assertThisInitialized(_this), 'root', void 0);

    _defineProperty(_assertThisInitialized(_this), 'ignored', void 0);

    _defineProperty(_assertThisInitialized(_this), 'glob', void 0);

    _defineProperty(_assertThisInitialized(_this), 'dot', void 0);

    _defineProperty(_assertThisInitialized(_this), 'hasIgnore', void 0);

    _defineProperty(_assertThisInitialized(_this), 'doIgnore', void 0);

    _defineProperty(_assertThisInitialized(_this), 'fsEventsWatchStopper', void 0);

    _defineProperty(_assertThisInitialized(_this), '_tracked', void 0);

    _this.dot = opts.dot || false;
    _this.ignored = opts.ignored;
    _this.glob = Array.isArray(opts.glob) ? opts.glob : [opts.glob];
    _this.hasIgnore = Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);
    _this.doIgnore = opts.ignored ? (0, _anymatch()["default"])(opts.ignored) : function () {
      return false;
    };
    _this.root = path().resolve(dir);
    _this.fsEventsWatchStopper = fsevents.watch(_this.root, _this.handleEvent.bind(_assertThisInitialized(_this)));
    _this._tracked = new Set();
    FSEventsWatcher.recReaddir(_this.root, function (filepath) {
      _this._tracked.add(filepath);
    }, function (filepath) {
      _this._tracked.add(filepath);
    }, _this.emit.bind(_assertThisInitialized(_this), 'ready'), _this.emit.bind(_assertThisInitialized(_this), 'error'), _this.ignored);
    return _this;
  }
  /**
   * End watching.
   */


  _createClass(FSEventsWatcher, [{
    key: "close",
    value: function close(callback) {
      var _this2 = this;

      this.fsEventsWatchStopper().then(function () {
        _this2.removeAllListeners();

        if (typeof callback === 'function') {
          process.nextTick(callback.bind(null, null, true));
        }
      });
    }
  }, {
    key: "isFileIncluded",
    value: function isFileIncluded(relativePath) {
      if (this.doIgnore(relativePath)) {
        return false;
      }

      return this.glob.length ? (0, _micromatch()["default"])([relativePath], this.glob, {
        dot: this.dot
      }).length > 0 : this.dot || (0, _micromatch()["default"])([relativePath], '**/*').length > 0;
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(filepath) {
      var _this3 = this;

      var relativePath = path().relative(this.root, filepath);

      if (!this.isFileIncluded(relativePath)) {
        return;
      }

      fs().lstat(filepath, function (error, stat) {
        if (error && error.code !== 'ENOENT') {
          _this3.emit('error', error);

          return;
        }

        if (error) {
          // Ignore files that aren't tracked and don't exist.
          if (!_this3._tracked.has(filepath)) {
            return;
          }

          _this3._emit(DELETE_EVENT, relativePath);

          _this3._tracked["delete"](filepath);

          return;
        }

        if (_this3._tracked.has(filepath)) {
          _this3._emit(CHANGE_EVENT, relativePath, stat);
        } else {
          _this3._tracked.add(filepath);

          _this3._emit(ADD_EVENT, relativePath, stat);
        }
      });
    }
    /**
     * Emit events.
     */

  }, {
    key: "_emit",
    value: function _emit(type, file, stat) {
      this.emit(type, file, this.root, stat);
      this.emit(ALL_EVENT, type, file, this.root, stat);
    }
  }]);

  return FSEventsWatcher;
}(_events().EventEmitter);

module.exports = FSEventsWatcher;