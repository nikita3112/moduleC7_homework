'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.extract = extract;

var _isRegExpSupported = _interopRequireDefault(require('./isRegExpSupported'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Negative look behind is only supported in Node 9+


var NOT_A_DOT = (0, _isRegExpSupported["default"])('(?<!\\.\\s*)') ? '(?<!\\.\\s*)' : '(?:^|[^.]\\s*)';

var CAPTURE_STRING_LITERAL = function CAPTURE_STRING_LITERAL(pos) {
  return "([`'\"])([^'\"`]*?)(?:\\".concat(pos, ")");
};

var WORD_SEPARATOR = '\\b';
var LEFT_PARENTHESIS = '\\(';
var RIGHT_PARENTHESIS = '\\)';
var WHITESPACE = '\\s*';
var OPTIONAL_COMMA = '(:?,\\s*)?';

function createRegExp(parts, flags) {
  return new RegExp(parts.join(''), flags);
}

function alternatives() {
  for (var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++) {
    parts[_key] = arguments[_key];
  }

  return "(?:".concat(parts.join('|'), ")");
}

function functionCallStart() {
  return [NOT_A_DOT, WORD_SEPARATOR, alternatives.apply(void 0, arguments), WHITESPACE, LEFT_PARENTHESIS, WHITESPACE];
}

var BLOCK_COMMENT_RE = /\/\*[^]*?\*\//g;
var LINE_COMMENT_RE = /\/\/.*/g;
var REQUIRE_OR_DYNAMIC_IMPORT_RE = createRegExp([].concat(_toConsumableArray(functionCallStart('require', 'import')), [CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS]), 'g');
var IMPORT_OR_EXPORT_RE = createRegExp(['\\b(?:import|export)\\s+(?!type(?:of)?\\s+)(?:[^\'"]+\\s+from\\s+)?', CAPTURE_STRING_LITERAL(1)], 'g');
var JEST_EXTENSIONS_RE = createRegExp([].concat(_toConsumableArray(functionCallStart('jest\\s*\\.\\s*(?:requireActual|requireMock|genMockFromModule|createMockFromModule)')), [CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS]), 'g');

function extract(code) {
  var dependencies = new Set();

  var addDependency = function addDependency(match, _, dep) {
    dependencies.add(dep);
    return match;
  };

  code.replace(BLOCK_COMMENT_RE, '').replace(LINE_COMMENT_RE, '').replace(IMPORT_OR_EXPORT_RE, addDependency).replace(REQUIRE_OR_DYNAMIC_IMPORT_RE, addDependency).replace(JEST_EXTENSIONS_RE, addDependency);
  return dependencies;
}