'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _constants = _interopRequireDefault(require('./constants'));

var fastPath = _interopRequireWildcard(require('./lib/fast_path'));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var HasteFS =
/*#__PURE__*/
function () {
  function HasteFS(_ref) {
    var rootDir = _ref.rootDir,
        files = _ref.files;

    _classCallCheck(this, HasteFS);

    _defineProperty(this, '_rootDir', void 0);

    _defineProperty(this, '_files', void 0);

    this._rootDir = rootDir;
    this._files = files;
  }

  _createClass(HasteFS, [{
    key: "getModuleName",
    value: function getModuleName(file) {
      var fileMetadata = this._getFileData(file);

      return fileMetadata && fileMetadata[_constants["default"].ID] || null;
    }
  }, {
    key: "getSize",
    value: function getSize(file) {
      var fileMetadata = this._getFileData(file);

      return fileMetadata && fileMetadata[_constants["default"].SIZE] || null;
    }
  }, {
    key: "getDependencies",
    value: function getDependencies(file) {
      var fileMetadata = this._getFileData(file);

      if (fileMetadata) {
        return fileMetadata[_constants["default"].DEPENDENCIES] ? fileMetadata[_constants["default"].DEPENDENCIES].split(_constants["default"].DEPENDENCY_DELIM) : [];
      } else {
        return null;
      }
    }
  }, {
    key: "getSha1",
    value: function getSha1(file) {
      var fileMetadata = this._getFileData(file);

      return fileMetadata && fileMetadata[_constants["default"].SHA1] || null;
    }
  }, {
    key: "exists",
    value: function exists(file) {
      return this._getFileData(file) != null;
    }
  }, {
    key: "getAllFiles",
    value: function getAllFiles() {
      return Array.from(this.getAbsoluteFileIterator());
    }
  }, {
    key: "getFileIterator",
    value: function getFileIterator() {
      return this._files.keys();
    }
  }, {
    key: "getAbsoluteFileIterator",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function getAbsoluteFileIterator() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;

      return regeneratorRuntime.wrap(function getAbsoluteFileIterator$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = this.getFileIterator()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 12;
                break;
              }

              file = _step.value;
              _context.next = 9;
              return fastPath.resolve(this._rootDir, file);

            case 9:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 12:
              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError) {
                _context.next = 24;
                break;
              }

              throw _iteratorError;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, getAbsoluteFileIterator, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "matchFiles",
    value: function matchFiles(pattern) {
      if (!(pattern instanceof RegExp)) {
        pattern = new RegExp(pattern);
      }

      var files = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.getAbsoluteFileIterator()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var file = _step2.value;

          if (pattern.test(file)) {
            files.push(file);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return files;
    }
  }, {
    key: "matchFilesWithGlob",
    value: function matchFilesWithGlob(globs, root) {
      var files = new Set();
      var matcher = (0, _jestUtil().globsToMatcher)(globs);
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.getAbsoluteFileIterator()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var file = _step3.value;
          var filePath = root ? fastPath.relative(root, file) : file;

          if (matcher((0, _jestUtil().replacePathSepForGlob)(filePath))) {
            files.add(file);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return files;
    }
  }, {
    key: "_getFileData",
    value: function _getFileData(file) {
      var relativePath = fastPath.relative(this._rootDir, file);
      return this._files.get(relativePath);
    }
  }]);

  return HasteFS;
}();

exports["default"] = HasteFS;