'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.worker = worker;
exports.getSha1 = getSha1;

function _crypto() {
  var data = require('crypto');

  _crypto = function _crypto() {
    return data;
  };

  return data;
}

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

var _blacklist = _interopRequireDefault(require('./blacklist'));

var _constants = _interopRequireDefault(require('./constants'));

var dependencyExtractor = _interopRequireWildcard(require('./lib/dependencyExtractor'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var PACKAGE_JSON = path().sep + 'package.json';
var hasteImpl = null;
var hasteImplModulePath = null;

function sha1hex(content) {
  return (0, _crypto().createHash)('sha1').update(content).digest('hex');
}

function worker(data) {
  var content, dependencies, id, module, sha1, computeDependencies, computeSha1, rootDir, filePath, getContent, fileData, relativeFilePath, _content, _relativeFilePath;

  return regeneratorRuntime.async(function worker$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(data.hasteImplModulePath && data.hasteImplModulePath !== hasteImplModulePath)) {
            _context.next = 5;
            break;
          }

          if (!hasteImpl) {
            _context.next = 3;
            break;
          }

          throw new Error('jest-haste-map: hasteImplModulePath changed');

        case 3:
          hasteImplModulePath = data.hasteImplModulePath;
          hasteImpl = require(hasteImplModulePath);

        case 5:
          computeDependencies = data.computeDependencies, computeSha1 = data.computeSha1, rootDir = data.rootDir, filePath = data.filePath;

          getContent = function getContent() {
            if (content === undefined) {
              content = fs().readFileSync(filePath, 'utf8');
            }

            return content;
          };

          if (!filePath.endsWith(PACKAGE_JSON)) {
            _context.next = 18;
            break;
          }

          _context.prev = 8;
          fileData = JSON.parse(getContent());

          if (fileData.name) {
            relativeFilePath = path().relative(rootDir, filePath);
            id = fileData.name;
            module = [relativeFilePath, _constants["default"].PACKAGE];
          }

          _context.next = 16;
          break;

        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](8);
          throw new Error("Cannot parse ".concat(filePath, " as JSON: ").concat(_context.t0.message));

        case 16:
          _context.next = 19;
          break;

        case 18:
          if (!_blacklist["default"].has(filePath.substr(filePath.lastIndexOf('.')))) {
            // Process a random file that is returned as a MODULE.
            if (hasteImpl) {
              id = hasteImpl.getHasteName(filePath);
            }

            if (computeDependencies) {
              _content = getContent();
              dependencies = Array.from(data.dependencyExtractor ? require(data.dependencyExtractor).extract(_content, filePath, dependencyExtractor.extract) : dependencyExtractor.extract(_content));
            }

            if (id) {
              _relativeFilePath = path().relative(rootDir, filePath);
              module = [_relativeFilePath, _constants["default"].MODULE];
            }
          }

        case 19:
          // If a SHA-1 is requested on update, compute it.
          if (computeSha1) {
            sha1 = sha1hex(getContent() || fs().readFileSync(filePath));
          }

          return _context.abrupt("return", {
            dependencies: dependencies,
            id: id,
            module: module,
            sha1: sha1
          });

        case 21:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[8, 13]]);
}

function getSha1(data) {
  var sha1;
  return regeneratorRuntime.async(function getSha1$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          sha1 = data.computeSha1 ? sha1hex(fs().readFileSync(data.filePath)) : null;
          return _context2.abrupt("return", {
            dependencies: undefined,
            id: undefined,
            module: undefined,
            sha1: sha1
          });

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  });
}