'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('inspector'),
    Session = _require.Session;

var _require2 = require('util'),
    promisify = _require2.promisify;

var CoverageInstrumenter =
/*#__PURE__*/
function () {
  function CoverageInstrumenter() {
    _classCallCheck(this, CoverageInstrumenter);

    this.session = new Session();
    this.postSession = promisify(this.session.post.bind(this.session));
  }

  _createClass(CoverageInstrumenter, [{
    key: "startInstrumenting",
    value: function startInstrumenting() {
      return regeneratorRuntime.async(function startInstrumenting$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.session.connect();
              _context.next = 3;
              return regeneratorRuntime.awrap(this.postSession('Profiler.enable'));

            case 3:
              _context.next = 5;
              return regeneratorRuntime.awrap(this.postSession('Profiler.startPreciseCoverage', {
                callCount: true,
                detailed: true
              }));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "stopInstrumenting",
    value: function stopInstrumenting() {
      var _ref, result;

      return regeneratorRuntime.async(function stopInstrumenting$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.postSession('Profiler.takePreciseCoverage'));

            case 2:
              _ref = _context2.sent;
              result = _ref.result;
              _context2.next = 6;
              return regeneratorRuntime.awrap(this.postSession('Profiler.stopPreciseCoverage'));

            case 6:
              _context2.next = 8;
              return regeneratorRuntime.awrap(this.postSession('Profiler.disable'));

            case 8:
              return _context2.abrupt("return", result);

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }]);

  return CoverageInstrumenter;
}();

module.exports.CoverageInstrumenter = CoverageInstrumenter;