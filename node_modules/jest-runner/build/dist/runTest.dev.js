'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = runTest;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _sourceMapSupport() {
  var data = _interopRequireDefault(require('source-map-support'));

  _sourceMapSupport = function _sourceMapSupport() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _jestConfig() {
  var data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}

function docblock() {
  var data = _interopRequireWildcard(require('jest-docblock'));

  docblock = function docblock() {
    return data;
  };

  return data;
}

function _jestLeakDetector() {
  var data = _interopRequireDefault(require('jest-leak-detector'));

  _jestLeakDetector = function _jestLeakDetector() {
    return data;
  };

  return data;
}

function _jestMessageUtil() {
  var data = require('jest-message-util');

  _jestMessageUtil = function _jestMessageUtil() {
    return data;
  };

  return data;
}

function _jestRuntime() {
  var data = _interopRequireDefault(require('jest-runtime'));

  _jestRuntime = function _jestRuntime() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


function freezeConsole(testConsole, config) {
  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here
  testConsole._log = function fakeConsolePush(_type, message) {
    var error = new (_jestUtil().ErrorWithStack)("".concat(_chalk()["default"].red("".concat(_chalk()["default"].bold('Cannot log after tests are done.'), " Did you forget to wait for something async in your test?")), "\nAttempted to log \"").concat(message, "\"."), fakeConsolePush);
    var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
      noStackTrace: false
    }, undefined, true);
    process.stderr.write('\n' + formattedError + '\n'); // TODO: set exit code in Jest 25
    // process.exitCode = 1;
  };
} // Keeping the core of "runTest" as a separate function (as "runTestInternal")
// is key to be able to detect memory leaks. Since all variables are local to
// the function, when "runTestInternal" finishes its execution, they can all be
// freed, UNLESS something else is leaking them (and that's why we can detect
// the leak!).
//
// If we had all the code in a single function, we should manually nullify all
// references to verify if there is a leak, which is not maintainable and error
// prone. That's why "runTestInternal" CANNOT be inlined inside "runTest".


function runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest) {
  var testSource, docblockPragmas, customEnvironment, testEnvironment, TestEnvironment, testFramework, Runtime, consoleOut, consoleFormatter, testConsole, environment, leakDetector, cacheFS, runtime, start, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _path, _runtime$unstable_sho, esm, sourcemapOptions, realExit, collectV8Coverage, result, testCount, end, testRuntime, coverage, coverageKeys, v8Coverage, _runtime$teardown;

  return regeneratorRuntime.async(function runTestInternal$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          testSource = fs().readFileSync(path, 'utf8');
          docblockPragmas = docblock().parse(docblock().extract(testSource));
          customEnvironment = docblockPragmas['jest-environment'];
          testEnvironment = config.testEnvironment;

          if (!customEnvironment) {
            _context.next = 8;
            break;
          }

          if (!Array.isArray(customEnvironment)) {
            _context.next = 7;
            break;
          }

          throw new Error("You can only define a single test environment through docblocks, got \"".concat(customEnvironment.join(', '), "\""));

        case 7:
          testEnvironment = (0, _jestConfig().getTestEnvironment)(_objectSpread({}, config, {
            testEnvironment: customEnvironment
          }));

        case 8:
          TestEnvironment = (0, _jestUtil().interopRequireDefault)(require(testEnvironment))["default"];
          testFramework = (0, _jestUtil().interopRequireDefault)(process.env.JEST_CIRCUS === '1' // eslint-disable-next-line import/no-extraneous-dependencies
          ? require('jest-circus/runner') : require(config.testRunner))["default"];
          Runtime = (0, _jestUtil().interopRequireDefault)(config.moduleLoader ? require(config.moduleLoader) : require('jest-runtime'))["default"];
          consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;

          consoleFormatter = function consoleFormatter(type, message) {
            return (0, _console().getConsoleOutput)(config.cwd, !!globalConfig.verbose, // 4 = the console call is buried 4 stack frames deep
            _console().BufferedConsole.write([], type, message, 4), config, globalConfig);
          };

          if (globalConfig.silent) {
            testConsole = new (_console().NullConsole)(consoleOut, consoleOut, consoleFormatter);
          } else if (globalConfig.verbose) {
            testConsole = new (_console().CustomConsole)(consoleOut, consoleOut, consoleFormatter);
          } else {
            testConsole = new (_console().BufferedConsole)();
          }

          environment = new TestEnvironment(config, {
            console: testConsole,
            docblockPragmas: docblockPragmas,
            testPath: path
          });
          leakDetector = config.detectLeaks ? new (_jestLeakDetector()["default"])(environment) : null;
          cacheFS = _defineProperty({}, path, testSource);
          (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);
          runtime = new Runtime(config, environment, resolver, cacheFS, {
            changedFiles: context === null || context === void 0 ? void 0 : context.changedFiles,
            collectCoverage: globalConfig.collectCoverage,
            collectCoverageFrom: globalConfig.collectCoverageFrom,
            collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom,
            coverageProvider: globalConfig.coverageProvider,
            sourcesRelatedToTestsInChangedFiles: context === null || context === void 0 ? void 0 : context.sourcesRelatedToTestsInChangedFiles
          }, path);
          start = Date.now();
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 23;
          _iterator = config.setupFiles[Symbol.iterator]();

        case 25:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 37;
            break;
          }

          _path = _step.value;
          // TODO: remove ? in Jest 26
          esm = (_runtime$unstable_sho = runtime.unstable_shouldLoadAsEsm) === null || _runtime$unstable_sho === void 0 ? void 0 : _runtime$unstable_sho.call(runtime, _path);

          if (!esm) {
            _context.next = 33;
            break;
          }

          _context.next = 31;
          return regeneratorRuntime.awrap(runtime.unstable_importModule(_path));

        case 31:
          _context.next = 34;
          break;

        case 33:
          runtime.requireModule(_path);

        case 34:
          _iteratorNormalCompletion = true;
          _context.next = 25;
          break;

        case 37:
          _context.next = 43;
          break;

        case 39:
          _context.prev = 39;
          _context.t0 = _context["catch"](23);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 43:
          _context.prev = 43;
          _context.prev = 44;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 46:
          _context.prev = 46;

          if (!_didIteratorError) {
            _context.next = 49;
            break;
          }

          throw _iteratorError;

        case 49:
          return _context.finish(46);

        case 50:
          return _context.finish(43);

        case 51:
          sourcemapOptions = {
            environment: 'node',
            handleUncaughtExceptions: false,
            retrieveSourceMap: function retrieveSourceMap(source) {
              var sourceMaps = runtime.getSourceMaps();
              var sourceMapSource = sourceMaps && sourceMaps[source];

              if (sourceMapSource) {
                try {
                  return {
                    map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),
                    url: source
                  };
                } catch (_unused) {}
              }

              return null;
            }
          }; // For tests

          runtime.requireInternalModule(require.resolve('source-map-support'), 'source-map-support').install(sourcemapOptions); // For runtime errors

          _sourceMapSupport()["default"].install(sourcemapOptions);

          if (environment.global && environment.global.process && environment.global.process.exit) {
            realExit = environment.global.process.exit;

            environment.global.process.exit = function exit() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              var error = new (_jestUtil().ErrorWithStack)("process.exit called with \"".concat(args.join(', '), "\""), exit);
              var formattedError = (0, _jestMessageUtil().formatExecError)(error, config, {
                noStackTrace: false
              }, undefined, true);
              process.stderr.write(formattedError);
              return realExit.apply(void 0, args);
            };
          } // if we don't have `getVmContext` on the env skip coverage


          collectV8Coverage = globalConfig.coverageProvider === 'v8' && typeof environment.getVmContext === 'function';
          _context.prev = 56;
          _context.next = 59;
          return regeneratorRuntime.awrap(environment.setup());

        case 59:
          _context.prev = 59;

          if (!collectV8Coverage) {
            _context.next = 63;
            break;
          }

          _context.next = 63;
          return regeneratorRuntime.awrap(runtime.collectV8Coverage());

        case 63:
          _context.next = 65;
          return regeneratorRuntime.awrap(testFramework(globalConfig, config, environment, runtime, path, sendMessageToJest));

        case 65:
          result = _context.sent;
          _context.next = 72;
          break;

        case 68:
          _context.prev = 68;
          _context.t1 = _context["catch"](59);
          // Access stack before uninstalling sourcemaps
          _context.t1.stack;
          throw _context.t1;

        case 72:
          _context.prev = 72;

          if (!collectV8Coverage) {
            _context.next = 76;
            break;
          }

          _context.next = 76;
          return regeneratorRuntime.awrap(runtime.stopCollectingV8Coverage());

        case 76:
          return _context.finish(72);

        case 77:
          freezeConsole(testConsole, config);
          testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests + result.numTodoTests;
          end = Date.now();
          testRuntime = end - start;
          result.perfStats = {
            end: end,
            runtime: testRuntime,
            slow: testRuntime / 1000 > config.slowTestThreshold,
            start: start
          };
          result.testFilePath = path;
          result.console = testConsole.getBuffer();
          result.skipped = testCount === result.numPendingTests;
          result.displayName = config.displayName;
          coverage = runtime.getAllCoverageInfoCopy();

          if (coverage) {
            coverageKeys = Object.keys(coverage);

            if (coverageKeys.length) {
              result.coverage = coverage;
            }
          }

          if (collectV8Coverage) {
            v8Coverage = runtime.getAllV8CoverageInfoCopy();

            if (v8Coverage && v8Coverage.length > 0) {
              result.v8Coverage = v8Coverage;
            }
          }

          if (globalConfig.logHeapUsage) {
            if (global.gc) {
              global.gc();
            }

            result.memoryUsage = process.memoryUsage().heapUsed;
          } // Delay the resolution to allow log messages to be output.


          return _context.abrupt("return", new Promise(function (resolve) {
            setImmediate(function () {
              return resolve({
                leakDetector: leakDetector,
                result: result
              });
            });
          }));

        case 91:
          _context.prev = 91;
          _context.next = 94;
          return regeneratorRuntime.awrap(environment.teardown());

        case 94:
          // TODO: this function might be missing, remove ? in Jest 26
          (_runtime$teardown = runtime.teardown) === null || _runtime$teardown === void 0 ? void 0 : _runtime$teardown.call(runtime);

          _sourceMapSupport()["default"].resetRetrieveHandlers();

          return _context.finish(91);

        case 97:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[23, 39, 43, 51], [44,, 46, 50], [56,, 91, 97], [59, 68, 72, 77]]);
}

function runTest(path, globalConfig, config, resolver, context, sendMessageToJest) {
  var _ref, leakDetector, result;

  return regeneratorRuntime.async(function runTest$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(runTestInternal(path, globalConfig, config, resolver, context, sendMessageToJest));

        case 2:
          _ref = _context2.sent;
          leakDetector = _ref.leakDetector;
          result = _ref.result;

          if (!leakDetector) {
            _context2.next = 13;
            break;
          }

          _context2.next = 8;
          return regeneratorRuntime.awrap(new Promise(function (resolve) {
            return setTimeout(resolve, 100);
          }));

        case 8:
          _context2.next = 10;
          return regeneratorRuntime.awrap(leakDetector.isLeaking());

        case 10:
          result.leaks = _context2.sent;
          _context2.next = 14;
          break;

        case 13:
          result.leaks = false;

        case 14:
          return _context2.abrupt("return", result);

        case 15:
        case "end":
          return _context2.stop();
      }
    }
  });
}