'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.stringNotMatching = exports.stringMatching = exports.stringNotContaining = exports.stringContaining = exports.objectNotContaining = exports.objectContaining = exports.arrayNotContaining = exports.arrayContaining = exports.anything = exports.any = exports.AsymmetricMatcher = void 0;

var _jasmineUtils = require('./jasmineUtils');

var _utils = require('./utils');

var _Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var AsymmetricMatcher = function AsymmetricMatcher(sample) {
  _classCallCheck(this, AsymmetricMatcher);

  _defineProperty(this, 'sample', void 0);

  _defineProperty(this, '$$typeof', void 0);

  _defineProperty(this, 'inverse', void 0);

  this.$$typeof = _Symbol["for"]('jest.asymmetricMatcher');
  this.sample = sample;
};

exports.AsymmetricMatcher = AsymmetricMatcher;

var Any =
/*#__PURE__*/
function (_AsymmetricMatcher) {
  _inherits(Any, _AsymmetricMatcher);

  function Any(sample) {
    _classCallCheck(this, Any);

    if (typeof sample === 'undefined') {
      throw new TypeError('any() expects to be passed a constructor function. ' + 'Please pass one or use anything() to match any object.');
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(Any).call(this, sample));
  }

  _createClass(Any, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      if (this.sample == String) {
        return typeof other == 'string' || other instanceof String;
      }

      if (this.sample == Number) {
        return typeof other == 'number' || other instanceof Number;
      }

      if (this.sample == Function) {
        return typeof other == 'function' || other instanceof Function;
      }

      if (this.sample == Object) {
        return _typeof(other) == 'object';
      }

      if (this.sample == Boolean) {
        return typeof other == 'boolean';
      }
      /* global BigInt */


      if (this.sample == BigInt) {
        return typeof other == 'bigint';
      }

      if (this.sample == _Symbol) {
        return _typeof(other) == 'symbol';
      }

      return other instanceof this.sample;
    }
  }, {
    key: "toString",
    value: function toString() {
      return 'Any';
    }
  }, {
    key: "getExpectedType",
    value: function getExpectedType() {
      if (this.sample == String) {
        return 'string';
      }

      if (this.sample == Number) {
        return 'number';
      }

      if (this.sample == Function) {
        return 'function';
      }

      if (this.sample == Object) {
        return 'object';
      }

      if (this.sample == Boolean) {
        return 'boolean';
      }

      return (0, _jasmineUtils.fnNameFor)(this.sample);
    }
  }, {
    key: "toAsymmetricMatcher",
    value: function toAsymmetricMatcher() {
      return 'Any<' + (0, _jasmineUtils.fnNameFor)(this.sample) + '>';
    }
  }]);

  return Any;
}(AsymmetricMatcher);

var Anything =
/*#__PURE__*/
function (_AsymmetricMatcher2) {
  _inherits(Anything, _AsymmetricMatcher2);

  function Anything() {
    _classCallCheck(this, Anything);

    return _possibleConstructorReturn(this, _getPrototypeOf(Anything).apply(this, arguments));
  }

  _createClass(Anything, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      return !(0, _jasmineUtils.isUndefined)(other) && other !== null;
    }
  }, {
    key: "toString",
    value: function toString() {
      return 'Anything';
    } // No getExpectedType method, because it matches either null or undefined.

  }, {
    key: "toAsymmetricMatcher",
    value: function toAsymmetricMatcher() {
      return 'Anything';
    }
  }]);

  return Anything;
}(AsymmetricMatcher);

var ArrayContaining =
/*#__PURE__*/
function (_AsymmetricMatcher3) {
  _inherits(ArrayContaining, _AsymmetricMatcher3);

  function ArrayContaining(sample) {
    var _this;

    var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, ArrayContaining);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArrayContaining).call(this, sample));
    _this.inverse = inverse;
    return _this;
  }

  _createClass(ArrayContaining, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      if (!Array.isArray(this.sample)) {
        throw new Error("You must provide an array to ".concat(this.toString(), ", not '") + _typeof(this.sample) + "'.");
      }

      var result = this.sample.length === 0 || Array.isArray(other) && this.sample.every(function (item) {
        return other.some(function (another) {
          return (0, _jasmineUtils.equals)(item, another);
        });
      });
      return this.inverse ? !result : result;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Array".concat(this.inverse ? 'Not' : '', "Containing");
    }
  }, {
    key: "getExpectedType",
    value: function getExpectedType() {
      return 'array';
    }
  }]);

  return ArrayContaining;
}(AsymmetricMatcher);

var ObjectContaining =
/*#__PURE__*/
function (_AsymmetricMatcher4) {
  _inherits(ObjectContaining, _AsymmetricMatcher4);

  function ObjectContaining(sample) {
    var _this2;

    var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, ObjectContaining);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ObjectContaining).call(this, sample));
    _this2.inverse = inverse;
    return _this2;
  }

  _createClass(ObjectContaining, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      if (_typeof(this.sample) !== 'object') {
        throw new Error("You must provide an object to ".concat(this.toString(), ", not '") + _typeof(this.sample) + "'.");
      }

      if (this.inverse) {
        for (var property in this.sample) {
          if ((0, _jasmineUtils.hasProperty)(other, property) && (0, _jasmineUtils.equals)(this.sample[property], other[property]) && !(0, _utils.emptyObject)(this.sample[property]) && !(0, _utils.emptyObject)(other[property])) {
            return false;
          }
        }

        return true;
      } else {
        for (var _property in this.sample) {
          if (!(0, _jasmineUtils.hasProperty)(other, _property) || !(0, _jasmineUtils.equals)(this.sample[_property], other[_property])) {
            return false;
          }
        }

        return true;
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Object".concat(this.inverse ? 'Not' : '', "Containing");
    }
  }, {
    key: "getExpectedType",
    value: function getExpectedType() {
      return 'object';
    }
  }]);

  return ObjectContaining;
}(AsymmetricMatcher);

var StringContaining =
/*#__PURE__*/
function (_AsymmetricMatcher5) {
  _inherits(StringContaining, _AsymmetricMatcher5);

  function StringContaining(sample) {
    var _this3;

    var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, StringContaining);

    if (!(0, _jasmineUtils.isA)('String', sample)) {
      throw new Error('Expected is not a string');
    }

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(StringContaining).call(this, sample));
    _this3.inverse = inverse;
    return _this3;
  }

  _createClass(StringContaining, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      var result = (0, _jasmineUtils.isA)('String', other) && other.includes(this.sample);
      return this.inverse ? !result : result;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "String".concat(this.inverse ? 'Not' : '', "Containing");
    }
  }, {
    key: "getExpectedType",
    value: function getExpectedType() {
      return 'string';
    }
  }]);

  return StringContaining;
}(AsymmetricMatcher);

var StringMatching =
/*#__PURE__*/
function (_AsymmetricMatcher6) {
  _inherits(StringMatching, _AsymmetricMatcher6);

  function StringMatching(sample) {
    var _this4;

    var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, StringMatching);

    if (!(0, _jasmineUtils.isA)('String', sample) && !(0, _jasmineUtils.isA)('RegExp', sample)) {
      throw new Error('Expected is not a String or a RegExp');
    }

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(StringMatching).call(this, new RegExp(sample)));
    _this4.inverse = inverse;
    return _this4;
  }

  _createClass(StringMatching, [{
    key: "asymmetricMatch",
    value: function asymmetricMatch(other) {
      var result = (0, _jasmineUtils.isA)('String', other) && this.sample.test(other);
      return this.inverse ? !result : result;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "String".concat(this.inverse ? 'Not' : '', "Matching");
    }
  }, {
    key: "getExpectedType",
    value: function getExpectedType() {
      return 'string';
    }
  }]);

  return StringMatching;
}(AsymmetricMatcher);

var any = function any(expectedObject) {
  return new Any(expectedObject);
};

exports.any = any;

var anything = function anything() {
  return new Anything();
};

exports.anything = anything;

var arrayContaining = function arrayContaining(sample) {
  return new ArrayContaining(sample);
};

exports.arrayContaining = arrayContaining;

var arrayNotContaining = function arrayNotContaining(sample) {
  return new ArrayContaining(sample, true);
};

exports.arrayNotContaining = arrayNotContaining;

var objectContaining = function objectContaining(sample) {
  return new ObjectContaining(sample);
};

exports.objectContaining = objectContaining;

var objectNotContaining = function objectNotContaining(sample) {
  return new ObjectContaining(sample, true);
};

exports.objectNotContaining = objectNotContaining;

var stringContaining = function stringContaining(expected) {
  return new StringContaining(expected);
};

exports.stringContaining = stringContaining;

var stringNotContaining = function stringNotContaining(expected) {
  return new StringContaining(expected, true);
};

exports.stringNotContaining = stringNotContaining;

var stringMatching = function stringMatching(expected) {
  return new StringMatching(expected);
};

exports.stringMatching = stringMatching;

var stringNotMatching = function stringNotMatching(expected) {
  return new StringMatching(expected, true);
};

exports.stringNotMatching = stringNotMatching;