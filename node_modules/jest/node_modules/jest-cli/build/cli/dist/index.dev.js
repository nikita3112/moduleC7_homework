'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.run = run;
exports.buildArgv = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _exit() {
  var data = _interopRequireDefault(require('exit'));

  _exit = function _exit() {
    return data;
  };

  return data;
}

function _yargs() {
  var data = _interopRequireDefault(require('yargs'));

  _yargs = function _yargs() {
    return data;
  };

  return data;
}

function _core() {
  var data = require('@jest/core');

  _core = function _core() {
    return data;
  };

  return data;
}

function _jestConfig() {
  var data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestValidate() {
  var data = require('jest-validate');

  _jestValidate = function _jestValidate() {
    return data;
  };

  return data;
}

function _init() {
  var data = _interopRequireDefault(require('../init'));

  _init = function _init() {
    return data;
  };

  return data;
}

var args = _interopRequireWildcard(require('./args'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function run(maybeArgv, project) {
  var argv, projects, _ref, results, globalConfig;

  return regeneratorRuntime.async(function run$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          argv = buildArgv(maybeArgv);

          if (!argv.init) {
            _context.next = 6;
            break;
          }

          _context.next = 5;
          return regeneratorRuntime.awrap((0, _init()["default"])());

        case 5:
          return _context.abrupt("return");

        case 6:
          projects = getProjectListFromCLIArgs(argv, project);
          _context.next = 9;
          return regeneratorRuntime.awrap((0, _core().runCLI)(argv, projects));

        case 9:
          _ref = _context.sent;
          results = _ref.results;
          globalConfig = _ref.globalConfig;
          readResultsAndExit(results, globalConfig);
          _context.next = 22;
          break;

        case 15:
          _context.prev = 15;
          _context.t0 = _context["catch"](0);
          (0, _jestUtil().clearLine)(process.stderr);
          (0, _jestUtil().clearLine)(process.stdout);

          if (_context.t0.stack) {
            console.error(_chalk()["default"].red(_context.t0.stack));
          } else {
            console.error(_chalk()["default"].red(_context.t0));
          }

          (0, _exit()["default"])(1);
          throw _context.t0;

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 15]]);
}

var buildArgv = function buildArgv(maybeArgv) {
  var version = (0, _core().getVersion)() + (__dirname.includes("packages".concat(path().sep, "jest-cli")) ? '-dev' : '');
  var rawArgv = maybeArgv || process.argv.slice(2);
  var argv = (0, _yargs()["default"])(rawArgv).usage(args.usage).version(version).alias('help', 'h').options(args.options).epilogue(args.docs).check(args.check).argv;
  (0, _jestValidate().validateCLIOptions)(argv, _objectSpread({}, args.options, {
    deprecationEntries: _jestConfig().deprecationEntries
  }), // strip leading dashes
  Array.isArray(rawArgv) ? rawArgv.map(function (rawArgv) {
    return rawArgv.replace(/^--?/, '');
  }) : Object.keys(rawArgv)); // strip dashed args

  return Object.keys(argv).reduce(function (result, key) {
    if (!key.includes('-')) {
      result[key] = argv[key];
    }

    return result;
  }, {
    $0: argv.$0,
    _: argv._
  });
};

exports.buildArgv = buildArgv;

var getProjectListFromCLIArgs = function getProjectListFromCLIArgs(argv, project) {
  var projects = argv.projects ? argv.projects : [];

  if (project) {
    projects.push(project);
  }

  if (!projects.length && process.platform === 'win32') {
    try {
      projects.push((0, _jestUtil().tryRealpath)(process.cwd()));
    } catch (_unused) {// do nothing, just catch error
      // process.binding('fs').realpath can throw, e.g. on mapped drives
    }
  }

  if (!projects.length) {
    projects.push(process.cwd());
  }

  return projects;
};

var readResultsAndExit = function readResultsAndExit(result, globalConfig) {
  var code = !result || result.success ? 0 : globalConfig.testFailureExitCode; // Only exit if needed

  process.on('exit', function () {
    if (typeof code === 'number' && code !== 0) {
      process.exitCode = code;
    }
  });

  if (globalConfig.forceExit) {
    if (!globalConfig.detectOpenHandles) {
      console.warn(_chalk()["default"].bold('Force exiting Jest: ') + 'Have you considered using `--detectOpenHandles` to detect ' + 'async operations that kept running after all tests finished?');
    }

    (0, _exit()["default"])(code);
  } else if (!globalConfig.detectOpenHandles) {
    setTimeout(function () {
      console.warn(_chalk()["default"].yellow.bold('Jest did not exit one second after the test run has completed.\n\n') + _chalk()["default"].yellow('This usually means that there are asynchronous operations that ' + "weren't stopped in your tests. Consider running Jest with " + '`--detectOpenHandles` to troubleshoot this issue.'));
    }, 1000).unref();
  }
};