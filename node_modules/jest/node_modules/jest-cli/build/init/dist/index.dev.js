'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _prompts() {
  var data = _interopRequireDefault(require('prompts'));

  _prompts = function _prompts() {
    return data;
  };

  return data;
}

function _jestConfig() {
  var data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

var _errors = require('./errors');

var _generateConfigFile = _interopRequireDefault(require('./generateConfigFile'));

var _modifyPackageJson = _interopRequireDefault(require('./modifyPackageJson'));

var _questions = _interopRequireWildcard(require('./questions'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _jestConfig$constants = _jestConfig().constants,
    JEST_CONFIG_BASE_NAME = _jestConfig$constants.JEST_CONFIG_BASE_NAME,
    JEST_CONFIG_EXT_MJS = _jestConfig$constants.JEST_CONFIG_EXT_MJS,
    JEST_CONFIG_EXT_JS = _jestConfig$constants.JEST_CONFIG_EXT_JS,
    JEST_CONFIG_EXT_TS = _jestConfig$constants.JEST_CONFIG_EXT_TS,
    JEST_CONFIG_EXT_ORDER = _jestConfig$constants.JEST_CONFIG_EXT_ORDER,
    PACKAGE_JSON = _jestConfig$constants.PACKAGE_JSON;

var getConfigFilename = function getConfigFilename(ext) {
  return JEST_CONFIG_BASE_NAME + ext;
};

var _default = function _default() {
  var rootDir,
      projectPackageJsonPath,
      questions,
      hasJestProperty,
      projectPackageJson,
      existingJestConfigExt,
      result,
      promptAborted,
      results,
      jestConfigFileExt,
      jestConfigPath,
      shouldModifyScripts,
      modifiedPackageJson,
      generatedConfig,
      _args = arguments;
  return regeneratorRuntime.async(function _default$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          rootDir = _args.length > 0 && _args[0] !== undefined ? _args[0] : (0, _jestUtil().tryRealpath)(process.cwd());
          // prerequisite checks
          projectPackageJsonPath = path().join(rootDir, PACKAGE_JSON);

          if (fs().existsSync(projectPackageJsonPath)) {
            _context.next = 4;
            break;
          }

          throw new _errors.NotFoundPackageJsonError(rootDir);

        case 4:
          questions = _questions["default"].slice(0);
          hasJestProperty = false;
          _context.prev = 6;
          projectPackageJson = JSON.parse(fs().readFileSync(projectPackageJsonPath, 'utf-8'));
          _context.next = 13;
          break;

        case 10:
          _context.prev = 10;
          _context.t0 = _context["catch"](6);
          throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);

        case 13:
          if (projectPackageJson.jest) {
            hasJestProperty = true;
          }

          existingJestConfigExt = JEST_CONFIG_EXT_ORDER.find(function (ext) {
            return fs().existsSync(path().join(rootDir, getConfigFilename(ext)));
          });

          if (!(hasJestProperty || existingJestConfigExt)) {
            _context.next = 23;
            break;
          }

          _context.next = 18;
          return regeneratorRuntime.awrap((0, _prompts()["default"])({
            initial: true,
            message: 'It seems that you already have a jest configuration, do you want to override it?',
            name: 'continue',
            type: 'confirm'
          }));

        case 18:
          result = _context.sent;

          if (result["continue"]) {
            _context.next = 23;
            break;
          }

          console.log();
          console.log('Aborting...');
          return _context.abrupt("return");

        case 23:
          // Add test script installation only if needed
          if (!projectPackageJson.scripts || projectPackageJson.scripts.test !== 'jest') {
            questions.unshift(_questions.testScriptQuestion);
          } // Start the init process


          console.log();
          console.log(_chalk()["default"].underline("The following questions will help Jest to create a suitable configuration for your project\n"));
          promptAborted = false; // @ts-expect-error: Return type cannot be object - faulty typings

          _context.next = 29;
          return regeneratorRuntime.awrap((0, _prompts()["default"])(questions, {
            onCancel: function onCancel() {
              promptAborted = true;
            }
          }));

        case 29:
          results = _context.sent;

          if (!promptAborted) {
            _context.next = 34;
            break;
          }

          console.log();
          console.log('Aborting...');
          return _context.abrupt("return");

        case 34:
          // Determine if Jest should use JS or TS for the config file
          jestConfigFileExt = results.useTypescript ? JEST_CONFIG_EXT_TS : projectPackageJson.type === 'module' ? JEST_CONFIG_EXT_MJS : JEST_CONFIG_EXT_JS; // Determine Jest config path

          jestConfigPath = existingJestConfigExt ? getConfigFilename(existingJestConfigExt) : path().join(rootDir, getConfigFilename(jestConfigFileExt));
          shouldModifyScripts = results.scripts;

          if (shouldModifyScripts || hasJestProperty) {
            modifiedPackageJson = (0, _modifyPackageJson["default"])({
              projectPackageJson: projectPackageJson,
              shouldModifyScripts: shouldModifyScripts
            });
            fs().writeFileSync(projectPackageJsonPath, modifiedPackageJson);
            console.log('');
            console.log("\u270F\uFE0F  Modified ".concat(_chalk()["default"].cyan(projectPackageJsonPath)));
          }

          generatedConfig = (0, _generateConfigFile["default"])(results, projectPackageJson.type === 'module' || jestConfigPath.endsWith(JEST_CONFIG_EXT_MJS));
          fs().writeFileSync(jestConfigPath, generatedConfig);
          console.log('');
          console.log("\uD83D\uDCDD  Configuration file created at ".concat(_chalk()["default"].cyan(jestConfigPath)));

        case 42:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[6, 10]]);
};

exports["default"] = _default;