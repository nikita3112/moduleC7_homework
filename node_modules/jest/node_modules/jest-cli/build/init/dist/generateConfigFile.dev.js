'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

function _jestConfig() {
  var data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var stringifyOption = function stringifyOption(option, map) {
  var linePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var optionDescription = "  // ".concat(_jestConfig().descriptions[option]);
  var stringifiedObject = "".concat(option, ": ").concat(JSON.stringify(map[option], null, 2));
  return optionDescription + '\n' + stringifiedObject.split('\n').map(function (line) {
    return '  ' + linePrefix + line;
  }).join('\n') + ',\n';
};

var generateConfigFile = function generateConfigFile(results) {
  var generateEsm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var useTypescript = results.useTypescript,
      coverage = results.coverage,
      coverageProvider = results.coverageProvider,
      clearMocks = results.clearMocks,
      environment = results.environment;
  var overrides = {};

  if (coverage) {
    Object.assign(overrides, {
      coverageDirectory: 'coverage'
    });
  }

  if (coverageProvider === 'v8') {
    Object.assign(overrides, {
      coverageProvider: 'v8'
    });
  }

  if (environment === 'node') {
    Object.assign(overrides, {
      testEnvironment: 'node'
    });
  }

  if (clearMocks) {
    Object.assign(overrides, {
      clearMocks: true
    });
  }

  var overrideKeys = Object.keys(overrides);
  var properties = [];

  for (var option in _jestConfig().descriptions) {
    var opt = option;

    if (overrideKeys.includes(opt)) {
      properties.push(stringifyOption(opt, overrides));
    } else {
      properties.push(stringifyOption(opt, _jestConfig().defaults, '// '));
    }
  }

  var configHeaderMessage = "/*\n * For a detailed explanation regarding each configuration property".concat(useTypescript ? ' and type check' : '', ", visit:\n * https://jestjs.io/docs/en/configuration.html\n */\n\n");
  return configHeaderMessage + (useTypescript || generateEsm ? 'export default {\n' : 'module.exports = {\n') + properties.join('\n') + '};\n';
};

var _default = generateConfigFile;
exports["default"] = _default;