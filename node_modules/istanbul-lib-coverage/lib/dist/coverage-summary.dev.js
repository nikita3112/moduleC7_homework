/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var percent = require('./percent');

var dataProperties = require('./data-properties');

function blankSummary() {
  var empty = function empty() {
    return {
      total: 0,
      covered: 0,
      skipped: 0,
      pct: 'Unknown'
    };
  };

  return {
    lines: empty(),
    statements: empty(),
    functions: empty(),
    branches: empty()
  };
} // asserts that a data object "looks like" a summary coverage object


function assertValidSummary(obj) {
  var valid = obj && obj.lines && obj.statements && obj.functions && obj.branches;

  if (!valid) {
    throw new Error('Invalid summary coverage object, missing keys, found:' + Object.keys(obj).join(','));
  }
}
/**
 * CoverageSummary provides a summary of code coverage . It exposes 4 properties,
 * `lines`, `statements`, `branches`, and `functions`. Each of these properties
 * is an object that has 4 keys `total`, `covered`, `skipped` and `pct`.
 * `pct` is a percentage number (0-100).
 */


var CoverageSummary =
/*#__PURE__*/
function () {
  /**
   * @constructor
   * @param {Object|CoverageSummary} [obj=undefined] an optional data object or
   * another coverage summary to initialize this object with.
   */
  function CoverageSummary(obj) {
    _classCallCheck(this, CoverageSummary);

    if (!obj) {
      this.data = blankSummary();
    } else if (obj instanceof CoverageSummary) {
      this.data = obj.data;
    } else {
      this.data = obj;
    }

    assertValidSummary(this.data);
  }
  /**
   * merges a second summary coverage object into this one
   * @param {CoverageSummary} obj - another coverage summary object
   */


  _createClass(CoverageSummary, [{
    key: "merge",
    value: function merge(obj) {
      var _this = this;

      var keys = ['lines', 'statements', 'branches', 'functions'];
      keys.forEach(function (key) {
        _this[key].total += obj[key].total;
        _this[key].covered += obj[key].covered;
        _this[key].skipped += obj[key].skipped;
        _this[key].pct = percent(_this[key].covered, _this[key].total);
      });
      return this;
    }
    /**
     * returns a POJO that is JSON serializable. May be used to get the raw
     * summary object.
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
    /**
     * return true if summary has no lines of code
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.lines.total === 0;
    }
  }]);

  return CoverageSummary;
}();

dataProperties(CoverageSummary, ['lines', 'statements', 'functions', 'branches']);
module.exports = {
  CoverageSummary: CoverageSummary
};