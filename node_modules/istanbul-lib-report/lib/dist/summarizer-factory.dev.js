/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var coverage = require('istanbul-lib-coverage');

var Path = require('./path');

var _require = require('./tree'),
    BaseNode = _require.BaseNode,
    BaseTree = _require.BaseTree;

var ReportNode =
/*#__PURE__*/
function (_BaseNode) {
  _inherits(ReportNode, _BaseNode);

  function ReportNode(path, fileCoverage) {
    var _this;

    _classCallCheck(this, ReportNode);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReportNode).call(this));
    _this.path = path;
    _this.parent = null;
    _this.fileCoverage = fileCoverage;
    _this.children = [];
    return _this;
  }

  _createClass(ReportNode, [{
    key: "addChild",
    value: function addChild(child) {
      child.parent = this;
      this.children.push(child);
    }
  }, {
    key: "asRelative",
    value: function asRelative(p) {
      if (p.substring(0, 1) === '/') {
        return p.substring(1);
      }

      return p;
    }
  }, {
    key: "getQualifiedName",
    value: function getQualifiedName() {
      return this.asRelative(this.path.toString());
    }
  }, {
    key: "getRelativeName",
    value: function getRelativeName() {
      var parent = this.getParent();
      var myPath = this.path;
      var relPath;
      var i;
      var parentPath = parent ? parent.path : new Path([]);

      if (parentPath.ancestorOf(myPath)) {
        relPath = new Path(myPath.elements());

        for (i = 0; i < parentPath.length; i += 1) {
          relPath.shift();
        }

        return this.asRelative(relPath.toString());
      }

      return this.asRelative(this.path.toString());
    }
  }, {
    key: "getParent",
    value: function getParent() {
      return this.parent;
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      return this.children;
    }
  }, {
    key: "isSummary",
    value: function isSummary() {
      return !this.fileCoverage;
    }
  }, {
    key: "getFileCoverage",
    value: function getFileCoverage() {
      return this.fileCoverage;
    }
  }, {
    key: "getCoverageSummary",
    value: function getCoverageSummary(filesOnly) {
      var cacheProp = "c_".concat(filesOnly ? 'files' : 'full');
      var summary;

      if (Object.prototype.hasOwnProperty.call(this, cacheProp)) {
        return this[cacheProp];
      }

      if (!this.isSummary()) {
        summary = this.getFileCoverage().toSummary();
      } else {
        var count = 0;
        summary = coverage.createCoverageSummary();
        this.getChildren().forEach(function (child) {
          if (filesOnly && child.isSummary()) {
            return;
          }

          count += 1;
          summary.merge(child.getCoverageSummary(filesOnly));
        });

        if (count === 0 && filesOnly) {
          summary = null;
        }
      }

      this[cacheProp] = summary;
      return summary;
    }
  }], [{
    key: "createRoot",
    value: function createRoot(children) {
      var root = new ReportNode(new Path([]));
      children.forEach(function (child) {
        root.addChild(child);
      });
      return root;
    }
  }]);

  return ReportNode;
}(BaseNode);

var ReportTree =
/*#__PURE__*/
function (_BaseTree) {
  _inherits(ReportTree, _BaseTree);

  function ReportTree(root, childPrefix) {
    var _this2;

    _classCallCheck(this, ReportTree);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ReportTree).call(this, root));

    var maybePrefix = function maybePrefix(node) {
      if (childPrefix && !node.isRoot()) {
        node.path.unshift(childPrefix);
      }
    };

    _this2.visit({
      onDetail: maybePrefix,
      onSummary: function onSummary(node) {
        maybePrefix(node);
        node.children.sort(function (a, b) {
          var astr = a.path.toString();
          var bstr = b.path.toString();
          return astr < bstr ? -1 : astr > bstr ? 1 :
          /* istanbul ignore next */
          0;
        });
      }
    });

    return _this2;
  }

  return ReportTree;
}(BaseTree);

function findCommonParent(paths) {
  return paths.reduce(function (common, path) {
    return common.commonPrefixPath(path);
  }, paths[0] || new Path([]));
}

function findOrCreateParent(parentPath, nodeMap) {
  var created = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
  var parent = nodeMap[parentPath.toString()];

  if (!parent) {
    parent = new ReportNode(parentPath);
    nodeMap[parentPath.toString()] = parent;
    created(parentPath, parent);
  }

  return parent;
}

function toDirParents(list) {
  var nodeMap = Object.create(null);
  list.forEach(function (o) {
    var parent = findOrCreateParent(o.path.parent(), nodeMap);
    parent.addChild(new ReportNode(o.path, o.fileCoverage));
  });
  return Object.values(nodeMap);
}

function addAllPaths(topPaths, nodeMap, path, node) {
  var parent = findOrCreateParent(path.parent(), nodeMap, function (parentPath, parent) {
    if (parentPath.hasParent()) {
      addAllPaths(topPaths, nodeMap, parentPath, parent);
    } else {
      topPaths.push(parent);
    }
  });
  parent.addChild(node);
}

function foldIntoOneDir(node, parent) {
  var children = node.children;

  if (children.length === 1 && !children[0].fileCoverage) {
    children[0].parent = parent;
    return foldIntoOneDir(children[0], parent);
  }

  node.children = children.map(function (child) {
    return foldIntoOneDir(child, node);
  });
  return node;
}

function pkgSummaryPrefix(dirParents, commonParent) {
  if (!dirParents.some(function (dp) {
    return dp.path.length === 0;
  })) {
    return;
  }

  if (commonParent.length === 0) {
    return 'root';
  }

  return commonParent.name();
}

var SummarizerFactory =
/*#__PURE__*/
function () {
  function SummarizerFactory(coverageMap) {
    var _this3 = this;

    var defaultSummarizer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pkg';

    _classCallCheck(this, SummarizerFactory);

    this._coverageMap = coverageMap;
    this._defaultSummarizer = defaultSummarizer;
    this._initialList = coverageMap.files().map(function (filePath) {
      return {
        filePath: filePath,
        path: new Path(filePath),
        fileCoverage: coverageMap.fileCoverageFor(filePath)
      };
    });
    this._commonParent = findCommonParent(this._initialList.map(function (o) {
      return o.path.parent();
    }));

    if (this._commonParent.length > 0) {
      this._initialList.forEach(function (o) {
        o.path.splice(0, _this3._commonParent.length);
      });
    }
  }

  _createClass(SummarizerFactory, [{
    key: "_createPkg",
    value: function _createPkg() {
      var dirParents = toDirParents(this._initialList);

      if (dirParents.length === 1) {
        return new ReportTree(dirParents[0]);
      }

      return new ReportTree(ReportNode.createRoot(dirParents), pkgSummaryPrefix(dirParents, this._commonParent));
    }
  }, {
    key: "_createNested",
    value: function _createNested() {
      var nodeMap = Object.create(null);
      var topPaths = [];

      this._initialList.forEach(function (o) {
        var node = new ReportNode(o.path, o.fileCoverage);
        addAllPaths(topPaths, nodeMap, o.path, node);
      });

      var topNodes = topPaths.map(function (node) {
        return foldIntoOneDir(node);
      });

      if (topNodes.length === 1) {
        return new ReportTree(topNodes[0]);
      }

      return new ReportTree(ReportNode.createRoot(topNodes));
    }
  }, {
    key: "defaultSummarizer",
    get: function get() {
      return this[this._defaultSummarizer];
    }
  }, {
    key: "flat",
    get: function get() {
      if (!this._flat) {
        this._flat = new ReportTree(ReportNode.createRoot(this._initialList.map(function (node) {
          return new ReportNode(node.path, node.fileCoverage);
        })));
      }

      return this._flat;
    }
  }, {
    key: "pkg",
    get: function get() {
      if (!this._pkg) {
        this._pkg = this._createPkg();
      }

      return this._pkg;
    }
  }, {
    key: "nested",
    get: function get() {
      if (!this._nested) {
        this._nested = this._createNested();
      }

      return this._nested;
    }
  }]);

  return SummarizerFactory;
}();

module.exports = SummarizerFactory;