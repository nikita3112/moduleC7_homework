/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
'use strict';
/**
 * An object with methods that are called during the traversal of the coverage tree.
 * A visitor has the following methods that are called during tree traversal.
 *
 *   * `onStart(root, state)` - called before traversal begins
 *   * `onSummary(node, state)` - called for every summary node
 *   * `onDetail(node, state)` - called for every detail node
 *   * `onSummaryEnd(node, state)` - called after all children have been visited for
 *      a summary node.
 *   * `onEnd(root, state)` - called after traversal ends
 *
 * @param delegate - a partial visitor that only implements the methods of interest
 *  The visitor object supplies the missing methods as noops. For example, reports
 *  that only need the final coverage summary need implement `onStart` and nothing
 *  else. Reports that use only detailed coverage information need implement `onDetail`
 *  and nothing else.
 * @constructor
 */

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Visitor = function Visitor(delegate) {
  _classCallCheck(this, Visitor);

  this.delegate = delegate;
};

['Start', 'End', 'Summary', 'SummaryEnd', 'Detail'].map(function (k) {
  return "on".concat(k);
}).forEach(function (fn) {
  Object.defineProperty(Visitor.prototype, fn, {
    writable: true,
    value: function value(node, state) {
      if (typeof this.delegate[fn] === 'function') {
        this.delegate[fn](node, state);
      }
    }
  });
});

var CompositeVisitor =
/*#__PURE__*/
function (_Visitor) {
  _inherits(CompositeVisitor, _Visitor);

  function CompositeVisitor(visitors) {
    var _this;

    _classCallCheck(this, CompositeVisitor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompositeVisitor).call(this));

    if (!Array.isArray(visitors)) {
      visitors = [visitors];
    }

    _this.visitors = visitors.map(function (v) {
      if (v instanceof Visitor) {
        return v;
      }

      return new Visitor(v);
    });
    return _this;
  }

  return CompositeVisitor;
}(Visitor);

['Start', 'Summary', 'SummaryEnd', 'Detail', 'End'].map(function (k) {
  return "on".concat(k);
}).forEach(function (fn) {
  Object.defineProperty(CompositeVisitor.prototype, fn, {
    value: function value(node, state) {
      this.visitors.forEach(function (v) {
        v[fn](node, state);
      });
    }
  });
});

var BaseNode =
/*#__PURE__*/
function () {
  function BaseNode() {
    _classCallCheck(this, BaseNode);
  }

  _createClass(BaseNode, [{
    key: "isRoot",
    value: function isRoot() {
      return !this.getParent();
    }
    /**
     * visit all nodes depth-first from this node down. Note that `onStart`
     * and `onEnd` are never called on the visitor even if the current
     * node is the root of the tree.
     * @param visitor a full visitor that is called during tree traversal
     * @param state optional state that is passed around
     */

  }, {
    key: "visit",
    value: function visit(visitor, state) {
      if (this.isSummary()) {
        visitor.onSummary(this, state);
      } else {
        visitor.onDetail(this, state);
      }

      this.getChildren().forEach(function (child) {
        child.visit(visitor, state);
      });

      if (this.isSummary()) {
        visitor.onSummaryEnd(this, state);
      }
    }
  }]);

  return BaseNode;
}();
/**
 * abstract base class for a coverage tree.
 * @constructor
 */


var BaseTree =
/*#__PURE__*/
function () {
  function BaseTree(root) {
    _classCallCheck(this, BaseTree);

    this.root = root;
  }
  /**
   * returns the root node of the tree
   */


  _createClass(BaseTree, [{
    key: "getRoot",
    value: function getRoot() {
      return this.root;
    }
    /**
     * visits the tree depth-first with the supplied partial visitor
     * @param visitor - a potentially partial visitor
     * @param state - the state to be passed around during tree traversal
     */

  }, {
    key: "visit",
    value: function visit(visitor, state) {
      if (!(visitor instanceof Visitor)) {
        visitor = new Visitor(visitor);
      }

      visitor.onStart(this.getRoot(), state);
      this.getRoot().visit(visitor, state);
      visitor.onEnd(this.getRoot(), state);
    }
  }]);

  return BaseTree;
}();

module.exports = {
  BaseTree: BaseTree,
  BaseNode: BaseNode,
  Visitor: Visitor,
  CompositeVisitor: CompositeVisitor
};