"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var impl = utils.implSymbol;
var ctorRegistry = utils.ctorRegistrySymbol;
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'DOMException'."));
  },
  create: function create(globalObject, constructorArgs, privateData) {
    if (globalObject[ctorRegistry] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    var ctor = globalObject[ctorRegistry]["DOMException"];

    if (ctor === undefined) {
      throw new Error("Internal error: constructor DOMException is not installed on the passed global object");
    }

    var obj = Object.create(ctor.prototype);
    obj = iface.setup(obj, globalObject, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(globalObject, constructorArgs, privateData) {
    var obj = iface.create(globalObject, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, globalObject) {
    var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    privateData.wrapper = obj;

    iface._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  install: function install(globalObject) {
    var _Object$definePropert;

    var DOMException =
    /*#__PURE__*/
    function () {
      function DOMException() {
        _classCallCheck(this, DOMException);

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to construct 'DOMException': parameter 1"
            });
          } else {
            curArg = "";
          }

          args.push(curArg);
        }
        {
          var _curArg = arguments[1];

          if (_curArg !== undefined) {
            _curArg = conversions["DOMString"](_curArg, {
              context: "Failed to construct 'DOMException': parameter 2"
            });
          } else {
            _curArg = "Error";
          }

          args.push(_curArg);
        }
        return iface.setup(Object.create((this instanceof DOMException ? this.constructor : void 0).prototype), globalObject, args);
      }

      _createClass(DOMException, [{
        key: "name",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return this[impl]["name"];
        }
      }, {
        key: "message",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return this[impl]["message"];
        }
      }, {
        key: "code",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return this[impl]["code"];
        }
      }]);

      return DOMException;
    }();

    Object.defineProperties(DOMException.prototype, (_Object$definePropert = {
      name: {
        enumerable: true
      },
      message: {
        enumerable: true
      },
      code: {
        enumerable: true
      }
    }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
      value: "DOMException",
      configurable: true
    }), _defineProperty(_Object$definePropert, "INDEX_SIZE_ERR", {
      value: 1,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "DOMSTRING_SIZE_ERR", {
      value: 2,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "HIERARCHY_REQUEST_ERR", {
      value: 3,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "WRONG_DOCUMENT_ERR", {
      value: 4,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INVALID_CHARACTER_ERR", {
      value: 5,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NO_DATA_ALLOWED_ERR", {
      value: 6,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NO_MODIFICATION_ALLOWED_ERR", {
      value: 7,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NOT_FOUND_ERR", {
      value: 8,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NOT_SUPPORTED_ERR", {
      value: 9,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INUSE_ATTRIBUTE_ERR", {
      value: 10,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INVALID_STATE_ERR", {
      value: 11,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "SYNTAX_ERR", {
      value: 12,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INVALID_MODIFICATION_ERR", {
      value: 13,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NAMESPACE_ERR", {
      value: 14,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INVALID_ACCESS_ERR", {
      value: 15,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "VALIDATION_ERR", {
      value: 16,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "TYPE_MISMATCH_ERR", {
      value: 17,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "SECURITY_ERR", {
      value: 18,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "NETWORK_ERR", {
      value: 19,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "ABORT_ERR", {
      value: 20,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "URL_MISMATCH_ERR", {
      value: 21,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "QUOTA_EXCEEDED_ERR", {
      value: 22,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "TIMEOUT_ERR", {
      value: 23,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "INVALID_NODE_TYPE_ERR", {
      value: 24,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "DATA_CLONE_ERR", {
      value: 25,
      enumerable: true
    }), _Object$definePropert));
    Object.defineProperties(DOMException, {
      INDEX_SIZE_ERR: {
        value: 1,
        enumerable: true
      },
      DOMSTRING_SIZE_ERR: {
        value: 2,
        enumerable: true
      },
      HIERARCHY_REQUEST_ERR: {
        value: 3,
        enumerable: true
      },
      WRONG_DOCUMENT_ERR: {
        value: 4,
        enumerable: true
      },
      INVALID_CHARACTER_ERR: {
        value: 5,
        enumerable: true
      },
      NO_DATA_ALLOWED_ERR: {
        value: 6,
        enumerable: true
      },
      NO_MODIFICATION_ALLOWED_ERR: {
        value: 7,
        enumerable: true
      },
      NOT_FOUND_ERR: {
        value: 8,
        enumerable: true
      },
      NOT_SUPPORTED_ERR: {
        value: 9,
        enumerable: true
      },
      INUSE_ATTRIBUTE_ERR: {
        value: 10,
        enumerable: true
      },
      INVALID_STATE_ERR: {
        value: 11,
        enumerable: true
      },
      SYNTAX_ERR: {
        value: 12,
        enumerable: true
      },
      INVALID_MODIFICATION_ERR: {
        value: 13,
        enumerable: true
      },
      NAMESPACE_ERR: {
        value: 14,
        enumerable: true
      },
      INVALID_ACCESS_ERR: {
        value: 15,
        enumerable: true
      },
      VALIDATION_ERR: {
        value: 16,
        enumerable: true
      },
      TYPE_MISMATCH_ERR: {
        value: 17,
        enumerable: true
      },
      SECURITY_ERR: {
        value: 18,
        enumerable: true
      },
      NETWORK_ERR: {
        value: 19,
        enumerable: true
      },
      ABORT_ERR: {
        value: 20,
        enumerable: true
      },
      URL_MISMATCH_ERR: {
        value: 21,
        enumerable: true
      },
      QUOTA_EXCEEDED_ERR: {
        value: 22,
        enumerable: true
      },
      TIMEOUT_ERR: {
        value: 23,
        enumerable: true
      },
      INVALID_NODE_TYPE_ERR: {
        value: 24,
        enumerable: true
      },
      DATA_CLONE_ERR: {
        value: 25,
        enumerable: true
      }
    });

    if (globalObject[ctorRegistry] === undefined) {
      globalObject[ctorRegistry] = Object.create(null);
    }

    globalObject[ctorRegistry]["DOMException"] = DOMException;
    Object.defineProperty(globalObject, "DOMException", {
      configurable: true,
      writable: true,
      value: DOMException
    });
  }
}; // iface

module.exports = iface;

var Impl = require("./DOMException-impl.js");