"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _core = require("@babel/core");

var _schema = require("@istanbuljs/schema");

var _visitor = _interopRequireDefault(require("./visitor"));

var _readCoverage = _interopRequireDefault(require("./read-coverage"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
 Copyright 2012-2015, Yahoo Inc.
 Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Instrumenter is the public API for the instrument library.
 * It is typically used for ES5 code. For ES6 code that you
 * are already running under `babel` use the coverage plugin
 * instead.
 * @param {Object} opts optional.
 * @param {string} [opts.coverageVariable=__coverage__] name of global coverage variable.
 * @param {boolean} [opts.preserveComments=false] preserve comments in output
 * @param {boolean} [opts.compact=true] generate compact code.
 * @param {boolean} [opts.esModules=false] set to true to instrument ES6 modules.
 * @param {boolean} [opts.autoWrap=false] set to true to allow `return` statements outside of functions.
 * @param {boolean} [opts.produceSourceMap=false] set to true to produce a source map for the instrumented code.
 * @param {Array} [opts.ignoreClassMethods=[]] set to array of class method names to ignore for coverage.
 * @param {Function} [opts.sourceMapUrlCallback=null] a callback function that is called when a source map URL
 *     is found in the original code. This function is called with the source file name and the source map URL.
 * @param {boolean} [opts.debug=false] - turn debugging on
 * @param {array} [opts.parserPlugins] - set babel parser plugins, see @istanbuljs/schema for defaults.
 */


var Instrumenter =
/*#__PURE__*/
function () {
  function Instrumenter() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Instrumenter);

    this.opts = _objectSpread({}, _schema.defaults.instrumenter, {}, opts);
    this.fileCoverage = null;
    this.sourceMap = null;
  }
  /**
   * instrument the supplied code and track coverage against the supplied
   * filename. It throws if invalid code is passed to it. ES5 and ES6 syntax
   * is supported. To instrument ES6 modules, make sure that you set the
   * `esModules` property to `true` when creating the instrumenter.
   *
   * @param {string} code - the code to instrument
   * @param {string} filename - the filename against which to track coverage.
   * @param {object} [inputSourceMap] - the source map that maps the not instrumented code back to it's original form.
   * Is assigned to the coverage object and therefore, is available in the json output and can be used to remap the
   * coverage to the untranspiled source.
   * @returns {string} the instrumented code.
   */


  _createClass(Instrumenter, [{
    key: "instrumentSync",
    value: function instrumentSync(code, filename, inputSourceMap) {
      if (typeof code !== 'string') {
        throw new Error('Code must be a string');
      }

      filename = filename || String(new Date().getTime()) + '.js';
      var opts = this.opts;
      var output = {};
      var babelOpts = {
        configFile: false,
        babelrc: false,
        ast: true,
        filename: filename || String(new Date().getTime()) + '.js',
        inputSourceMap: inputSourceMap,
        sourceMaps: opts.produceSourceMap,
        compact: opts.compact,
        comments: opts.preserveComments,
        parserOpts: {
          allowReturnOutsideFunction: opts.autoWrap,
          sourceType: opts.esModules ? 'module' : 'script',
          plugins: opts.parserPlugins
        },
        plugins: [[function (_ref) {
          var types = _ref.types;
          var ee = (0, _visitor["default"])(types, filename, {
            coverageVariable: opts.coverageVariable,
            coverageGlobalScope: opts.coverageGlobalScope,
            coverageGlobalScopeFunc: opts.coverageGlobalScopeFunc,
            ignoreClassMethods: opts.ignoreClassMethods,
            inputSourceMap: inputSourceMap
          });
          return {
            visitor: {
              Program: {
                enter: ee.enter,
                exit: function exit(path) {
                  output = ee.exit(path);
                }
              }
            }
          };
        }]]
      };
      var codeMap = (0, _core.transformSync)(code, babelOpts);

      if (!output || !output.fileCoverage) {
        var initialCoverage = (0, _readCoverage["default"])(codeMap.ast) ||
        /* istanbul ignore next: paranoid check */
        {};
        this.fileCoverage = initialCoverage.coverageData;
        this.sourceMap = inputSourceMap;
        return code;
      }

      this.fileCoverage = output.fileCoverage;
      this.sourceMap = codeMap.map;
      var cb = this.opts.sourceMapUrlCallback;

      if (cb && output.sourceMappingURL) {
        cb(filename, output.sourceMappingURL);
      }

      return codeMap.code;
    }
    /**
     * callback-style instrument method that calls back with an error
     * as opposed to throwing one. Note that in the current implementation,
     * the callback will be called in the same process tick and is not asynchronous.
     *
     * @param {string} code - the code to instrument
     * @param {string} filename - the filename against which to track coverage.
     * @param {Function} callback - the callback
     * @param {Object} inputSourceMap - the source map that maps the not instrumented code back to it's original form.
     * Is assigned to the coverage object and therefore, is available in the json output and can be used to remap the
     * coverage to the untranspiled source.
     */

  }, {
    key: "instrument",
    value: function instrument(code, filename, callback, inputSourceMap) {
      if (!callback && typeof filename === 'function') {
        callback = filename;
        filename = null;
      }

      try {
        var out = this.instrumentSync(code, filename, inputSourceMap);
        callback(null, out);
      } catch (ex) {
        callback(ex);
      }
    }
    /**
     * returns the file coverage object for the last file instrumented.
     * @returns {Object} the file coverage object.
     */

  }, {
    key: "lastFileCoverage",
    value: function lastFileCoverage() {
      return this.fileCoverage;
    }
    /**
     * returns the source map produced for the last file instrumented.
     * @returns {null|Object} the source map object.
     */

  }, {
    key: "lastSourceMap",
    value: function lastSourceMap() {
      return this.sourceMap;
    }
  }]);

  return Instrumenter;
}();

var _default = Instrumenter;
exports["default"] = _default;