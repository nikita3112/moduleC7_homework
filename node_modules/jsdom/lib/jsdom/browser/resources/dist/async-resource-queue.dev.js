"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var QueueItem = function QueueItem(onLoad, onError, dependentItem) {
  _classCallCheck(this, QueueItem);

  this.onLoad = onLoad;
  this.onError = onError;
  this.data = null;
  this.error = null;
  this.dependentItem = dependentItem;
};
/**
 * AsyncResourceQueue is the queue in charge of run the async scripts
 * and notify when they finish.
 */


module.exports =
/*#__PURE__*/
function () {
  function AsyncResourceQueue() {
    _classCallCheck(this, AsyncResourceQueue);

    this.items = new Set();
    this.dependentItems = new Set();
  }

  _createClass(AsyncResourceQueue, [{
    key: "count",
    value: function count() {
      return this.items.size + this.dependentItems.size;
    }
  }, {
    key: "_notify",
    value: function _notify() {
      if (this._listener) {
        this._listener();
      }
    }
  }, {
    key: "_check",
    value: function _check(item) {
      var _this = this;

      var promise;

      if (item.onError && item.error) {
        promise = item.onError(item.error);
      } else if (item.onLoad && item.data) {
        promise = item.onLoad(item.data);
      }

      promise.then(function () {
        _this.items["delete"](item);

        _this.dependentItems["delete"](item);

        if (_this.count() === 0) {
          _this._notify();
        }
      });
    }
  }, {
    key: "setListener",
    value: function setListener(listener) {
      this._listener = listener;
    }
  }, {
    key: "push",
    value: function push(request, onLoad, onError, dependentItem) {
      var q = this;
      var item = new QueueItem(onLoad, onError, dependentItem);
      q.items.add(item);
      return request.then(function (data) {
        item.data = data;

        if (dependentItem && !dependentItem.finished) {
          q.dependentItems.add(item);
          return q.items["delete"](item);
        }

        if (onLoad) {
          return q._check(item);
        }

        q.items["delete"](item);

        if (q.count() === 0) {
          q._notify();
        }

        return null;
      })["catch"](function (err) {
        item.error = err;

        if (dependentItem && !dependentItem.finished) {
          q.dependentItems.add(item);
          return q.items["delete"](item);
        }

        if (onError) {
          return q._check(item);
        }

        q.items["delete"](item);

        if (q.count() === 0) {
          q._notify();
        }

        return null;
      });
    }
  }, {
    key: "notifyItem",
    value: function notifyItem(syncItem) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.dependentItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (item.dependentItem === syncItem) {
            this._check(item);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return AsyncResourceQueue;
}();