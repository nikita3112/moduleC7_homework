"use strict";
/**
 * Manage all the request and it is able to abort
 * all pending request.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function RequestManager() {
    _classCallCheck(this, RequestManager);

    this.openedRequests = [];
  }

  _createClass(RequestManager, [{
    key: "add",
    value: function add(req) {
      this.openedRequests.push(req);
    }
  }, {
    key: "remove",
    value: function remove(req) {
      var idx = this.openedRequests.indexOf(req);

      if (idx !== -1) {
        this.openedRequests.splice(idx, 1);
      }
    }
  }, {
    key: "close",
    value: function close() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.openedRequests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var openedRequest = _step.value;
          openedRequest.abort();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.openedRequests = [];
    }
  }, {
    key: "size",
    value: function size() {
      return this.openedRequests.length;
    }
  }]);

  return RequestManager;
}();