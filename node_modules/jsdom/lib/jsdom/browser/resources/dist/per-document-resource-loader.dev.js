"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../../living/generated/utils");

var _require = require("../../living/helpers/events"),
    fireAnEvent = _require.fireAnEvent;

module.exports =
/*#__PURE__*/
function () {
  function PerDocumentResourceLoader(document) {
    _classCallCheck(this, PerDocumentResourceLoader);

    this._document = document;
    this._defaultEncoding = document._encoding;
    this._resourceLoader = document._defaultView ? document._defaultView._resourceLoader : null;
    this._requestManager = document._requestManager;
    this._queue = document._queue;
    this._deferQueue = document._deferQueue;
    this._asyncQueue = document._asyncQueue;
  }

  _createClass(PerDocumentResourceLoader, [{
    key: "fetch",
    value: function fetch(url, _ref) {
      var _this = this;

      var element = _ref.element,
          onLoad = _ref.onLoad,
          onError = _ref.onError;

      var request = this._resourceLoader.fetch(url, {
        cookieJar: this._document._cookieJar,
        element: idlUtils.wrapperForImpl(element),
        referrer: this._document.URL
      });

      if (request === null) {
        return null;
      }

      this._requestManager.add(request);

      var onErrorWrapped = function onErrorWrapped(error) {
        _this._requestManager.remove(request);

        if (onError) {
          onError(error);
        }

        fireAnEvent("error", element);
        var err = new Error("Could not load ".concat(element.localName, ": \"").concat(url, "\""));
        err.type = "resource loading";
        err.detail = error;

        _this._document._defaultView._virtualConsole.emit("jsdomError", err);

        return Promise.resolve();
      };

      var onLoadWrapped = function onLoadWrapped(data) {
        _this._requestManager.remove(request);

        _this._addCookies(url, request.response ? request.response.headers : {});

        try {
          var result = onLoad ? onLoad(data) : undefined;
          return Promise.resolve(result).then(function () {
            fireAnEvent("load", element);
            return Promise.resolve();
          })["catch"](function (err) {
            return onErrorWrapped(err);
          });
        } catch (err) {
          return onErrorWrapped(err);
        }
      };

      if (element.localName === "script" && element.hasAttributeNS(null, "async")) {
        this._asyncQueue.push(request, onLoadWrapped, onErrorWrapped, this._queue.getLastScript());
      } else if (element.localName === "script" && element.hasAttributeNS(null, "defer")) {
        this._deferQueue.push(request, onLoadWrapped, onErrorWrapped, false, element);
      } else {
        this._queue.push(request, onLoadWrapped, onErrorWrapped, false, element);
      }

      return request;
    }
  }, {
    key: "_addCookies",
    value: function _addCookies(url, headers) {
      var _this2 = this;

      var cookies = headers["set-cookie"];

      if (!cookies) {
        return;
      }

      if (!Array.isArray(cookies)) {
        cookies = [cookies];
      }

      cookies.forEach(function (cookie) {
        _this2._document._cookieJar.setCookieSync(cookie, url, {
          http: true,
          ignoreError: true
        });
      });
    }
  }]);

  return PerDocumentResourceLoader;
}();