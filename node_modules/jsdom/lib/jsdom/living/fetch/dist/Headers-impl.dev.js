"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("./header-types"),
    isForbidden = _require.isForbidden,
    isForbiddenResponse = _require.isForbiddenResponse,
    isPrivilegedNoCORSRequest = _require.isPrivilegedNoCORSRequest,
    isNoCORSSafelistedRequest = _require.isNoCORSSafelistedRequest,
    isCORSWhitelisted = _require.isCORSWhitelisted;

var HeaderList = require("./header-list");

function assertName(name) {
  if (!name.match(/^[!#$%&'*+\-.^`|~\w]+$/)) {
    throw new TypeError("name is invalid");
  }
}

function assertValue(value) {
  if (value.match(/[\0\r\n]/)) {
    throw new TypeError("value is invalid");
  }
}

var HeadersImpl =
/*#__PURE__*/
function () {
  function HeadersImpl(globalObject, args) {
    _classCallCheck(this, HeadersImpl);

    this.guard = "none";
    this.headersList = new HeaderList();

    if (args[0]) {
      this._fill(args[0]);
    }
  }

  _createClass(HeadersImpl, [{
    key: "_fill",
    value: function _fill(init) {
      if (Array.isArray(init)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = init[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var header = _step.value;

            if (header.length !== 2) {
              throw new TypeError("init is invalid");
            }

            this.append(header[0], header[1]);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        for (var _i = 0, _Object$keys = Object.keys(init); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          this.append(key, init[key]);
        }
      }
    }
  }, {
    key: "has",
    value: function has(name) {
      assertName(name);
      return this.headersList.contains(name);
    }
  }, {
    key: "get",
    value: function get(name) {
      assertName(name);
      return this.headersList.get(name);
    }
  }, {
    key: "_removePrivilegedNoCORSHeaders",
    value: function _removePrivilegedNoCORSHeaders() {
      this.headersList["delete"]("range");
    }
  }, {
    key: "append",
    value: function append(name, value) {
      value = value.trim();
      assertName(name);
      assertValue(value);

      switch (this.guard) {
        case "immutable":
          throw new TypeError("Headers is immutable");

        case "request":
          if (isForbidden(name)) {
            return;
          }

          break;

        case "request-no-cors":
          {
            var temporaryValue = this.get(name);

            if (temporaryValue === null) {
              temporaryValue = value;
            } else {
              temporaryValue += ", ".concat(value);
            }

            if (!isCORSWhitelisted(name, value)) {
              return;
            }

            break;
          }

        case "response":
          if (isForbiddenResponse(name)) {
            return;
          }

          break;
      }

      this.headersList.append(name, value);

      this._removePrivilegedNoCORSHeaders();
    }
  }, {
    key: "set",
    value: function set(name, value) {
      value = value.trim();
      assertName(name);
      assertValue(value);

      switch (this.guard) {
        case "immutable":
          throw new TypeError("Headers is immutable");

        case "request":
          if (isForbidden(name)) {
            return;
          }

          break;

        case "request-no-cors":
          {
            if (!isCORSWhitelisted(name, value)) {
              return;
            }

            break;
          }

        case "response":
          if (isForbiddenResponse(name)) {
            return;
          }

          break;
      }

      this.headersList.set(name, value);

      this._removePrivilegedNoCORSHeaders();
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      assertName(name);

      switch (this.guard) {
        case "immutable":
          throw new TypeError("Headers is immutable");

        case "request":
          if (isForbidden(name)) {
            return;
          }

          break;

        case "request-no-cors":
          {
            if (!isNoCORSSafelistedRequest(name) && !isPrivilegedNoCORSRequest(name)) {
              return;
            }

            break;
          }

        case "response":
          if (isForbiddenResponse(name)) {
            return;
          }

          break;
      }

      this.headersList["delete"](name);

      this._removePrivilegedNoCORSHeaders();
    }
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, header;

      return regeneratorRuntime.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 3;
              _iterator2 = this.headersList.sortAndCombine()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 12;
                break;
              }

              header = _step2.value;
              _context.next = 9;
              return header;

            case 9:
              _iteratorNormalCompletion2 = true;
              _context.next = 5;
              break;

            case 12:
              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError2) {
                _context.next = 24;
                break;
              }

              throw _iteratorError2;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }]);

  return HeadersImpl;
}();

exports.implementation = HeadersImpl;