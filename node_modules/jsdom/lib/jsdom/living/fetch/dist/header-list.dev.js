"use strict";
/**
 * Provides some utility functions for somewhat efficiently modifying a
 * collection of headers.
 *
 * Note that this class only operates on ByteStrings (which is also why we use
 * toLowerCase internally).
 */

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HeaderList =
/*#__PURE__*/
function () {
  function HeaderList() {
    _classCallCheck(this, HeaderList);

    this.headers = new Map();
  }

  _createClass(HeaderList, [{
    key: "append",
    value: function append(name, value) {
      var existing = this.headers.get(name.toLowerCase());

      if (existing) {
        name = existing[0].name;
        existing.push({
          name: name,
          value: value
        });
      } else {
        this.headers.set(name.toLowerCase(), [{
          name: name,
          value: value
        }]);
      }
    }
  }, {
    key: "contains",
    value: function contains(name) {
      return this.headers.has(name.toLowerCase());
    }
  }, {
    key: "get",
    value: function get(name) {
      name = name.toLowerCase();
      var values = this.headers.get(name);

      if (!values) {
        return null;
      }

      return values.map(function (h) {
        return h.value;
      }).join(", ");
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      this.headers["delete"](name.toLowerCase());
    }
  }, {
    key: "set",
    value: function set(name, value) {
      var lowerName = name.toLowerCase();
      this.headers["delete"](lowerName);
      this.headers.set(lowerName, [{
        name: name,
        value: value
      }]);
    }
  }, {
    key: "sortAndCombine",
    value: function sortAndCombine() {
      var _this = this;

      var names = _toConsumableArray(this.headers.keys()).sort();

      return names.map(function (n) {
        return [n, _this.get(n)];
      });
    }
  }]);

  return HeaderList;
}();

module.exports = HeaderList;