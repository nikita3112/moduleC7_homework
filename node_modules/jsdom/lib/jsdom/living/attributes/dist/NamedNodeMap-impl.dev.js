"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DOMException = require("domexception/webidl2js-wrapper");

var idlUtils = require("../generated/utils.js");

var attributes = require("../attributes.js");

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS;

exports.implementation =
/*#__PURE__*/
function () {
  function NamedNodeMapImpl(globalObject, args, privateData) {
    _classCallCheck(this, NamedNodeMapImpl);

    this._element = privateData.element;
    this._globalObject = globalObject;
  }

  _createClass(NamedNodeMapImpl, [{
    key: "item",
    value: function item(index) {
      if (index >= this._attributeList.length) {
        return null;
      }

      return this._attributeList[index];
    }
  }, {
    key: "getNamedItem",
    value: function getNamedItem(qualifiedName) {
      return attributes.getAttributeByName(this._element, qualifiedName);
    }
  }, {
    key: "getNamedItemNS",
    value: function getNamedItemNS(namespace, localName) {
      return attributes.getAttributeByNameNS(this._element, namespace, localName);
    }
  }, {
    key: "setNamedItem",
    value: function setNamedItem(attr) {
      // eslint-disable-next-line no-restricted-properties
      return attributes.setAttribute(this._element, attr);
    }
  }, {
    key: "setNamedItemNS",
    value: function setNamedItemNS(attr) {
      // eslint-disable-next-line no-restricted-properties
      return attributes.setAttribute(this._element, attr);
    }
  }, {
    key: "removeNamedItem",
    value: function removeNamedItem(qualifiedName) {
      var attr = attributes.removeAttributeByName(this._element, qualifiedName);

      if (attr === null) {
        throw DOMException.create(this._globalObject, ["Tried to remove an attribute that was not present", "NotFoundError"]);
      }

      return attr;
    }
  }, {
    key: "removeNamedItemNS",
    value: function removeNamedItemNS(namespace, localName) {
      var attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);

      if (attr === null) {
        throw DOMException.create(this._globalObject, ["Tried to remove an attribute that was not present", "NotFoundError"]);
      }

      return attr;
    }
  }, {
    key: "_attributeList",
    get: function get() {
      return this._element._attributeList;
    }
  }, {
    key: idlUtils.supportedPropertyIndices,
    get: function get() {
      return this._attributeList.keys();
    }
  }, {
    key: "length",
    get: function get() {
      return this._attributeList.length;
    }
  }, {
    key: idlUtils.supportedPropertyNames,
    get: function get() {
      var names = new Set(this._attributeList.map(function (a) {
        return a._qualifiedName;
      }));
      var el = this._element;

      if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === "html") {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = names[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;
            var lowercaseName = name.toLowerCase();

            if (lowercaseName !== name) {
              names["delete"](name);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return names;
    }
  }]);

  return NamedNodeMapImpl;
}();