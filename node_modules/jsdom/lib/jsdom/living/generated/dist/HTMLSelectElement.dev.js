"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var HTMLConstructor_helpers_html_constructor = require("../helpers/html-constructor.js").HTMLConstructor;

var HTMLOptionElement = require("./HTMLOptionElement.js");

var HTMLOptGroupElement = require("./HTMLOptGroupElement.js");

var HTMLElement = require("./HTMLElement.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var parseNonNegativeInteger_helpers_strings = require("../helpers/strings.js").parseNonNegativeInteger;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "HTMLSelectElement";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'HTMLSelectElement'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["HTMLSelectElement"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLSelectElement is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

function makeProxy(wrapper, globalObject) {
  var proxyHandler = proxyHandlerCache.get(globalObject);

  if (proxyHandler === undefined) {
    proxyHandler = new ProxyHandler(globalObject);
    proxyHandlerCache.set(globalObject, proxyHandler);
  }

  return new Proxy(wrapper, proxyHandler);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  HTMLElement._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper = makeProxy(wrapper, globalObject);
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper = makeProxy(wrapper, globalObject);
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.HTMLElement === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLSelectElement before HTMLElement");
  }

  var HTMLSelectElement =
  /*#__PURE__*/
  function (_globalObject$HTMLEle) {
    _inherits(HTMLSelectElement, _globalObject$HTMLEle);

    function HTMLSelectElement() {
      var _this;

      _classCallCheck(this, HTMLSelectElement);

      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLSelectElement ? this.constructor : void 0));
    }

    _createClass(HTMLSelectElement, [{
      key: "item",
      value: function item(index) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'item' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'item' on 'HTMLSelectElement': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).item.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "namedItem",
      value: function namedItem(name) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'namedItem' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'namedItem' on 'HTMLSelectElement': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).namedItem.apply(_esValue$implSymbol2, args));
      }
    }, {
      key: "add",
      value: function add(element) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'add' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (HTMLOptionElement.is(curArg) || HTMLOptGroupElement.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            throw new TypeError("Failed to execute 'add' on 'HTMLSelectElement': parameter 1" + " is not of any supported type.");
          }

          args.push(curArg);
        }
        {
          var _curArg = arguments[1];

          if (_curArg !== undefined) {
            if (_curArg === null || _curArg === undefined) {
              _curArg = null;
            } else {
              if (HTMLElement.is(_curArg)) {
                _curArg = utils.implForWrapper(_curArg);
              } else if (typeof _curArg === "number") {
                _curArg = conversions["long"](_curArg, {
                  context: "Failed to execute 'add' on 'HTMLSelectElement': parameter 2"
                });
              } else {
                _curArg = conversions["long"](_curArg, {
                  context: "Failed to execute 'add' on 'HTMLSelectElement': parameter 2"
                });
              }
            }
          } else {
            _curArg = null;
          }

          args.push(_curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol3;

          return (_esValue$implSymbol3 = esValue[implSymbol]).add.apply(_esValue$implSymbol3, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        switch (arguments.length) {
          case 0:
            break;

          default:
            {
              var curArg = arguments[0];
              curArg = conversions["long"](curArg, {
                context: "Failed to execute 'remove' on 'HTMLSelectElement': parameter 1"
              });
              args.push(curArg);
            }
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol4;

          return (_esValue$implSymbol4 = esValue[implSymbol]).remove.apply(_esValue$implSymbol4, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "checkValidity",
      value: function checkValidity() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].checkValidity();
      }
    }, {
      key: "reportValidity",
      value: function reportValidity() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].reportValidity();
      }
    }, {
      key: "setCustomValidity",
      value: function setCustomValidity(error) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setCustomValidity' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'setCustomValidity' on 'HTMLSelectElement': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).setCustomValidity.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "autofocus",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "autofocus");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'autofocus' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "autofocus", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "autofocus");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "disabled",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "disabled");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'disabled' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "disabled", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "disabled");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "form",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["form"]);
      }
    }, {
      key: "multiple",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "multiple");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'multiple' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "multiple", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "multiple");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "name",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "name");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'name' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "name", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "required",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "required");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'required' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "required", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "required");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "size",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "size");

          if (value === null) {
            return 0;
          }

          value = parseNonNegativeInteger_helpers_strings(value);
          return value !== null && value >= 0 && value <= 2147483647 ? value : 0;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'size' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var n = V <= 2147483647 ? V : 0;
          esValue[implSymbol].setAttributeNS(null, "size", String(n));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "type",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["type"];
      }
    }, {
      key: "options",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "options", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["options"]);
        });
      }
    }, {
      key: "length",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["length"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'length' property on 'HTMLSelectElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["length"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "selectedOptions",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "selectedOptions", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["selectedOptions"]);
        });
      }
    }, {
      key: "selectedIndex",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["selectedIndex"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["long"](V, {
          context: "Failed to set the 'selectedIndex' property on 'HTMLSelectElement': The provided value"
        });
        esValue[implSymbol]["selectedIndex"] = V;
      }
    }, {
      key: "value",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["value"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'value' property on 'HTMLSelectElement': The provided value"
        });
        esValue[implSymbol]["value"] = V;
      }
    }, {
      key: "willValidate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["willValidate"];
      }
    }, {
      key: "validity",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["validity"]);
      }
    }, {
      key: "validationMessage",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["validationMessage"];
      }
    }, {
      key: "labels",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["labels"]);
      }
    }]);

    return HTMLSelectElement;
  }(globalObject.HTMLElement);

  Object.defineProperties(HTMLSelectElement.prototype, (_Object$definePropert = {
    item: {
      enumerable: true
    },
    namedItem: {
      enumerable: true
    },
    add: {
      enumerable: true
    },
    remove: {
      enumerable: true
    },
    checkValidity: {
      enumerable: true
    },
    reportValidity: {
      enumerable: true
    },
    setCustomValidity: {
      enumerable: true
    },
    autofocus: {
      enumerable: true
    },
    disabled: {
      enumerable: true
    },
    form: {
      enumerable: true
    },
    multiple: {
      enumerable: true
    },
    name: {
      enumerable: true
    },
    required: {
      enumerable: true
    },
    size: {
      enumerable: true
    },
    type: {
      enumerable: true
    },
    options: {
      enumerable: true
    },
    length: {
      enumerable: true
    },
    selectedOptions: {
      enumerable: true
    },
    selectedIndex: {
      enumerable: true
    },
    value: {
      enumerable: true
    },
    willValidate: {
      enumerable: true
    },
    validity: {
      enumerable: true
    },
    validationMessage: {
      enumerable: true
    },
    labels: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "HTMLSelectElement",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.iterator, {
    value: Array.prototype[Symbol.iterator],
    configurable: true,
    writable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = HTMLSelectElement;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLSelectElement
  });
};

var proxyHandlerCache = new WeakMap();

var ProxyHandler =
/*#__PURE__*/
function () {
  function ProxyHandler(globalObject) {
    _classCallCheck(this, ProxyHandler);

    this._globalObject = globalObject;
  }

  _createClass(ProxyHandler, [{
    key: "get",
    value: function get(target, P, receiver) {
      if (_typeof(P) === "symbol") {
        return Reflect.get(target, P, receiver);
      }

      var desc = this.getOwnPropertyDescriptor(target, P);

      if (desc === undefined) {
        var parent = Object.getPrototypeOf(target);

        if (parent === null) {
          return undefined;
        }

        return Reflect.get(target, P, receiver);
      }

      if (!desc.get && !desc.set) {
        return desc.value;
      }

      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return Reflect.apply(getter, receiver, []);
    }
  }, {
    key: "has",
    value: function has(target, P) {
      if (_typeof(P) === "symbol") {
        return Reflect.has(target, P);
      }

      var desc = this.getOwnPropertyDescriptor(target, P);

      if (desc !== undefined) {
        return true;
      }

      var parent = Object.getPrototypeOf(target);

      if (parent !== null) {
        return Reflect.has(parent, P);
      }

      return false;
    }
  }, {
    key: "ownKeys",
    value: function ownKeys(target) {
      var keys = new Set();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = target[implSymbol][utils.supportedPropertyIndices][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;
          keys.add("".concat(key));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Reflect.ownKeys(target)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _key = _step2.value;
          keys.add(_key);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return _toConsumableArray(keys);
    }
  }, {
    key: "getOwnPropertyDescriptor",
    value: function getOwnPropertyDescriptor(target, P) {
      if (_typeof(P) === "symbol") {
        return Reflect.getOwnPropertyDescriptor(target, P);
      }

      var ignoreNamedProps = false;

      if (utils.isArrayIndexPropName(P)) {
        var index = P >>> 0;
        var indexedValue = target[implSymbol].item(index);

        if (indexedValue !== null) {
          return {
            writable: true,
            enumerable: true,
            configurable: true,
            value: utils.tryWrapperForImpl(indexedValue)
          };
        }

        ignoreNamedProps = true;
      }

      return Reflect.getOwnPropertyDescriptor(target, P);
    }
  }, {
    key: "set",
    value: function set(target, P, V, receiver) {
      if (_typeof(P) === "symbol") {
        return Reflect.set(target, P, V, receiver);
      }

      if (target === receiver) {
        var globalObject = this._globalObject;

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          var indexedValue = V;

          if (indexedValue === null || indexedValue === undefined) {
            indexedValue = null;
          } else {
            indexedValue = HTMLOptionElement.convert(indexedValue, {
              context: "Failed to set the " + index + " property on 'HTMLSelectElement': The provided value"
            });
          }

          ceReactionsPreSteps_helpers_custom_elements(globalObject);

          try {
            var creating = !(target[implSymbol].item(index) !== null);

            if (creating) {
              target[implSymbol][utils.indexedSetNew](index, indexedValue);
            } else {
              target[implSymbol][utils.indexedSetExisting](index, indexedValue);
            }
          } finally {
            ceReactionsPostSteps_helpers_custom_elements(globalObject);
          }

          return true;
        }
      }

      var ownDesc;

      if (utils.isArrayIndexPropName(P)) {
        var _index = P >>> 0;

        var _indexedValue = target[implSymbol].item(_index);

        if (_indexedValue !== null) {
          ownDesc = {
            writable: true,
            enumerable: true,
            configurable: true,
            value: utils.tryWrapperForImpl(_indexedValue)
          };
        }
      }

      if (ownDesc === undefined) {
        ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
      }

      if (ownDesc === undefined) {
        var parent = Reflect.getPrototypeOf(target);

        if (parent !== null) {
          return Reflect.set(parent, P, V, receiver);
        }

        ownDesc = {
          writable: true,
          enumerable: true,
          configurable: true,
          value: undefined
        };
      }

      if (!ownDesc.writable) {
        return false;
      }

      if (!utils.isObject(receiver)) {
        return false;
      }

      var existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
      var valueDesc;

      if (existingDesc !== undefined) {
        if (existingDesc.get || existingDesc.set) {
          return false;
        }

        if (!existingDesc.writable) {
          return false;
        }

        valueDesc = {
          value: V
        };
      } else {
        valueDesc = {
          writable: true,
          enumerable: true,
          configurable: true,
          value: V
        };
      }

      return Reflect.defineProperty(receiver, P, valueDesc);
    }
  }, {
    key: "defineProperty",
    value: function defineProperty(target, P, desc) {
      if (_typeof(P) === "symbol") {
        return Reflect.defineProperty(target, P, desc);
      }

      var globalObject = this._globalObject;

      if (utils.isArrayIndexPropName(P)) {
        if (desc.get || desc.set) {
          return false;
        }

        var index = P >>> 0;
        var indexedValue = desc.value;

        if (indexedValue === null || indexedValue === undefined) {
          indexedValue = null;
        } else {
          indexedValue = HTMLOptionElement.convert(indexedValue, {
            context: "Failed to set the " + index + " property on 'HTMLSelectElement': The provided value"
          });
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var creating = !(target[implSymbol].item(index) !== null);

          if (creating) {
            target[implSymbol][utils.indexedSetNew](index, indexedValue);
          } else {
            target[implSymbol][utils.indexedSetExisting](index, indexedValue);
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }

        return true;
      }

      return Reflect.defineProperty(target, P, desc);
    }
  }, {
    key: "deleteProperty",
    value: function deleteProperty(target, P) {
      if (_typeof(P) === "symbol") {
        return Reflect.deleteProperty(target, P);
      }

      var globalObject = this._globalObject;

      if (utils.isArrayIndexPropName(P)) {
        var index = P >>> 0;
        return !(target[implSymbol].item(index) !== null);
      }

      return Reflect.deleteProperty(target, P);
    }
  }, {
    key: "preventExtensions",
    value: function preventExtensions() {
      return false;
    }
  }]);

  return ProxyHandler;
}();

var Impl = require("../nodes/HTMLSelectElement-impl.js");