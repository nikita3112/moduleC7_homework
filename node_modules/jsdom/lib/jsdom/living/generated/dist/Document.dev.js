"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var ElementCreationOptions = require("./ElementCreationOptions.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var Node = require("./Node.js");

var NodeFilter = require("./NodeFilter.js");

var HTMLElement = require("./HTMLElement.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Document";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Document'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Document"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Document is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  Node._internalSetup(wrapper, globalObject);

  Object.defineProperties(wrapper, Object.getOwnPropertyDescriptors({
    get location() {
      var esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(esValue[implSymbol]["location"]);
    },

    set location(V) {
      var esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("Illegal invocation");
      }

      var Q = esValue["location"];

      if (!utils.isObject(Q)) {
        throw new TypeError("Property 'location' is not an object");
      }

      Reflect.set(Q, "href", V);
    }

  }));
  Object.defineProperties(wrapper, {
    location: {
      configurable: false
    }
  });
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.Node === undefined) {
    throw new Error("Internal error: attempting to evaluate Document before Node");
  }

  var Document =
  /*#__PURE__*/
  function (_globalObject$Node) {
    _inherits(Document, _globalObject$Node);

    function Document() {
      var _this;

      _classCallCheck(this, Document);

      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof Document ? this.constructor : void 0).prototype), globalObject, undefined));
    }

    _createClass(Document, [{
      key: "getElementsByTagName",
      value: function getElementsByTagName(qualifiedName) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementsByTagName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByTagName' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getElementsByTagName.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "getElementsByTagNameNS",
      value: function getElementsByTagNameNS(namespace, localName) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'getElementsByTagNameNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["DOMString"](_curArg, {
            context: "Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 2"
          });
          args.push(_curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).getElementsByTagNameNS.apply(_esValue$implSymbol2, args));
      }
    }, {
      key: "getElementsByClassName",
      value: function getElementsByClassName(classNames) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementsByClassName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByClassName' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).getElementsByClassName.apply(_esValue$implSymbol3, args));
      }
    }, {
      key: "createElement",
      value: function createElement(localName) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createElement' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createElement' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            if (_curArg2 === null || _curArg2 === undefined) {
              _curArg2 = ElementCreationOptions.convert(_curArg2, {
                context: "Failed to execute 'createElement' on 'Document': parameter 2"
              });
            } else if (utils.isObject(_curArg2)) {
              _curArg2 = ElementCreationOptions.convert(_curArg2, {
                context: "Failed to execute 'createElement' on 'Document': parameter 2" + " dictionary"
              });
            } else {
              _curArg2 = conversions["DOMString"](_curArg2, {
                context: "Failed to execute 'createElement' on 'Document': parameter 2"
              });
            }
          }

          args.push(_curArg2);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol4;

          return utils.tryWrapperForImpl((_esValue$implSymbol4 = esValue[implSymbol]).createElement.apply(_esValue$implSymbol4, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "createElementNS",
      value: function createElementNS(namespace, qualifiedName) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'createElementNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'createElementNS' on 'Document': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];
          _curArg3 = conversions["DOMString"](_curArg3, {
            context: "Failed to execute 'createElementNS' on 'Document': parameter 2"
          });
          args.push(_curArg3);
        }
        {
          var _curArg4 = arguments[2];

          if (_curArg4 !== undefined) {
            if (_curArg4 === null || _curArg4 === undefined) {
              _curArg4 = ElementCreationOptions.convert(_curArg4, {
                context: "Failed to execute 'createElementNS' on 'Document': parameter 3"
              });
            } else if (utils.isObject(_curArg4)) {
              _curArg4 = ElementCreationOptions.convert(_curArg4, {
                context: "Failed to execute 'createElementNS' on 'Document': parameter 3" + " dictionary"
              });
            } else {
              _curArg4 = conversions["DOMString"](_curArg4, {
                context: "Failed to execute 'createElementNS' on 'Document': parameter 3"
              });
            }
          }

          args.push(_curArg4);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol5;

          return utils.tryWrapperForImpl((_esValue$implSymbol5 = esValue[implSymbol]).createElementNS.apply(_esValue$implSymbol5, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "createDocumentFragment",
      value: function createDocumentFragment() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].createDocumentFragment());
      }
    }, {
      key: "createTextNode",
      value: function createTextNode(data) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createTextNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createTextNode' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol6 = esValue[implSymbol]).createTextNode.apply(_esValue$implSymbol6, args));
      }
    }, {
      key: "createCDATASection",
      value: function createCDATASection(data) {
        var _esValue$implSymbol7;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createCDATASection' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createCDATASection' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol7 = esValue[implSymbol]).createCDATASection.apply(_esValue$implSymbol7, args));
      }
    }, {
      key: "createComment",
      value: function createComment(data) {
        var _esValue$implSymbol8;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createComment' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createComment' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol8 = esValue[implSymbol]).createComment.apply(_esValue$implSymbol8, args));
      }
    }, {
      key: "createProcessingInstruction",
      value: function createProcessingInstruction(target, data) {
        var _esValue$implSymbol9;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'createProcessingInstruction' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createProcessingInstruction' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg5 = arguments[1];
          _curArg5 = conversions["DOMString"](_curArg5, {
            context: "Failed to execute 'createProcessingInstruction' on 'Document': parameter 2"
          });
          args.push(_curArg5);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol9 = esValue[implSymbol]).createProcessingInstruction.apply(_esValue$implSymbol9, args));
      }
    }, {
      key: "importNode",
      value: function importNode(node) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'importNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'importNode' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg6 = arguments[1];

          if (_curArg6 !== undefined) {
            _curArg6 = conversions["boolean"](_curArg6, {
              context: "Failed to execute 'importNode' on 'Document': parameter 2"
            });
          } else {
            _curArg6 = false;
          }

          args.push(_curArg6);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol10;

          return utils.tryWrapperForImpl((_esValue$implSymbol10 = esValue[implSymbol]).importNode.apply(_esValue$implSymbol10, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "adoptNode",
      value: function adoptNode(node) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'adoptNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'adoptNode' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol11;

          return utils.tryWrapperForImpl((_esValue$implSymbol11 = esValue[implSymbol]).adoptNode.apply(_esValue$implSymbol11, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "createAttribute",
      value: function createAttribute(localName) {
        var _esValue$implSymbol12;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createAttribute' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createAttribute' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol12 = esValue[implSymbol]).createAttribute.apply(_esValue$implSymbol12, args));
      }
    }, {
      key: "createAttributeNS",
      value: function createAttributeNS(namespace, qualifiedName) {
        var _esValue$implSymbol13;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'createAttributeNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'createAttributeNS' on 'Document': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg7 = arguments[1];
          _curArg7 = conversions["DOMString"](_curArg7, {
            context: "Failed to execute 'createAttributeNS' on 'Document': parameter 2"
          });
          args.push(_curArg7);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol13 = esValue[implSymbol]).createAttributeNS.apply(_esValue$implSymbol13, args));
      }
    }, {
      key: "createEvent",
      value: function createEvent(interface_) {
        var _esValue$implSymbol14;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createEvent' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createEvent' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol14 = esValue[implSymbol]).createEvent.apply(_esValue$implSymbol14, args));
      }
    }, {
      key: "createRange",
      value: function createRange() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].createRange());
      }
    }, {
      key: "createNodeIterator",
      value: function createNodeIterator(root) {
        var _esValue$implSymbol15;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createNodeIterator' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'createNodeIterator' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg8 = arguments[1];

          if (_curArg8 !== undefined) {
            _curArg8 = conversions["unsigned long"](_curArg8, {
              context: "Failed to execute 'createNodeIterator' on 'Document': parameter 2"
            });
          } else {
            _curArg8 = 0xffffffff;
          }

          args.push(_curArg8);
        }
        {
          var _curArg9 = arguments[2];

          if (_curArg9 !== undefined) {
            if (_curArg9 === null || _curArg9 === undefined) {
              _curArg9 = null;
            } else {
              _curArg9 = NodeFilter.convert(_curArg9, {
                context: "Failed to execute 'createNodeIterator' on 'Document': parameter 3"
              });
            }
          } else {
            _curArg9 = null;
          }

          args.push(_curArg9);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol15 = esValue[implSymbol]).createNodeIterator.apply(_esValue$implSymbol15, args));
      }
    }, {
      key: "createTreeWalker",
      value: function createTreeWalker(root) {
        var _esValue$implSymbol16;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createTreeWalker' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'createTreeWalker' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg10 = arguments[1];

          if (_curArg10 !== undefined) {
            _curArg10 = conversions["unsigned long"](_curArg10, {
              context: "Failed to execute 'createTreeWalker' on 'Document': parameter 2"
            });
          } else {
            _curArg10 = 0xffffffff;
          }

          args.push(_curArg10);
        }
        {
          var _curArg11 = arguments[2];

          if (_curArg11 !== undefined) {
            if (_curArg11 === null || _curArg11 === undefined) {
              _curArg11 = null;
            } else {
              _curArg11 = NodeFilter.convert(_curArg11, {
                context: "Failed to execute 'createTreeWalker' on 'Document': parameter 3"
              });
            }
          } else {
            _curArg11 = null;
          }

          args.push(_curArg11);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol16 = esValue[implSymbol]).createTreeWalker.apply(_esValue$implSymbol16, args));
      }
    }, {
      key: "getElementsByName",
      value: function getElementsByName(elementName) {
        var _esValue$implSymbol17;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementsByName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByName' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol17 = esValue[implSymbol]).getElementsByName.apply(_esValue$implSymbol17, args));
      }
    }, {
      key: "open",
      value: function open() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'open' on 'Document': parameter 1"
            });
          } else {
            curArg = "text/html";
          }

          args.push(curArg);
        }
        {
          var _curArg12 = arguments[1];

          if (_curArg12 !== undefined) {
            _curArg12 = conversions["DOMString"](_curArg12, {
              context: "Failed to execute 'open' on 'Document': parameter 2"
            });
          } else {
            _curArg12 = "";
          }

          args.push(_curArg12);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol18;

          return utils.tryWrapperForImpl((_esValue$implSymbol18 = esValue[implSymbol]).open.apply(_esValue$implSymbol18, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "close",
      value: function close() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].close();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "write",
      value: function write() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'write' on 'Document': parameter " + (i + 1)
          });
          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol19;

          return (_esValue$implSymbol19 = esValue[implSymbol]).write.apply(_esValue$implSymbol19, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "writeln",
      value: function writeln() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'writeln' on 'Document': parameter " + (i + 1)
          });
          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol20;

          return (_esValue$implSymbol20 = esValue[implSymbol]).writeln.apply(_esValue$implSymbol20, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "hasFocus",
      value: function hasFocus() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].hasFocus();
      }
    }, {
      key: "clear",
      value: function clear() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].clear();
      }
    }, {
      key: "captureEvents",
      value: function captureEvents() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].captureEvents();
      }
    }, {
      key: "releaseEvents",
      value: function releaseEvents() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].releaseEvents();
      }
    }, {
      key: "getSelection",
      value: function getSelection() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].getSelection());
      }
    }, {
      key: "getElementById",
      value: function getElementById(elementId) {
        var _esValue$implSymbol21;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementById' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementById' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol21 = esValue[implSymbol]).getElementById.apply(_esValue$implSymbol21, args));
      }
    }, {
      key: "prepend",
      value: function prepend() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'prepend' on 'Document': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol22;

          return (_esValue$implSymbol22 = esValue[implSymbol]).prepend.apply(_esValue$implSymbol22, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "append",
      value: function append() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'append' on 'Document': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol23;

          return (_esValue$implSymbol23 = esValue[implSymbol]).append.apply(_esValue$implSymbol23, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "querySelector",
      value: function querySelector(selectors) {
        var _esValue$implSymbol24;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'querySelector' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'querySelector' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol24 = esValue[implSymbol]).querySelector.apply(_esValue$implSymbol24, args));
      }
    }, {
      key: "querySelectorAll",
      value: function querySelectorAll(selectors) {
        var _esValue$implSymbol25;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'querySelectorAll' on 'Document': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'querySelectorAll' on 'Document': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol25 = esValue[implSymbol]).querySelectorAll.apply(_esValue$implSymbol25, args));
      }
    }, {
      key: "implementation",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "implementation", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["implementation"]);
        });
      }
    }, {
      key: "URL",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["URL"];
      }
    }, {
      key: "documentURI",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["documentURI"];
      }
    }, {
      key: "compatMode",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["compatMode"];
      }
    }, {
      key: "characterSet",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["characterSet"];
      }
    }, {
      key: "charset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["charset"];
      }
    }, {
      key: "inputEncoding",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["inputEncoding"];
      }
    }, {
      key: "contentType",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["contentType"];
      }
    }, {
      key: "doctype",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["doctype"]);
      }
    }, {
      key: "documentElement",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["documentElement"]);
      }
    }, {
      key: "referrer",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["referrer"];
      }
    }, {
      key: "cookie",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["cookie"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["USVString"](V, {
          context: "Failed to set the 'cookie' property on 'Document': The provided value"
        });
        esValue[implSymbol]["cookie"] = V;
      }
    }, {
      key: "lastModified",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["lastModified"];
      }
    }, {
      key: "readyState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["readyState"]);
      }
    }, {
      key: "title",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["title"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'title' property on 'Document': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["title"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "dir",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["dir"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'dir' property on 'Document': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["dir"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "body",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return utils.tryWrapperForImpl(esValue[implSymbol]["body"]);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (V === null || V === undefined) {
          V = null;
        } else {
          V = HTMLElement.convert(V, {
            context: "Failed to set the 'body' property on 'Document': The provided value"
          });
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["body"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "head",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["head"]);
      }
    }, {
      key: "images",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "images", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["images"]);
        });
      }
    }, {
      key: "embeds",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "embeds", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["embeds"]);
        });
      }
    }, {
      key: "plugins",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "plugins", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["plugins"]);
        });
      }
    }, {
      key: "links",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "links", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["links"]);
        });
      }
    }, {
      key: "forms",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "forms", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["forms"]);
        });
      }
    }, {
      key: "scripts",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "scripts", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["scripts"]);
        });
      }
    }, {
      key: "currentScript",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["currentScript"]);
      }
    }, {
      key: "defaultView",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["defaultView"]);
      }
    }, {
      key: "onreadystatechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onreadystatechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onreadystatechange"] = V;
      }
    }, {
      key: "anchors",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "anchors", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["anchors"]);
        });
      }
    }, {
      key: "applets",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "applets", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["applets"]);
        });
      }
    }, {
      key: "styleSheets",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "styleSheets", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["styleSheets"]);
        });
      }
    }, {
      key: "hidden",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["hidden"];
      }
    }, {
      key: "visibilityState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["visibilityState"]);
      }
    }, {
      key: "onvisibilitychange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onvisibilitychange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onvisibilitychange"] = V;
      }
    }, {
      key: "onabort",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onabort"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onabort"] = V;
      }
    }, {
      key: "onauxclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onauxclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onauxclick"] = V;
      }
    }, {
      key: "onblur",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onblur"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onblur"] = V;
      }
    }, {
      key: "oncancel",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncancel"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncancel"] = V;
      }
    }, {
      key: "oncanplay",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncanplay"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncanplay"] = V;
      }
    }, {
      key: "oncanplaythrough",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncanplaythrough"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncanplaythrough"] = V;
      }
    }, {
      key: "onchange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onchange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onchange"] = V;
      }
    }, {
      key: "onclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onclick"] = V;
      }
    }, {
      key: "onclose",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onclose"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onclose"] = V;
      }
    }, {
      key: "oncontextmenu",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncontextmenu"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncontextmenu"] = V;
      }
    }, {
      key: "oncuechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncuechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncuechange"] = V;
      }
    }, {
      key: "ondblclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondblclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondblclick"] = V;
      }
    }, {
      key: "ondrag",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondrag"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondrag"] = V;
      }
    }, {
      key: "ondragend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragend"] = V;
      }
    }, {
      key: "ondragenter",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragenter"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragenter"] = V;
      }
    }, {
      key: "ondragexit",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragexit"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragexit"] = V;
      }
    }, {
      key: "ondragleave",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragleave"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragleave"] = V;
      }
    }, {
      key: "ondragover",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragover"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragover"] = V;
      }
    }, {
      key: "ondragstart",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragstart"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragstart"] = V;
      }
    }, {
      key: "ondrop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondrop"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondrop"] = V;
      }
    }, {
      key: "ondurationchange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondurationchange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondurationchange"] = V;
      }
    }, {
      key: "onemptied",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onemptied"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onemptied"] = V;
      }
    }, {
      key: "onended",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onended"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onended"] = V;
      }
    }, {
      key: "onerror",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onerror"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onerror"] = V;
      }
    }, {
      key: "onfocus",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onfocus"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onfocus"] = V;
      }
    }, {
      key: "oninput",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oninput"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oninput"] = V;
      }
    }, {
      key: "oninvalid",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oninvalid"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oninvalid"] = V;
      }
    }, {
      key: "onkeydown",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeydown"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeydown"] = V;
      }
    }, {
      key: "onkeypress",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeypress"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeypress"] = V;
      }
    }, {
      key: "onkeyup",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeyup"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeyup"] = V;
      }
    }, {
      key: "onload",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onload"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onload"] = V;
      }
    }, {
      key: "onloadeddata",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadeddata"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadeddata"] = V;
      }
    }, {
      key: "onloadedmetadata",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadedmetadata"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadedmetadata"] = V;
      }
    }, {
      key: "onloadend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadend"] = V;
      }
    }, {
      key: "onloadstart",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadstart"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadstart"] = V;
      }
    }, {
      key: "onmousedown",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmousedown"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmousedown"] = V;
      }
    }, {
      key: "onmouseenter",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseenter"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseenter"] = V;
      }
    }, {
      key: "onmouseleave",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseleave"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseleave"] = V;
      }
    }, {
      key: "onmousemove",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmousemove"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmousemove"] = V;
      }
    }, {
      key: "onmouseout",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseout"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseout"] = V;
      }
    }, {
      key: "onmouseover",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseover"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseover"] = V;
      }
    }, {
      key: "onmouseup",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseup"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseup"] = V;
      }
    }, {
      key: "onwheel",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onwheel"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onwheel"] = V;
      }
    }, {
      key: "onpause",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onpause"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onpause"] = V;
      }
    }, {
      key: "onplay",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onplay"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onplay"] = V;
      }
    }, {
      key: "onplaying",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onplaying"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onplaying"] = V;
      }
    }, {
      key: "onprogress",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onprogress"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onprogress"] = V;
      }
    }, {
      key: "onratechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onratechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onratechange"] = V;
      }
    }, {
      key: "onreset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onreset"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onreset"] = V;
      }
    }, {
      key: "onresize",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onresize"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onresize"] = V;
      }
    }, {
      key: "onscroll",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onscroll"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onscroll"] = V;
      }
    }, {
      key: "onsecuritypolicyviolation",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsecuritypolicyviolation"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsecuritypolicyviolation"] = V;
      }
    }, {
      key: "onseeked",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onseeked"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onseeked"] = V;
      }
    }, {
      key: "onseeking",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onseeking"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onseeking"] = V;
      }
    }, {
      key: "onselect",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onselect"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onselect"] = V;
      }
    }, {
      key: "onstalled",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onstalled"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onstalled"] = V;
      }
    }, {
      key: "onsubmit",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsubmit"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsubmit"] = V;
      }
    }, {
      key: "onsuspend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsuspend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsuspend"] = V;
      }
    }, {
      key: "ontimeupdate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ontimeupdate"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ontimeupdate"] = V;
      }
    }, {
      key: "ontoggle",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ontoggle"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ontoggle"] = V;
      }
    }, {
      key: "onvolumechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onvolumechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onvolumechange"] = V;
      }
    }, {
      key: "onwaiting",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onwaiting"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onwaiting"] = V;
      }
    }, {
      key: "activeElement",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["activeElement"]);
      }
    }, {
      key: "children",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "children", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["children"]);
        });
      }
    }, {
      key: "firstElementChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["firstElementChild"]);
      }
    }, {
      key: "lastElementChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["lastElementChild"]);
      }
    }, {
      key: "childElementCount",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["childElementCount"];
      }
    }]);

    return Document;
  }(globalObject.Node);

  Object.defineProperties(Document.prototype, (_Object$definePropert = {
    getElementsByTagName: {
      enumerable: true
    },
    getElementsByTagNameNS: {
      enumerable: true
    },
    getElementsByClassName: {
      enumerable: true
    },
    createElement: {
      enumerable: true
    },
    createElementNS: {
      enumerable: true
    },
    createDocumentFragment: {
      enumerable: true
    },
    createTextNode: {
      enumerable: true
    },
    createCDATASection: {
      enumerable: true
    },
    createComment: {
      enumerable: true
    },
    createProcessingInstruction: {
      enumerable: true
    },
    importNode: {
      enumerable: true
    },
    adoptNode: {
      enumerable: true
    },
    createAttribute: {
      enumerable: true
    },
    createAttributeNS: {
      enumerable: true
    },
    createEvent: {
      enumerable: true
    },
    createRange: {
      enumerable: true
    },
    createNodeIterator: {
      enumerable: true
    },
    createTreeWalker: {
      enumerable: true
    },
    getElementsByName: {
      enumerable: true
    },
    open: {
      enumerable: true
    },
    close: {
      enumerable: true
    },
    write: {
      enumerable: true
    },
    writeln: {
      enumerable: true
    },
    hasFocus: {
      enumerable: true
    },
    clear: {
      enumerable: true
    },
    captureEvents: {
      enumerable: true
    },
    releaseEvents: {
      enumerable: true
    },
    getSelection: {
      enumerable: true
    },
    getElementById: {
      enumerable: true
    },
    prepend: {
      enumerable: true
    },
    append: {
      enumerable: true
    },
    querySelector: {
      enumerable: true
    },
    querySelectorAll: {
      enumerable: true
    },
    implementation: {
      enumerable: true
    },
    URL: {
      enumerable: true
    },
    documentURI: {
      enumerable: true
    },
    compatMode: {
      enumerable: true
    },
    characterSet: {
      enumerable: true
    },
    charset: {
      enumerable: true
    },
    inputEncoding: {
      enumerable: true
    },
    contentType: {
      enumerable: true
    },
    doctype: {
      enumerable: true
    },
    documentElement: {
      enumerable: true
    },
    referrer: {
      enumerable: true
    },
    cookie: {
      enumerable: true
    },
    lastModified: {
      enumerable: true
    },
    readyState: {
      enumerable: true
    },
    title: {
      enumerable: true
    },
    dir: {
      enumerable: true
    },
    body: {
      enumerable: true
    },
    head: {
      enumerable: true
    },
    images: {
      enumerable: true
    },
    embeds: {
      enumerable: true
    },
    plugins: {
      enumerable: true
    },
    links: {
      enumerable: true
    },
    forms: {
      enumerable: true
    },
    scripts: {
      enumerable: true
    },
    currentScript: {
      enumerable: true
    },
    defaultView: {
      enumerable: true
    },
    onreadystatechange: {
      enumerable: true
    },
    anchors: {
      enumerable: true
    },
    applets: {
      enumerable: true
    },
    styleSheets: {
      enumerable: true
    },
    hidden: {
      enumerable: true
    },
    visibilityState: {
      enumerable: true
    },
    onvisibilitychange: {
      enumerable: true
    },
    onabort: {
      enumerable: true
    },
    onauxclick: {
      enumerable: true
    },
    onblur: {
      enumerable: true
    },
    oncancel: {
      enumerable: true
    },
    oncanplay: {
      enumerable: true
    },
    oncanplaythrough: {
      enumerable: true
    },
    onchange: {
      enumerable: true
    },
    onclick: {
      enumerable: true
    },
    onclose: {
      enumerable: true
    },
    oncontextmenu: {
      enumerable: true
    },
    oncuechange: {
      enumerable: true
    },
    ondblclick: {
      enumerable: true
    },
    ondrag: {
      enumerable: true
    },
    ondragend: {
      enumerable: true
    },
    ondragenter: {
      enumerable: true
    },
    ondragexit: {
      enumerable: true
    },
    ondragleave: {
      enumerable: true
    },
    ondragover: {
      enumerable: true
    },
    ondragstart: {
      enumerable: true
    },
    ondrop: {
      enumerable: true
    },
    ondurationchange: {
      enumerable: true
    },
    onemptied: {
      enumerable: true
    },
    onended: {
      enumerable: true
    },
    onerror: {
      enumerable: true
    },
    onfocus: {
      enumerable: true
    },
    oninput: {
      enumerable: true
    },
    oninvalid: {
      enumerable: true
    },
    onkeydown: {
      enumerable: true
    },
    onkeypress: {
      enumerable: true
    },
    onkeyup: {
      enumerable: true
    },
    onload: {
      enumerable: true
    },
    onloadeddata: {
      enumerable: true
    },
    onloadedmetadata: {
      enumerable: true
    },
    onloadend: {
      enumerable: true
    },
    onloadstart: {
      enumerable: true
    },
    onmousedown: {
      enumerable: true
    },
    onmouseenter: {
      enumerable: true
    },
    onmouseleave: {
      enumerable: true
    },
    onmousemove: {
      enumerable: true
    },
    onmouseout: {
      enumerable: true
    },
    onmouseover: {
      enumerable: true
    },
    onmouseup: {
      enumerable: true
    },
    onwheel: {
      enumerable: true
    },
    onpause: {
      enumerable: true
    },
    onplay: {
      enumerable: true
    },
    onplaying: {
      enumerable: true
    },
    onprogress: {
      enumerable: true
    },
    onratechange: {
      enumerable: true
    },
    onreset: {
      enumerable: true
    },
    onresize: {
      enumerable: true
    },
    onscroll: {
      enumerable: true
    },
    onsecuritypolicyviolation: {
      enumerable: true
    },
    onseeked: {
      enumerable: true
    },
    onseeking: {
      enumerable: true
    },
    onselect: {
      enumerable: true
    },
    onstalled: {
      enumerable: true
    },
    onsubmit: {
      enumerable: true
    },
    onsuspend: {
      enumerable: true
    },
    ontimeupdate: {
      enumerable: true
    },
    ontoggle: {
      enumerable: true
    },
    onvolumechange: {
      enumerable: true
    },
    onwaiting: {
      enumerable: true
    },
    activeElement: {
      enumerable: true
    },
    children: {
      enumerable: true
    },
    firstElementChild: {
      enumerable: true
    },
    lastElementChild: {
      enumerable: true
    },
    childElementCount: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Document",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.unscopables, {
    value: {
      prepend: true,
      append: true,
      __proto__: null
    },
    configurable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Document;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Document
  });
};

var Impl = require("../nodes/Document-impl.js");