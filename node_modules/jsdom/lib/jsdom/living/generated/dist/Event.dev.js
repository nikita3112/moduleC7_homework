"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var EventInit = require("./EventInit.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Event";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Event'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Event"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Event is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  Object.defineProperties(wrapper, Object.getOwnPropertyDescriptors({
    get isTrusted() {
      var esValue = this !== null && this !== undefined ? this : globalObject;

      if (!exports.is(esValue)) {
        throw new TypeError("Illegal invocation");
      }

      return esValue[implSymbol]["isTrusted"];
    }

  }));
  Object.defineProperties(wrapper, {
    isTrusted: {
      configurable: false
    }
  });
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "Worker", "AudioWorklet"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var Event =
  /*#__PURE__*/
  function () {
    function Event(type) {
      _classCallCheck(this, Event);

      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'Event': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to construct 'Event': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg = arguments[1];
        _curArg = EventInit.convert(_curArg, {
          context: "Failed to construct 'Event': parameter 2"
        });
        args.push(_curArg);
      }
      return exports.setup(Object.create((this instanceof Event ? this.constructor : void 0).prototype), globalObject, args);
    }

    _createClass(Event, [{
      key: "composedPath",
      value: function composedPath() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].composedPath());
      }
    }, {
      key: "stopPropagation",
      value: function stopPropagation() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].stopPropagation();
      }
    }, {
      key: "stopImmediatePropagation",
      value: function stopImmediatePropagation() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].stopImmediatePropagation();
      }
    }, {
      key: "preventDefault",
      value: function preventDefault() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].preventDefault();
      }
    }, {
      key: "initEvent",
      value: function initEvent(type) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'initEvent' on 'Event': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'initEvent' on 'Event': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["boolean"](_curArg2, {
              context: "Failed to execute 'initEvent' on 'Event': parameter 2"
            });
          } else {
            _curArg2 = false;
          }

          args.push(_curArg2);
        }
        {
          var _curArg3 = arguments[2];

          if (_curArg3 !== undefined) {
            _curArg3 = conversions["boolean"](_curArg3, {
              context: "Failed to execute 'initEvent' on 'Event': parameter 3"
            });
          } else {
            _curArg3 = false;
          }

          args.push(_curArg3);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).initEvent.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "type",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["type"];
      }
    }, {
      key: "target",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["target"]);
      }
    }, {
      key: "srcElement",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["srcElement"]);
      }
    }, {
      key: "currentTarget",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["currentTarget"]);
      }
    }, {
      key: "eventPhase",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["eventPhase"];
      }
    }, {
      key: "cancelBubble",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["cancelBubble"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'cancelBubble' property on 'Event': The provided value"
        });
        esValue[implSymbol]["cancelBubble"] = V;
      }
    }, {
      key: "bubbles",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["bubbles"];
      }
    }, {
      key: "cancelable",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["cancelable"];
      }
    }, {
      key: "returnValue",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["returnValue"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'returnValue' property on 'Event': The provided value"
        });
        esValue[implSymbol]["returnValue"] = V;
      }
    }, {
      key: "defaultPrevented",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["defaultPrevented"];
      }
    }, {
      key: "composed",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["composed"];
      }
    }, {
      key: "timeStamp",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["timeStamp"];
      }
    }]);

    return Event;
  }();

  Object.defineProperties(Event.prototype, (_Object$definePropert = {
    composedPath: {
      enumerable: true
    },
    stopPropagation: {
      enumerable: true
    },
    stopImmediatePropagation: {
      enumerable: true
    },
    preventDefault: {
      enumerable: true
    },
    initEvent: {
      enumerable: true
    },
    type: {
      enumerable: true
    },
    target: {
      enumerable: true
    },
    srcElement: {
      enumerable: true
    },
    currentTarget: {
      enumerable: true
    },
    eventPhase: {
      enumerable: true
    },
    cancelBubble: {
      enumerable: true
    },
    bubbles: {
      enumerable: true
    },
    cancelable: {
      enumerable: true
    },
    returnValue: {
      enumerable: true
    },
    defaultPrevented: {
      enumerable: true
    },
    composed: {
      enumerable: true
    },
    timeStamp: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Event",
    configurable: true
  }), _defineProperty(_Object$definePropert, "NONE", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "CAPTURING_PHASE", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "AT_TARGET", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "BUBBLING_PHASE", {
    value: 3,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(Event, {
    NONE: {
      value: 0,
      enumerable: true
    },
    CAPTURING_PHASE: {
      value: 1,
      enumerable: true
    },
    AT_TARGET: {
      value: 2,
      enumerable: true
    },
    BUBBLING_PHASE: {
      value: 3,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Event;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Event
  });
};

var Impl = require("../events/Event-impl.js");