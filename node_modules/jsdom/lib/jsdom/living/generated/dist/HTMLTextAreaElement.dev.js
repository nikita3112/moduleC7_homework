"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var HTMLConstructor_helpers_html_constructor = require("../helpers/html-constructor.js").HTMLConstructor;

var SelectionMode = require("./SelectionMode.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var parseInteger_helpers_strings = require("../helpers/strings.js").parseInteger;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var HTMLElement = require("./HTMLElement.js");

var interfaceName = "HTMLTextAreaElement";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'HTMLTextAreaElement'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["HTMLTextAreaElement"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLTextAreaElement is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  HTMLElement._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.HTMLElement === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLTextAreaElement before HTMLElement");
  }

  var HTMLTextAreaElement =
  /*#__PURE__*/
  function (_globalObject$HTMLEle) {
    _inherits(HTMLTextAreaElement, _globalObject$HTMLEle);

    function HTMLTextAreaElement() {
      var _this;

      _classCallCheck(this, HTMLTextAreaElement);

      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLTextAreaElement ? this.constructor : void 0));
    }

    _createClass(HTMLTextAreaElement, [{
      key: "checkValidity",
      value: function checkValidity() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].checkValidity();
      }
    }, {
      key: "reportValidity",
      value: function reportValidity() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].reportValidity();
      }
    }, {
      key: "setCustomValidity",
      value: function setCustomValidity(error) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).setCustomValidity.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "select",
      value: function select() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].select();
      }
    }, {
      key: "setRangeText",
      value: function setRangeText(replacement) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setRangeText' on 'HTMLTextAreaElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];

        switch (arguments.length) {
          case 1:
            {
              var curArg = arguments[0];
              curArg = conversions["DOMString"](curArg, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1"
              });
              args.push(curArg);
            }
            break;

          case 2:
            throw new TypeError("Failed to execute 'setRangeText' on 'HTMLTextAreaElement': only " + arguments.length + " arguments present.");
            break;

          case 3:
            {
              var _curArg = arguments[0];
              _curArg = conversions["DOMString"](_curArg, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1"
              });
              args.push(_curArg);
            }
            {
              var _curArg2 = arguments[1];
              _curArg2 = conversions["unsigned long"](_curArg2, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2"
              });
              args.push(_curArg2);
            }
            {
              var _curArg3 = arguments[2];
              _curArg3 = conversions["unsigned long"](_curArg3, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3"
              });
              args.push(_curArg3);
            }
            break;

          default:
            {
              var _curArg4 = arguments[0];
              _curArg4 = conversions["DOMString"](_curArg4, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1"
              });
              args.push(_curArg4);
            }
            {
              var _curArg5 = arguments[1];
              _curArg5 = conversions["unsigned long"](_curArg5, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2"
              });
              args.push(_curArg5);
            }
            {
              var _curArg6 = arguments[2];
              _curArg6 = conversions["unsigned long"](_curArg6, {
                context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3"
              });
              args.push(_curArg6);
            }
            {
              var _curArg7 = arguments[3];

              if (_curArg7 !== undefined) {
                _curArg7 = SelectionMode.convert(_curArg7, {
                  context: "Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 4"
                });
              } else {
                _curArg7 = "preserve";
              }

              args.push(_curArg7);
            }
        }

        return (_esValue$implSymbol2 = esValue[implSymbol]).setRangeText.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "setSelectionRange",
      value: function setSelectionRange(start, end) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg8 = arguments[1];
          _curArg8 = conversions["unsigned long"](_curArg8, {
            context: "Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 2"
          });
          args.push(_curArg8);
        }
        {
          var _curArg9 = arguments[2];

          if (_curArg9 !== undefined) {
            _curArg9 = conversions["DOMString"](_curArg9, {
              context: "Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 3"
            });
          }

          args.push(_curArg9);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).setSelectionRange.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "autocomplete",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "autocomplete");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'autocomplete' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "autocomplete", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "autofocus",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "autofocus");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'autofocus' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "autofocus", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "autofocus");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "cols",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["cols"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'cols' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["cols"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "dirName",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "dirname");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'dirName' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "dirname", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "disabled",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "disabled");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'disabled' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "disabled", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "disabled");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "form",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["form"]);
      }
    }, {
      key: "inputMode",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "inputmode");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'inputMode' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "inputmode", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "maxLength",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "maxlength");

          if (value === null) {
            return 0;
          }

          value = parseInteger_helpers_strings(value);
          return value !== null && conversions["long"](value) === value ? value : 0;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["long"](V, {
          context: "Failed to set the 'maxLength' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "maxlength", String(V));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "minLength",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "minlength");

          if (value === null) {
            return 0;
          }

          value = parseInteger_helpers_strings(value);
          return value !== null && conversions["long"](value) === value ? value : 0;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["long"](V, {
          context: "Failed to set the 'minLength' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "minlength", String(V));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "name",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "name");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'name' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "name", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "placeholder",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "placeholder");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'placeholder' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "placeholder", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "readOnly",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "readonly");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'readOnly' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "readonly", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "readonly");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "required",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "required");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'required' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "required", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "required");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "rows",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["rows"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'rows' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["rows"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "wrap",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "wrap");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'wrap' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "wrap", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "type",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["type"];
      }
    }, {
      key: "defaultValue",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["defaultValue"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'defaultValue' property on 'HTMLTextAreaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["defaultValue"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "value",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["value"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'value' property on 'HTMLTextAreaElement': The provided value",
          treatNullAsEmptyString: true
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["value"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "textLength",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["textLength"];
      }
    }, {
      key: "willValidate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["willValidate"];
      }
    }, {
      key: "validity",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["validity"]);
      }
    }, {
      key: "validationMessage",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["validationMessage"];
      }
    }, {
      key: "labels",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["labels"]);
      }
    }, {
      key: "selectionStart",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["selectionStart"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'selectionStart' property on 'HTMLTextAreaElement': The provided value"
        });
        esValue[implSymbol]["selectionStart"] = V;
      }
    }, {
      key: "selectionEnd",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["selectionEnd"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'selectionEnd' property on 'HTMLTextAreaElement': The provided value"
        });
        esValue[implSymbol]["selectionEnd"] = V;
      }
    }, {
      key: "selectionDirection",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["selectionDirection"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'selectionDirection' property on 'HTMLTextAreaElement': The provided value"
        });
        esValue[implSymbol]["selectionDirection"] = V;
      }
    }]);

    return HTMLTextAreaElement;
  }(globalObject.HTMLElement);

  Object.defineProperties(HTMLTextAreaElement.prototype, _defineProperty({
    checkValidity: {
      enumerable: true
    },
    reportValidity: {
      enumerable: true
    },
    setCustomValidity: {
      enumerable: true
    },
    select: {
      enumerable: true
    },
    setRangeText: {
      enumerable: true
    },
    setSelectionRange: {
      enumerable: true
    },
    autocomplete: {
      enumerable: true
    },
    autofocus: {
      enumerable: true
    },
    cols: {
      enumerable: true
    },
    dirName: {
      enumerable: true
    },
    disabled: {
      enumerable: true
    },
    form: {
      enumerable: true
    },
    inputMode: {
      enumerable: true
    },
    maxLength: {
      enumerable: true
    },
    minLength: {
      enumerable: true
    },
    name: {
      enumerable: true
    },
    placeholder: {
      enumerable: true
    },
    readOnly: {
      enumerable: true
    },
    required: {
      enumerable: true
    },
    rows: {
      enumerable: true
    },
    wrap: {
      enumerable: true
    },
    type: {
      enumerable: true
    },
    defaultValue: {
      enumerable: true
    },
    value: {
      enumerable: true
    },
    textLength: {
      enumerable: true
    },
    willValidate: {
      enumerable: true
    },
    validity: {
      enumerable: true
    },
    validationMessage: {
      enumerable: true
    },
    labels: {
      enumerable: true
    },
    selectionStart: {
      enumerable: true
    },
    selectionEnd: {
      enumerable: true
    },
    selectionDirection: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "HTMLTextAreaElement",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = HTMLTextAreaElement;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLTextAreaElement
  });
};

var Impl = require("../nodes/HTMLTextAreaElement-impl.js");