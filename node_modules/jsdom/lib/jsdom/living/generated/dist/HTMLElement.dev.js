"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var HTMLConstructor_helpers_html_constructor = require("../helpers/html-constructor.js").HTMLConstructor;

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var Element = require("./Element.js");

var interfaceName = "HTMLElement";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'HTMLElement'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["HTMLElement"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLElement is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  Element._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.Element === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLElement before Element");
  }

  var HTMLElement =
  /*#__PURE__*/
  function (_globalObject$Element) {
    _inherits(HTMLElement, _globalObject$Element);

    function HTMLElement() {
      var _this;

      _classCallCheck(this, HTMLElement);

      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLElement ? this.constructor : void 0));
    }

    _createClass(HTMLElement, [{
      key: "click",
      value: function click() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].click();
      }
    }, {
      key: "focus",
      value: function focus() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].blur();
      }
    }, {
      key: "title",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "title");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'title' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "title", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "lang",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "lang");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'lang' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "lang", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "translate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["translate"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'translate' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["translate"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "dir",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["dir"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'dir' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["dir"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "hidden",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "hidden");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'hidden' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "hidden", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "hidden");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "accessKey",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "accesskey");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'accessKey' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "accesskey", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "draggable",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["draggable"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'draggable' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["draggable"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "offsetParent",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["offsetParent"]);
      }
    }, {
      key: "offsetTop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["offsetTop"];
      }
    }, {
      key: "offsetLeft",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["offsetLeft"];
      }
    }, {
      key: "offsetWidth",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["offsetWidth"];
      }
    }, {
      key: "offsetHeight",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["offsetHeight"];
      }
    }, {
      key: "style",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "style", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["style"]);
        });
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var Q = esValue["style"];

        if (!utils.isObject(Q)) {
          throw new TypeError("Property 'style' is not an object");
        }

        Reflect.set(Q, "cssText", V);
      }
    }, {
      key: "onabort",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onabort"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onabort"] = V;
      }
    }, {
      key: "onauxclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onauxclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onauxclick"] = V;
      }
    }, {
      key: "onblur",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onblur"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onblur"] = V;
      }
    }, {
      key: "oncancel",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncancel"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncancel"] = V;
      }
    }, {
      key: "oncanplay",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncanplay"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncanplay"] = V;
      }
    }, {
      key: "oncanplaythrough",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncanplaythrough"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncanplaythrough"] = V;
      }
    }, {
      key: "onchange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onchange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onchange"] = V;
      }
    }, {
      key: "onclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onclick"] = V;
      }
    }, {
      key: "onclose",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onclose"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onclose"] = V;
      }
    }, {
      key: "oncontextmenu",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncontextmenu"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncontextmenu"] = V;
      }
    }, {
      key: "oncuechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oncuechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oncuechange"] = V;
      }
    }, {
      key: "ondblclick",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondblclick"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondblclick"] = V;
      }
    }, {
      key: "ondrag",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondrag"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondrag"] = V;
      }
    }, {
      key: "ondragend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragend"] = V;
      }
    }, {
      key: "ondragenter",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragenter"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragenter"] = V;
      }
    }, {
      key: "ondragexit",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragexit"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragexit"] = V;
      }
    }, {
      key: "ondragleave",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragleave"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragleave"] = V;
      }
    }, {
      key: "ondragover",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragover"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragover"] = V;
      }
    }, {
      key: "ondragstart",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondragstart"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondragstart"] = V;
      }
    }, {
      key: "ondrop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondrop"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondrop"] = V;
      }
    }, {
      key: "ondurationchange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ondurationchange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ondurationchange"] = V;
      }
    }, {
      key: "onemptied",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onemptied"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onemptied"] = V;
      }
    }, {
      key: "onended",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onended"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onended"] = V;
      }
    }, {
      key: "onerror",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onerror"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onerror"] = V;
      }
    }, {
      key: "onfocus",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onfocus"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onfocus"] = V;
      }
    }, {
      key: "oninput",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oninput"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oninput"] = V;
      }
    }, {
      key: "oninvalid",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["oninvalid"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["oninvalid"] = V;
      }
    }, {
      key: "onkeydown",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeydown"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeydown"] = V;
      }
    }, {
      key: "onkeypress",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeypress"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeypress"] = V;
      }
    }, {
      key: "onkeyup",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onkeyup"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onkeyup"] = V;
      }
    }, {
      key: "onload",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onload"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onload"] = V;
      }
    }, {
      key: "onloadeddata",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadeddata"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadeddata"] = V;
      }
    }, {
      key: "onloadedmetadata",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadedmetadata"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadedmetadata"] = V;
      }
    }, {
      key: "onloadend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadend"] = V;
      }
    }, {
      key: "onloadstart",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onloadstart"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onloadstart"] = V;
      }
    }, {
      key: "onmousedown",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmousedown"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmousedown"] = V;
      }
    }, {
      key: "onmouseenter",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseenter"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseenter"] = V;
      }
    }, {
      key: "onmouseleave",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseleave"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          return;
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseleave"] = V;
      }
    }, {
      key: "onmousemove",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmousemove"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmousemove"] = V;
      }
    }, {
      key: "onmouseout",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseout"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseout"] = V;
      }
    }, {
      key: "onmouseover",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseover"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseover"] = V;
      }
    }, {
      key: "onmouseup",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmouseup"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmouseup"] = V;
      }
    }, {
      key: "onwheel",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onwheel"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onwheel"] = V;
      }
    }, {
      key: "onpause",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onpause"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onpause"] = V;
      }
    }, {
      key: "onplay",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onplay"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onplay"] = V;
      }
    }, {
      key: "onplaying",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onplaying"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onplaying"] = V;
      }
    }, {
      key: "onprogress",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onprogress"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onprogress"] = V;
      }
    }, {
      key: "onratechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onratechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onratechange"] = V;
      }
    }, {
      key: "onreset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onreset"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onreset"] = V;
      }
    }, {
      key: "onresize",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onresize"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onresize"] = V;
      }
    }, {
      key: "onscroll",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onscroll"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onscroll"] = V;
      }
    }, {
      key: "onsecuritypolicyviolation",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsecuritypolicyviolation"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsecuritypolicyviolation"] = V;
      }
    }, {
      key: "onseeked",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onseeked"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onseeked"] = V;
      }
    }, {
      key: "onseeking",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onseeking"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onseeking"] = V;
      }
    }, {
      key: "onselect",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onselect"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onselect"] = V;
      }
    }, {
      key: "onstalled",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onstalled"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onstalled"] = V;
      }
    }, {
      key: "onsubmit",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsubmit"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsubmit"] = V;
      }
    }, {
      key: "onsuspend",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onsuspend"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onsuspend"] = V;
      }
    }, {
      key: "ontimeupdate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ontimeupdate"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ontimeupdate"] = V;
      }
    }, {
      key: "ontoggle",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ontoggle"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["ontoggle"] = V;
      }
    }, {
      key: "onvolumechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onvolumechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onvolumechange"] = V;
      }
    }, {
      key: "onwaiting",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onwaiting"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onwaiting"] = V;
      }
    }, {
      key: "dataset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "dataset", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["dataset"]);
        });
      }
    }, {
      key: "nonce",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var value = esValue[implSymbol].getAttributeNS(null, "nonce");
        return value === null ? "" : value;
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'nonce' property on 'HTMLElement': The provided value"
        });
        esValue[implSymbol].setAttributeNS(null, "nonce", V);
      }
    }, {
      key: "tabIndex",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["tabIndex"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["long"](V, {
          context: "Failed to set the 'tabIndex' property on 'HTMLElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["tabIndex"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }]);

    return HTMLElement;
  }(globalObject.Element);

  Object.defineProperties(HTMLElement.prototype, _defineProperty({
    click: {
      enumerable: true
    },
    focus: {
      enumerable: true
    },
    blur: {
      enumerable: true
    },
    title: {
      enumerable: true
    },
    lang: {
      enumerable: true
    },
    translate: {
      enumerable: true
    },
    dir: {
      enumerable: true
    },
    hidden: {
      enumerable: true
    },
    accessKey: {
      enumerable: true
    },
    draggable: {
      enumerable: true
    },
    offsetParent: {
      enumerable: true
    },
    offsetTop: {
      enumerable: true
    },
    offsetLeft: {
      enumerable: true
    },
    offsetWidth: {
      enumerable: true
    },
    offsetHeight: {
      enumerable: true
    },
    style: {
      enumerable: true
    },
    onabort: {
      enumerable: true
    },
    onauxclick: {
      enumerable: true
    },
    onblur: {
      enumerable: true
    },
    oncancel: {
      enumerable: true
    },
    oncanplay: {
      enumerable: true
    },
    oncanplaythrough: {
      enumerable: true
    },
    onchange: {
      enumerable: true
    },
    onclick: {
      enumerable: true
    },
    onclose: {
      enumerable: true
    },
    oncontextmenu: {
      enumerable: true
    },
    oncuechange: {
      enumerable: true
    },
    ondblclick: {
      enumerable: true
    },
    ondrag: {
      enumerable: true
    },
    ondragend: {
      enumerable: true
    },
    ondragenter: {
      enumerable: true
    },
    ondragexit: {
      enumerable: true
    },
    ondragleave: {
      enumerable: true
    },
    ondragover: {
      enumerable: true
    },
    ondragstart: {
      enumerable: true
    },
    ondrop: {
      enumerable: true
    },
    ondurationchange: {
      enumerable: true
    },
    onemptied: {
      enumerable: true
    },
    onended: {
      enumerable: true
    },
    onerror: {
      enumerable: true
    },
    onfocus: {
      enumerable: true
    },
    oninput: {
      enumerable: true
    },
    oninvalid: {
      enumerable: true
    },
    onkeydown: {
      enumerable: true
    },
    onkeypress: {
      enumerable: true
    },
    onkeyup: {
      enumerable: true
    },
    onload: {
      enumerable: true
    },
    onloadeddata: {
      enumerable: true
    },
    onloadedmetadata: {
      enumerable: true
    },
    onloadend: {
      enumerable: true
    },
    onloadstart: {
      enumerable: true
    },
    onmousedown: {
      enumerable: true
    },
    onmouseenter: {
      enumerable: true
    },
    onmouseleave: {
      enumerable: true
    },
    onmousemove: {
      enumerable: true
    },
    onmouseout: {
      enumerable: true
    },
    onmouseover: {
      enumerable: true
    },
    onmouseup: {
      enumerable: true
    },
    onwheel: {
      enumerable: true
    },
    onpause: {
      enumerable: true
    },
    onplay: {
      enumerable: true
    },
    onplaying: {
      enumerable: true
    },
    onprogress: {
      enumerable: true
    },
    onratechange: {
      enumerable: true
    },
    onreset: {
      enumerable: true
    },
    onresize: {
      enumerable: true
    },
    onscroll: {
      enumerable: true
    },
    onsecuritypolicyviolation: {
      enumerable: true
    },
    onseeked: {
      enumerable: true
    },
    onseeking: {
      enumerable: true
    },
    onselect: {
      enumerable: true
    },
    onstalled: {
      enumerable: true
    },
    onsubmit: {
      enumerable: true
    },
    onsuspend: {
      enumerable: true
    },
    ontimeupdate: {
      enumerable: true
    },
    ontoggle: {
      enumerable: true
    },
    onvolumechange: {
      enumerable: true
    },
    onwaiting: {
      enumerable: true
    },
    dataset: {
      enumerable: true
    },
    nonce: {
      enumerable: true
    },
    tabIndex: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "HTMLElement",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = HTMLElement;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLElement
  });
};

var Impl = require("../nodes/HTMLElement-impl.js");