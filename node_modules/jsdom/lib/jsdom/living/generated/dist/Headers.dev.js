"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Headers";
var IteratorPrototype = Object.create(utils.IteratorPrototype, _defineProperty({
  next: {
    value: function next() {
      var internal = this[utils.iterInternalSymbol];
      var target = internal.target,
          kind = internal.kind,
          index = internal.index;
      var values = Array.from(target[implSymbol]);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      var pair = values[index];
      internal.index = index + 1;

      var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = _slicedToArray(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];

      var result;

      switch (kind) {
        case "key":
          result = key;
          break;

        case "value":
          result = value;
          break;

        case "key+value":
          result = [key, value];
          break;
      }

      return {
        value: result,
        done: false
      };
    },
    writable: true,
    enumerable: true,
    configurable: true
  }
}, Symbol.toStringTag, {
  value: "Headers Iterator",
  configurable: true
}));

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Headers'."));
};

exports.createDefaultIterator = function (target, kind) {
  var iterator = Object.create(IteratorPrototype);
  Object.defineProperty(iterator, utils.iterInternalSymbol, {
    value: {
      target: target,
      kind: kind,
      index: 0
    },
    configurable: true
  });
  return iterator;
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Headers"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Headers is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "Worker"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var Headers =
  /*#__PURE__*/
  function () {
    function Headers() {
      _classCallCheck(this, Headers);

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          if (utils.isObject(curArg)) {
            if (curArg[Symbol.iterator] !== undefined) {
              if (!utils.isObject(curArg)) {
                throw new TypeError("Failed to construct 'Headers': parameter 1" + " sequence" + " is not an iterable object.");
              } else {
                var V = [];
                var tmp = curArg;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var nextItem = _step.value;

                    if (!utils.isObject(nextItem)) {
                      throw new TypeError("Failed to construct 'Headers': parameter 1" + " sequence" + "'s element" + " is not an iterable object.");
                    } else {
                      var _V = [];
                      var _tmp = nextItem;
                      var _iteratorNormalCompletion2 = true;
                      var _didIteratorError2 = false;
                      var _iteratorError2 = undefined;

                      try {
                        for (var _iterator2 = _tmp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                          var _nextItem = _step2.value;
                          _nextItem = conversions["ByteString"](_nextItem, {
                            context: "Failed to construct 'Headers': parameter 1" + " sequence" + "'s element" + "'s element"
                          });

                          _V.push(_nextItem);
                        }
                      } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                            _iterator2["return"]();
                          }
                        } finally {
                          if (_didIteratorError2) {
                            throw _iteratorError2;
                          }
                        }
                      }

                      nextItem = _V;
                    }

                    V.push(nextItem);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                      _iterator["return"]();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                curArg = V;
              }
            } else {
              if (!utils.isObject(curArg)) {
                throw new TypeError("Failed to construct 'Headers': parameter 1" + " record" + " is not an object.");
              } else {
                var result = Object.create(null);
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = Reflect.ownKeys(curArg)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var key = _step3.value;
                    var desc = Object.getOwnPropertyDescriptor(curArg, key);

                    if (desc && desc.enumerable) {
                      var typedKey = key;
                      typedKey = conversions["ByteString"](typedKey, {
                        context: "Failed to construct 'Headers': parameter 1" + " record" + "'s key"
                      });
                      var typedValue = curArg[key];
                      typedValue = conversions["ByteString"](typedValue, {
                        context: "Failed to construct 'Headers': parameter 1" + " record" + "'s value"
                      });
                      result[typedKey] = typedValue;
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                      _iterator3["return"]();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }

                curArg = result;
              }
            }
          } else {
            throw new TypeError("Failed to construct 'Headers': parameter 1" + " is not of any supported type.");
          }
        }

        args.push(curArg);
      }
      return exports.setup(Object.create((this instanceof Headers ? this.constructor : void 0).prototype), globalObject, args);
    }

    _createClass(Headers, [{
      key: "append",
      value: function append(name, value) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'append' on 'Headers': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'append' on 'Headers': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["ByteString"](_curArg, {
            context: "Failed to execute 'append' on 'Headers': parameter 2"
          });
          args.push(_curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).append.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'delete' on 'Headers': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'delete' on 'Headers': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol])["delete"].apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "get",
      value: function get(name) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'get' on 'Headers': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'get' on 'Headers': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).get.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "has",
      value: function has(name) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'has' on 'Headers': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'has' on 'Headers': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).has.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'set' on 'Headers': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'set' on 'Headers': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = conversions["ByteString"](_curArg2, {
            context: "Failed to execute 'set' on 'Headers': parameter 2"
          });
          args.push(_curArg2);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).set.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "keys",
      value: function keys() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "key");
      }
    }, {
      key: "values",
      value: function values() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "value");
      }
    }, {
      key: "entries",
      value: function entries() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "key+value");
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, " + "but only 0 present.");
        }

        if (typeof callback !== "function") {
          throw new TypeError("Failed to execute 'forEach' on 'iterable': The callback provided " + "as parameter 1 is not a function.");
        }

        var thisArg = arguments[1];
        var pairs = Array.from(this[implSymbol]);
        var i = 0;

        while (i < pairs.length) {
          var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
              _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),
              key = _pairs$i$map2[0],
              value = _pairs$i$map2[1];

          callback.call(thisArg, value, key, this);
          pairs = Array.from(this[implSymbol]);
          i++;
        }
      }
    }]);

    return Headers;
  }();

  Object.defineProperties(Headers.prototype, (_Object$definePropert = {
    append: {
      enumerable: true
    },
    "delete": {
      enumerable: true
    },
    get: {
      enumerable: true
    },
    has: {
      enumerable: true
    },
    set: {
      enumerable: true
    },
    keys: {
      enumerable: true
    },
    values: {
      enumerable: true
    },
    entries: {
      enumerable: true
    },
    forEach: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Headers",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.iterator, {
    value: Headers.prototype.entries,
    configurable: true,
    writable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Headers;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Headers
  });
};

var Impl = require("../fetch/Headers-impl.js");