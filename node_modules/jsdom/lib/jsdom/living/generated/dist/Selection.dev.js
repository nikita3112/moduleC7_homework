"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var Range = require("./Range.js");

var Node = require("./Node.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Selection";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Selection'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Selection"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Selection is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var Selection =
  /*#__PURE__*/
  function () {
    function Selection() {
      _classCallCheck(this, Selection);

      throw new TypeError("Illegal constructor");
    }

    _createClass(Selection, [{
      key: "getRangeAt",
      value: function getRangeAt(index) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getRangeAt' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'getRangeAt' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getRangeAt.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "addRange",
      value: function addRange(range) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'addRange' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Range.convert(curArg, {
            context: "Failed to execute 'addRange' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).addRange.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "removeRange",
      value: function removeRange(range) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'removeRange' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Range.convert(curArg, {
            context: "Failed to execute 'removeRange' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).removeRange.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "removeAllRanges",
      value: function removeAllRanges() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].removeAllRanges();
      }
    }, {
      key: "empty",
      value: function empty() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].empty();
      }
    }, {
      key: "collapse",
      value: function collapse(node) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'collapse' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = Node.convert(curArg, {
              context: "Failed to execute 'collapse' on 'Selection': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg = arguments[1];

          if (_curArg !== undefined) {
            _curArg = conversions["unsigned long"](_curArg, {
              context: "Failed to execute 'collapse' on 'Selection': parameter 2"
            });
          } else {
            _curArg = 0;
          }

          args.push(_curArg);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).collapse.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "setPosition",
      value: function setPosition(node) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setPosition' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = Node.convert(curArg, {
              context: "Failed to execute 'setPosition' on 'Selection': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["unsigned long"](_curArg2, {
              context: "Failed to execute 'setPosition' on 'Selection': parameter 2"
            });
          } else {
            _curArg2 = 0;
          }

          args.push(_curArg2);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).setPosition.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "collapseToStart",
      value: function collapseToStart() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].collapseToStart();
      }
    }, {
      key: "collapseToEnd",
      value: function collapseToEnd() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].collapseToEnd();
      }
    }, {
      key: "extend",
      value: function extend(node) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'extend' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'extend' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];

          if (_curArg3 !== undefined) {
            _curArg3 = conversions["unsigned long"](_curArg3, {
              context: "Failed to execute 'extend' on 'Selection': parameter 2"
            });
          } else {
            _curArg3 = 0;
          }

          args.push(_curArg3);
        }
        return (_esValue$implSymbol6 = esValue[implSymbol]).extend.apply(_esValue$implSymbol6, args);
      }
    }, {
      key: "setBaseAndExtent",
      value: function setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset) {
        var _esValue$implSymbol7;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 4) {
          throw new TypeError("Failed to execute 'setBaseAndExtent' on 'Selection': 4 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setBaseAndExtent' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg4 = arguments[1];
          _curArg4 = conversions["unsigned long"](_curArg4, {
            context: "Failed to execute 'setBaseAndExtent' on 'Selection': parameter 2"
          });
          args.push(_curArg4);
        }
        {
          var _curArg5 = arguments[2];
          _curArg5 = Node.convert(_curArg5, {
            context: "Failed to execute 'setBaseAndExtent' on 'Selection': parameter 3"
          });
          args.push(_curArg5);
        }
        {
          var _curArg6 = arguments[3];
          _curArg6 = conversions["unsigned long"](_curArg6, {
            context: "Failed to execute 'setBaseAndExtent' on 'Selection': parameter 4"
          });
          args.push(_curArg6);
        }
        return (_esValue$implSymbol7 = esValue[implSymbol]).setBaseAndExtent.apply(_esValue$implSymbol7, args);
      }
    }, {
      key: "selectAllChildren",
      value: function selectAllChildren(node) {
        var _esValue$implSymbol8;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'selectAllChildren' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'selectAllChildren' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol8 = esValue[implSymbol]).selectAllChildren.apply(_esValue$implSymbol8, args);
      }
    }, {
      key: "deleteFromDocument",
      value: function deleteFromDocument() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].deleteFromDocument();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "containsNode",
      value: function containsNode(node) {
        var _esValue$implSymbol9;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'containsNode' on 'Selection': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'containsNode' on 'Selection': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg7 = arguments[1];

          if (_curArg7 !== undefined) {
            _curArg7 = conversions["boolean"](_curArg7, {
              context: "Failed to execute 'containsNode' on 'Selection': parameter 2"
            });
          } else {
            _curArg7 = false;
          }

          args.push(_curArg7);
        }
        return (_esValue$implSymbol9 = esValue[implSymbol]).containsNode.apply(_esValue$implSymbol9, args);
      }
    }, {
      key: "toString",
      value: function toString() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].toString();
      }
    }, {
      key: "anchorNode",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["anchorNode"]);
      }
    }, {
      key: "anchorOffset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["anchorOffset"];
      }
    }, {
      key: "focusNode",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["focusNode"]);
      }
    }, {
      key: "focusOffset",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["focusOffset"];
      }
    }, {
      key: "isCollapsed",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["isCollapsed"];
      }
    }, {
      key: "rangeCount",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["rangeCount"];
      }
    }, {
      key: "type",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["type"];
      }
    }]);

    return Selection;
  }();

  Object.defineProperties(Selection.prototype, _defineProperty({
    getRangeAt: {
      enumerable: true
    },
    addRange: {
      enumerable: true
    },
    removeRange: {
      enumerable: true
    },
    removeAllRanges: {
      enumerable: true
    },
    empty: {
      enumerable: true
    },
    collapse: {
      enumerable: true
    },
    setPosition: {
      enumerable: true
    },
    collapseToStart: {
      enumerable: true
    },
    collapseToEnd: {
      enumerable: true
    },
    extend: {
      enumerable: true
    },
    setBaseAndExtent: {
      enumerable: true
    },
    selectAllChildren: {
      enumerable: true
    },
    deleteFromDocument: {
      enumerable: true
    },
    containsNode: {
      enumerable: true
    },
    toString: {
      enumerable: true
    },
    anchorNode: {
      enumerable: true
    },
    anchorOffset: {
      enumerable: true
    },
    focusNode: {
      enumerable: true
    },
    focusOffset: {
      enumerable: true
    },
    isCollapsed: {
      enumerable: true
    },
    rangeCount: {
      enumerable: true
    },
    type: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "Selection",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Selection;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Selection
  });
};

var Impl = require("../selection/Selection-impl.js");