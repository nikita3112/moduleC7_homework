"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var BlobPropertyBag = require("./BlobPropertyBag.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Blob";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Blob'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Blob"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Blob is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "Worker"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var Blob =
  /*#__PURE__*/
  function () {
    function Blob() {
      _classCallCheck(this, Blob);

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          if (!utils.isObject(curArg)) {
            throw new TypeError("Failed to construct 'Blob': parameter 1" + " is not an iterable object.");
          } else {
            var V = [];
            var tmp = curArg;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var nextItem = _step.value;

                if (exports.is(nextItem)) {
                  nextItem = utils.implForWrapper(nextItem);
                } else if (utils.isArrayBuffer(nextItem)) {} else if (ArrayBuffer.isView(nextItem)) {} else {
                  nextItem = conversions["USVString"](nextItem, {
                    context: "Failed to construct 'Blob': parameter 1" + "'s element"
                  });
                }

                V.push(nextItem);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            curArg = V;
          }
        }

        args.push(curArg);
      }
      {
        var _curArg = arguments[1];
        _curArg = BlobPropertyBag.convert(_curArg, {
          context: "Failed to construct 'Blob': parameter 2"
        });
        args.push(_curArg);
      }
      return exports.setup(Object.create((this instanceof Blob ? this.constructor : void 0).prototype), globalObject, args);
    }

    _createClass(Blob, [{
      key: "slice",
      value: function slice() {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["long long"](curArg, {
              context: "Failed to execute 'slice' on 'Blob': parameter 1",
              clamp: true
            });
          }

          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["long long"](_curArg2, {
              context: "Failed to execute 'slice' on 'Blob': parameter 2",
              clamp: true
            });
          }

          args.push(_curArg2);
        }
        {
          var _curArg3 = arguments[2];

          if (_curArg3 !== undefined) {
            _curArg3 = conversions["DOMString"](_curArg3, {
              context: "Failed to execute 'slice' on 'Blob': parameter 3"
            });
          }

          args.push(_curArg3);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).slice.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "size",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["size"];
      }
    }, {
      key: "type",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["type"];
      }
    }]);

    return Blob;
  }();

  Object.defineProperties(Blob.prototype, _defineProperty({
    slice: {
      enumerable: true
    },
    size: {
      enumerable: true
    },
    type: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "Blob",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Blob;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Blob
  });
};

var Impl = require("../file-api/Blob-impl.js");