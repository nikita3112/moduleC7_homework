"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var HTMLConstructor_helpers_html_constructor = require("../helpers/html-constructor.js").HTMLConstructor;

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var HTMLElement = require("./HTMLElement.js");

var interfaceName = "HTMLCanvasElement";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'HTMLCanvasElement'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["HTMLCanvasElement"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLCanvasElement is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  HTMLElement._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.HTMLElement === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLCanvasElement before HTMLElement");
  }

  var HTMLCanvasElement =
  /*#__PURE__*/
  function (_globalObject$HTMLEle) {
    _inherits(HTMLCanvasElement, _globalObject$HTMLEle);

    function HTMLCanvasElement() {
      var _this;

      _classCallCheck(this, HTMLCanvasElement);

      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLCanvasElement ? this.constructor : void 0));
    }

    _createClass(HTMLCanvasElement, [{
      key: "getContext",
      value: function getContext(contextId) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getContext' on 'HTMLCanvasElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getContext' on 'HTMLCanvasElement': parameter 1"
          });
          args.push(curArg);
        }

        for (var i = 1; i < arguments.length; i++) {
          var _curArg = arguments[i];
          _curArg = conversions["any"](_curArg, {
            context: "Failed to execute 'getContext' on 'HTMLCanvasElement': parameter " + (i + 1)
          });
          args.push(_curArg);
        }

        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getContext.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "toDataURL",
      value: function toDataURL() {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["any"](_curArg2, {
              context: "Failed to execute 'toDataURL' on 'HTMLCanvasElement': parameter 2"
            });
          }

          args.push(_curArg2);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).toDataURL.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "toBlob",
      value: function toBlob(callback) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'toBlob' on 'HTMLCanvasElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = utils.tryImplForWrapper(curArg);
          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];

          if (_curArg3 !== undefined) {
            _curArg3 = conversions["DOMString"](_curArg3, {
              context: "Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 2"
            });
          }

          args.push(_curArg3);
        }
        {
          var _curArg4 = arguments[2];

          if (_curArg4 !== undefined) {
            _curArg4 = conversions["any"](_curArg4, {
              context: "Failed to execute 'toBlob' on 'HTMLCanvasElement': parameter 3"
            });
          }

          args.push(_curArg4);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).toBlob.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "width",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["width"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'width' property on 'HTMLCanvasElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["width"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "height",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["height"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'height' property on 'HTMLCanvasElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["height"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }]);

    return HTMLCanvasElement;
  }(globalObject.HTMLElement);

  Object.defineProperties(HTMLCanvasElement.prototype, _defineProperty({
    getContext: {
      enumerable: true
    },
    toDataURL: {
      enumerable: true
    },
    toBlob: {
      enumerable: true
    },
    width: {
      enumerable: true
    },
    height: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "HTMLCanvasElement",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = HTMLCanvasElement;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLCanvasElement
  });
};

var Impl = require("../nodes/HTMLCanvasElement-impl.js");