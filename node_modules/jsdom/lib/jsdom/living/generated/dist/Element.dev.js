"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var Attr = require("./Attr.js");

var ShadowRootInit = require("./ShadowRootInit.js");

var Node = require("./Node.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "Element";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Element'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Element"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Element is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  Node._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.Node === undefined) {
    throw new Error("Internal error: attempting to evaluate Element before Node");
  }

  var Element =
  /*#__PURE__*/
  function (_globalObject$Node) {
    _inherits(Element, _globalObject$Node);

    function Element() {
      var _this;

      _classCallCheck(this, Element);

      throw new TypeError("Illegal constructor");
      return _possibleConstructorReturn(_this);
    }

    _createClass(Element, [{
      key: "hasAttributes",
      value: function hasAttributes() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].hasAttributes();
      }
    }, {
      key: "getAttributeNames",
      value: function getAttributeNames() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].getAttributeNames());
      }
    }, {
      key: "getAttribute",
      value: function getAttribute(qualifiedName) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getAttribute' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).getAttribute.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "getAttributeNS",
      value: function getAttributeNS(namespace, localName) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'getAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'getAttributeNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["DOMString"](_curArg, {
            context: "Failed to execute 'getAttributeNS' on 'Element': parameter 2"
          });
          args.push(_curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).getAttributeNS.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "setAttribute",
      value: function setAttribute(qualifiedName, value) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'setAttribute' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'setAttribute' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = conversions["DOMString"](_curArg2, {
            context: "Failed to execute 'setAttribute' on 'Element': parameter 2"
          });
          args.push(_curArg2);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol3;

          return (_esValue$implSymbol3 = esValue[implSymbol]).setAttribute.apply(_esValue$implSymbol3, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "setAttributeNS",
      value: function setAttributeNS(namespace, qualifiedName, value) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 3) {
          throw new TypeError("Failed to execute 'setAttributeNS' on 'Element': 3 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'setAttributeNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];
          _curArg3 = conversions["DOMString"](_curArg3, {
            context: "Failed to execute 'setAttributeNS' on 'Element': parameter 2"
          });
          args.push(_curArg3);
        }
        {
          var _curArg4 = arguments[2];
          _curArg4 = conversions["DOMString"](_curArg4, {
            context: "Failed to execute 'setAttributeNS' on 'Element': parameter 3"
          });
          args.push(_curArg4);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol4;

          return (_esValue$implSymbol4 = esValue[implSymbol]).setAttributeNS.apply(_esValue$implSymbol4, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "removeAttribute",
      value: function removeAttribute(qualifiedName) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'removeAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'removeAttribute' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol5;

          return (_esValue$implSymbol5 = esValue[implSymbol]).removeAttribute.apply(_esValue$implSymbol5, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "removeAttributeNS",
      value: function removeAttributeNS(namespace, localName) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'removeAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'removeAttributeNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg5 = arguments[1];
          _curArg5 = conversions["DOMString"](_curArg5, {
            context: "Failed to execute 'removeAttributeNS' on 'Element': parameter 2"
          });
          args.push(_curArg5);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol6;

          return (_esValue$implSymbol6 = esValue[implSymbol]).removeAttributeNS.apply(_esValue$implSymbol6, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "toggleAttribute",
      value: function toggleAttribute(qualifiedName) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'toggleAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'toggleAttribute' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg6 = arguments[1];

          if (_curArg6 !== undefined) {
            _curArg6 = conversions["boolean"](_curArg6, {
              context: "Failed to execute 'toggleAttribute' on 'Element': parameter 2"
            });
          }

          args.push(_curArg6);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol7;

          return (_esValue$implSymbol7 = esValue[implSymbol]).toggleAttribute.apply(_esValue$implSymbol7, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "hasAttribute",
      value: function hasAttribute(qualifiedName) {
        var _esValue$implSymbol8;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'hasAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'hasAttribute' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol8 = esValue[implSymbol]).hasAttribute.apply(_esValue$implSymbol8, args);
      }
    }, {
      key: "hasAttributeNS",
      value: function hasAttributeNS(namespace, localName) {
        var _esValue$implSymbol9;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'hasAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'hasAttributeNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg7 = arguments[1];
          _curArg7 = conversions["DOMString"](_curArg7, {
            context: "Failed to execute 'hasAttributeNS' on 'Element': parameter 2"
          });
          args.push(_curArg7);
        }
        return (_esValue$implSymbol9 = esValue[implSymbol]).hasAttributeNS.apply(_esValue$implSymbol9, args);
      }
    }, {
      key: "getAttributeNode",
      value: function getAttributeNode(qualifiedName) {
        var _esValue$implSymbol10;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getAttributeNode' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol10 = esValue[implSymbol]).getAttributeNode.apply(_esValue$implSymbol10, args));
      }
    }, {
      key: "getAttributeNodeNS",
      value: function getAttributeNodeNS(namespace, localName) {
        var _esValue$implSymbol11;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'getAttributeNodeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'getAttributeNodeNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg8 = arguments[1];
          _curArg8 = conversions["DOMString"](_curArg8, {
            context: "Failed to execute 'getAttributeNodeNS' on 'Element': parameter 2"
          });
          args.push(_curArg8);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol11 = esValue[implSymbol]).getAttributeNodeNS.apply(_esValue$implSymbol11, args));
      }
    }, {
      key: "setAttributeNode",
      value: function setAttributeNode(attr) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Attr.convert(curArg, {
            context: "Failed to execute 'setAttributeNode' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol12;

          return utils.tryWrapperForImpl((_esValue$implSymbol12 = esValue[implSymbol]).setAttributeNode.apply(_esValue$implSymbol12, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "setAttributeNodeNS",
      value: function setAttributeNodeNS(attr) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setAttributeNodeNS' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Attr.convert(curArg, {
            context: "Failed to execute 'setAttributeNodeNS' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol13;

          return utils.tryWrapperForImpl((_esValue$implSymbol13 = esValue[implSymbol]).setAttributeNodeNS.apply(_esValue$implSymbol13, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "removeAttributeNode",
      value: function removeAttributeNode(attr) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'removeAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Attr.convert(curArg, {
            context: "Failed to execute 'removeAttributeNode' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol14;

          return utils.tryWrapperForImpl((_esValue$implSymbol14 = esValue[implSymbol]).removeAttributeNode.apply(_esValue$implSymbol14, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "attachShadow",
      value: function attachShadow(init) {
        var _esValue$implSymbol15;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'attachShadow' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = ShadowRootInit.convert(curArg, {
            context: "Failed to execute 'attachShadow' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol15 = esValue[implSymbol]).attachShadow.apply(_esValue$implSymbol15, args));
      }
    }, {
      key: "closest",
      value: function closest(selectors) {
        var _esValue$implSymbol16;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'closest' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'closest' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol16 = esValue[implSymbol]).closest.apply(_esValue$implSymbol16, args));
      }
    }, {
      key: "matches",
      value: function matches(selectors) {
        var _esValue$implSymbol17;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'matches' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'matches' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol17 = esValue[implSymbol]).matches.apply(_esValue$implSymbol17, args);
      }
    }, {
      key: "webkitMatchesSelector",
      value: function webkitMatchesSelector(selectors) {
        var _esValue$implSymbol18;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'webkitMatchesSelector' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'webkitMatchesSelector' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol18 = esValue[implSymbol]).webkitMatchesSelector.apply(_esValue$implSymbol18, args);
      }
    }, {
      key: "getElementsByTagName",
      value: function getElementsByTagName(qualifiedName) {
        var _esValue$implSymbol19;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementsByTagName' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByTagName' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol19 = esValue[implSymbol]).getElementsByTagName.apply(_esValue$implSymbol19, args));
      }
    }, {
      key: "getElementsByTagNameNS",
      value: function getElementsByTagNameNS(namespace, localName) {
        var _esValue$implSymbol20;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'getElementsByTagNameNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 1"
            });
          }

          args.push(curArg);
        }
        {
          var _curArg9 = arguments[1];
          _curArg9 = conversions["DOMString"](_curArg9, {
            context: "Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 2"
          });
          args.push(_curArg9);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol20 = esValue[implSymbol]).getElementsByTagNameNS.apply(_esValue$implSymbol20, args));
      }
    }, {
      key: "getElementsByClassName",
      value: function getElementsByClassName(classNames) {
        var _esValue$implSymbol21;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getElementsByClassName' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByClassName' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol21 = esValue[implSymbol]).getElementsByClassName.apply(_esValue$implSymbol21, args));
      }
    }, {
      key: "insertAdjacentElement",
      value: function insertAdjacentElement(where, element) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertAdjacentElement' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'insertAdjacentElement' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg10 = arguments[1];
          _curArg10 = exports.convert(_curArg10, {
            context: "Failed to execute 'insertAdjacentElement' on 'Element': parameter 2"
          });
          args.push(_curArg10);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol22;

          return utils.tryWrapperForImpl((_esValue$implSymbol22 = esValue[implSymbol]).insertAdjacentElement.apply(_esValue$implSymbol22, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "insertAdjacentText",
      value: function insertAdjacentText(where, data) {
        var _esValue$implSymbol23;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertAdjacentText' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'insertAdjacentText' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg11 = arguments[1];
          _curArg11 = conversions["DOMString"](_curArg11, {
            context: "Failed to execute 'insertAdjacentText' on 'Element': parameter 2"
          });
          args.push(_curArg11);
        }
        return (_esValue$implSymbol23 = esValue[implSymbol]).insertAdjacentText.apply(_esValue$implSymbol23, args);
      }
    }, {
      key: "insertAdjacentHTML",
      value: function insertAdjacentHTML(position, text) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertAdjacentHTML' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'insertAdjacentHTML' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg12 = arguments[1];
          _curArg12 = conversions["DOMString"](_curArg12, {
            context: "Failed to execute 'insertAdjacentHTML' on 'Element': parameter 2"
          });
          args.push(_curArg12);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol24;

          return (_esValue$implSymbol24 = esValue[implSymbol]).insertAdjacentHTML.apply(_esValue$implSymbol24, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "getClientRects",
      value: function getClientRects() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].getClientRects());
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].getBoundingClientRect());
      }
    }, {
      key: "before",
      value: function before() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'before' on 'Element': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol25;

          return (_esValue$implSymbol25 = esValue[implSymbol]).before.apply(_esValue$implSymbol25, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "after",
      value: function after() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'after' on 'Element': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol26;

          return (_esValue$implSymbol26 = esValue[implSymbol]).after.apply(_esValue$implSymbol26, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "replaceWith",
      value: function replaceWith() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'replaceWith' on 'Element': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol27;

          return (_esValue$implSymbol27 = esValue[implSymbol]).replaceWith.apply(_esValue$implSymbol27, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].remove();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "prepend",
      value: function prepend() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'prepend' on 'Element': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol28;

          return (_esValue$implSymbol28 = esValue[implSymbol]).prepend.apply(_esValue$implSymbol28, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "append",
      value: function append() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'append' on 'Element': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol29;

          return (_esValue$implSymbol29 = esValue[implSymbol]).append.apply(_esValue$implSymbol29, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "querySelector",
      value: function querySelector(selectors) {
        var _esValue$implSymbol30;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'querySelector' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'querySelector' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol30 = esValue[implSymbol]).querySelector.apply(_esValue$implSymbol30, args));
      }
    }, {
      key: "querySelectorAll",
      value: function querySelectorAll(selectors) {
        var _esValue$implSymbol31;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'querySelectorAll' on 'Element': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'querySelectorAll' on 'Element': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol31 = esValue[implSymbol]).querySelectorAll.apply(_esValue$implSymbol31, args));
      }
    }, {
      key: "namespaceURI",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["namespaceURI"];
      }
    }, {
      key: "prefix",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["prefix"];
      }
    }, {
      key: "localName",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["localName"];
      }
    }, {
      key: "tagName",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["tagName"];
      }
    }, {
      key: "id",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "id");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'id' property on 'Element': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "id", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "className",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "class");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'className' property on 'Element': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "class", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "classList",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "classList", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["classList"]);
        });
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var Q = esValue["classList"];

        if (!utils.isObject(Q)) {
          throw new TypeError("Property 'classList' is not an object");
        }

        Reflect.set(Q, "value", V);
      }
    }, {
      key: "slot",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "slot");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'slot' property on 'Element': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "slot", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "attributes",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "attributes", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["attributes"]);
        });
      }
    }, {
      key: "shadowRoot",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["shadowRoot"]);
      }
    }, {
      key: "innerHTML",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["innerHTML"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'innerHTML' property on 'Element': The provided value",
          treatNullAsEmptyString: true
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["innerHTML"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "outerHTML",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["outerHTML"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'outerHTML' property on 'Element': The provided value",
          treatNullAsEmptyString: true
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["outerHTML"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "scrollTop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["scrollTop"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unrestricted double"](V, {
          context: "Failed to set the 'scrollTop' property on 'Element': The provided value"
        });
        esValue[implSymbol]["scrollTop"] = V;
      }
    }, {
      key: "scrollLeft",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["scrollLeft"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unrestricted double"](V, {
          context: "Failed to set the 'scrollLeft' property on 'Element': The provided value"
        });
        esValue[implSymbol]["scrollLeft"] = V;
      }
    }, {
      key: "scrollWidth",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["scrollWidth"];
      }
    }, {
      key: "scrollHeight",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["scrollHeight"];
      }
    }, {
      key: "clientTop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["clientTop"];
      }
    }, {
      key: "clientLeft",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["clientLeft"];
      }
    }, {
      key: "clientWidth",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["clientWidth"];
      }
    }, {
      key: "clientHeight",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["clientHeight"];
      }
    }, {
      key: "previousElementSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["previousElementSibling"]);
      }
    }, {
      key: "nextElementSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["nextElementSibling"]);
      }
    }, {
      key: "children",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "children", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["children"]);
        });
      }
    }, {
      key: "firstElementChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["firstElementChild"]);
      }
    }, {
      key: "lastElementChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["lastElementChild"]);
      }
    }, {
      key: "childElementCount",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["childElementCount"];
      }
    }, {
      key: "assignedSlot",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["assignedSlot"]);
      }
    }]);

    return Element;
  }(globalObject.Node);

  Object.defineProperties(Element.prototype, (_Object$definePropert = {
    hasAttributes: {
      enumerable: true
    },
    getAttributeNames: {
      enumerable: true
    },
    getAttribute: {
      enumerable: true
    },
    getAttributeNS: {
      enumerable: true
    },
    setAttribute: {
      enumerable: true
    },
    setAttributeNS: {
      enumerable: true
    },
    removeAttribute: {
      enumerable: true
    },
    removeAttributeNS: {
      enumerable: true
    },
    toggleAttribute: {
      enumerable: true
    },
    hasAttribute: {
      enumerable: true
    },
    hasAttributeNS: {
      enumerable: true
    },
    getAttributeNode: {
      enumerable: true
    },
    getAttributeNodeNS: {
      enumerable: true
    },
    setAttributeNode: {
      enumerable: true
    },
    setAttributeNodeNS: {
      enumerable: true
    },
    removeAttributeNode: {
      enumerable: true
    },
    attachShadow: {
      enumerable: true
    },
    closest: {
      enumerable: true
    },
    matches: {
      enumerable: true
    },
    webkitMatchesSelector: {
      enumerable: true
    },
    getElementsByTagName: {
      enumerable: true
    },
    getElementsByTagNameNS: {
      enumerable: true
    },
    getElementsByClassName: {
      enumerable: true
    },
    insertAdjacentElement: {
      enumerable: true
    },
    insertAdjacentText: {
      enumerable: true
    },
    insertAdjacentHTML: {
      enumerable: true
    },
    getClientRects: {
      enumerable: true
    },
    getBoundingClientRect: {
      enumerable: true
    },
    before: {
      enumerable: true
    },
    after: {
      enumerable: true
    },
    replaceWith: {
      enumerable: true
    },
    remove: {
      enumerable: true
    },
    prepend: {
      enumerable: true
    },
    append: {
      enumerable: true
    },
    querySelector: {
      enumerable: true
    },
    querySelectorAll: {
      enumerable: true
    },
    namespaceURI: {
      enumerable: true
    },
    prefix: {
      enumerable: true
    },
    localName: {
      enumerable: true
    },
    tagName: {
      enumerable: true
    },
    id: {
      enumerable: true
    },
    className: {
      enumerable: true
    },
    classList: {
      enumerable: true
    },
    slot: {
      enumerable: true
    },
    attributes: {
      enumerable: true
    },
    shadowRoot: {
      enumerable: true
    },
    innerHTML: {
      enumerable: true
    },
    outerHTML: {
      enumerable: true
    },
    scrollTop: {
      enumerable: true
    },
    scrollLeft: {
      enumerable: true
    },
    scrollWidth: {
      enumerable: true
    },
    scrollHeight: {
      enumerable: true
    },
    clientTop: {
      enumerable: true
    },
    clientLeft: {
      enumerable: true
    },
    clientWidth: {
      enumerable: true
    },
    clientHeight: {
      enumerable: true
    },
    previousElementSibling: {
      enumerable: true
    },
    nextElementSibling: {
      enumerable: true
    },
    children: {
      enumerable: true
    },
    firstElementChild: {
      enumerable: true
    },
    lastElementChild: {
      enumerable: true
    },
    childElementCount: {
      enumerable: true
    },
    assignedSlot: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Element",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.unscopables, {
    value: {
      slot: true,
      before: true,
      after: true,
      replaceWith: true,
      remove: true,
      prepend: true,
      append: true,
      __proto__: null
    },
    configurable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Element;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Element
  });
};

var Impl = require("../nodes/Element-impl.js");