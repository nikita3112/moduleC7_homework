"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var EventModifierInit = require("./EventModifierInit.js");

exports._convertInherit = function (obj, ret) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  EventModifierInit._convertInherit(obj, ret, {
    context: context
  });

  {
    var key = "changedTouches";
    var value = obj === undefined || obj === null ? undefined : obj[key];

    if (value !== undefined) {
      if (!utils.isObject(value)) {
        throw new TypeError(context + " has member 'changedTouches' that" + " is not an iterable object.");
      } else {
        var V = [];
        var tmp = value;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var nextItem = _step.value;
            nextItem = utils.tryImplForWrapper(nextItem);
            V.push(nextItem);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        value = V;
      }

      ret[key] = value;
    } else {
      ret[key] = [];
    }
  }
  {
    var _key = "targetTouches";

    var _value = obj === undefined || obj === null ? undefined : obj[_key];

    if (_value !== undefined) {
      if (!utils.isObject(_value)) {
        throw new TypeError(context + " has member 'targetTouches' that" + " is not an iterable object.");
      } else {
        var _V = [];
        var _tmp = _value;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _tmp[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _nextItem = _step2.value;
            _nextItem = utils.tryImplForWrapper(_nextItem);

            _V.push(_nextItem);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        _value = _V;
      }

      ret[_key] = _value;
    } else {
      ret[_key] = [];
    }
  }
  {
    var _key2 = "touches";

    var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];

    if (_value2 !== undefined) {
      if (!utils.isObject(_value2)) {
        throw new TypeError(context + " has member 'touches' that" + " is not an iterable object.");
      } else {
        var _V2 = [];
        var _tmp2 = _value2;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = _tmp2[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _nextItem2 = _step3.value;
            _nextItem2 = utils.tryImplForWrapper(_nextItem2);

            _V2.push(_nextItem2);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        _value2 = _V2;
      }

      ret[_key2] = _value2;
    } else {
      ret[_key2] = [];
    }
  }
};

exports.convert = function convert(obj) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$context = _ref2.context,
      context = _ref2$context === void 0 ? "The provided value" : _ref2$context;

  if (obj !== undefined && _typeof(obj) !== "object" && typeof obj !== "function") {
    throw new TypeError("".concat(context, " is not an object."));
  }

  var ret = Object.create(null);

  exports._convertInherit(obj, ret, {
    context: context
  });

  return ret;
};