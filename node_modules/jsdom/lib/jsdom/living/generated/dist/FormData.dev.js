"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var HTMLFormElement = require("./HTMLFormElement.js");

var Blob = require("./Blob.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "FormData";
var IteratorPrototype = Object.create(utils.IteratorPrototype, _defineProperty({
  next: {
    value: function next() {
      var internal = this[utils.iterInternalSymbol];
      var target = internal.target,
          kind = internal.kind,
          index = internal.index;
      var values = Array.from(target[implSymbol]);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      var pair = values[index];
      internal.index = index + 1;

      var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = _slicedToArray(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];

      var result;

      switch (kind) {
        case "key":
          result = key;
          break;

        case "value":
          result = value;
          break;

        case "key+value":
          result = [key, value];
          break;
      }

      return {
        value: result,
        done: false
      };
    },
    writable: true,
    enumerable: true,
    configurable: true
  }
}, Symbol.toStringTag, {
  value: "FormData Iterator",
  configurable: true
}));

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'FormData'."));
};

exports.createDefaultIterator = function (target, kind) {
  var iterator = Object.create(IteratorPrototype);
  Object.defineProperty(iterator, utils.iterInternalSymbol, {
    value: {
      target: target,
      kind: kind,
      index: 0
    },
    configurable: true
  });
  return iterator;
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["FormData"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor FormData is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "Worker"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var FormData =
  /*#__PURE__*/
  function () {
    function FormData() {
      _classCallCheck(this, FormData);

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          curArg = HTMLFormElement.convert(curArg, {
            context: "Failed to construct 'FormData': parameter 1"
          });
        }

        args.push(curArg);
      }
      return exports.setup(Object.create((this instanceof FormData ? this.constructor : void 0).prototype), globalObject, args);
    }

    _createClass(FormData, [{
      key: "append",
      value: function append(name, value) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'append' on 'FormData': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];

        switch (arguments.length) {
          case 2:
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'append' on 'FormData': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg = arguments[1];

              if (Blob.is(_curArg)) {
                {
                  var _curArg2 = arguments[1];
                  _curArg2 = Blob.convert(_curArg2, {
                    context: "Failed to execute 'append' on 'FormData': parameter 2"
                  });
                  args.push(_curArg2);
                }
              } else {
                {
                  var _curArg3 = arguments[1];
                  _curArg3 = conversions["USVString"](_curArg3, {
                    context: "Failed to execute 'append' on 'FormData': parameter 2"
                  });
                  args.push(_curArg3);
                }
              }
            }
            break;

          default:
            {
              var _curArg4 = arguments[0];
              _curArg4 = conversions["USVString"](_curArg4, {
                context: "Failed to execute 'append' on 'FormData': parameter 1"
              });
              args.push(_curArg4);
            }
            {
              var _curArg5 = arguments[1];
              _curArg5 = Blob.convert(_curArg5, {
                context: "Failed to execute 'append' on 'FormData': parameter 2"
              });
              args.push(_curArg5);
            }
            {
              var _curArg6 = arguments[2];

              if (_curArg6 !== undefined) {
                _curArg6 = conversions["USVString"](_curArg6, {
                  context: "Failed to execute 'append' on 'FormData': parameter 3"
                });
              }

              args.push(_curArg6);
            }
        }

        return (_esValue$implSymbol = esValue[implSymbol]).append.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "delete",
      value: function _delete(name) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'delete' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'delete' on 'FormData': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol])["delete"].apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "get",
      value: function get(name) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'get' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'get' on 'FormData': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).get.apply(_esValue$implSymbol3, args));
      }
    }, {
      key: "getAll",
      value: function getAll(name) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getAll' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'getAll' on 'FormData': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol4 = esValue[implSymbol]).getAll.apply(_esValue$implSymbol4, args));
      }
    }, {
      key: "has",
      value: function has(name) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'has' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["USVString"](curArg, {
            context: "Failed to execute 'has' on 'FormData': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).has.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "set",
      value: function set(name, value) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'set' on 'FormData': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];

        switch (arguments.length) {
          case 2:
            {
              var curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'set' on 'FormData': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg7 = arguments[1];

              if (Blob.is(_curArg7)) {
                {
                  var _curArg8 = arguments[1];
                  _curArg8 = Blob.convert(_curArg8, {
                    context: "Failed to execute 'set' on 'FormData': parameter 2"
                  });
                  args.push(_curArg8);
                }
              } else {
                {
                  var _curArg9 = arguments[1];
                  _curArg9 = conversions["USVString"](_curArg9, {
                    context: "Failed to execute 'set' on 'FormData': parameter 2"
                  });
                  args.push(_curArg9);
                }
              }
            }
            break;

          default:
            {
              var _curArg10 = arguments[0];
              _curArg10 = conversions["USVString"](_curArg10, {
                context: "Failed to execute 'set' on 'FormData': parameter 1"
              });
              args.push(_curArg10);
            }
            {
              var _curArg11 = arguments[1];
              _curArg11 = Blob.convert(_curArg11, {
                context: "Failed to execute 'set' on 'FormData': parameter 2"
              });
              args.push(_curArg11);
            }
            {
              var _curArg12 = arguments[2];

              if (_curArg12 !== undefined) {
                _curArg12 = conversions["USVString"](_curArg12, {
                  context: "Failed to execute 'set' on 'FormData': parameter 3"
                });
              }

              args.push(_curArg12);
            }
        }

        return (_esValue$implSymbol6 = esValue[implSymbol]).set.apply(_esValue$implSymbol6, args);
      }
    }, {
      key: "keys",
      value: function keys() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "key");
      }
    }, {
      key: "values",
      value: function values() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "value");
      }
    }, {
      key: "entries",
      value: function entries() {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return exports.createDefaultIterator(this, "key+value");
      }
    }, {
      key: "forEach",
      value: function forEach(callback) {
        if (!this || !exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, " + "but only 0 present.");
        }

        if (typeof callback !== "function") {
          throw new TypeError("Failed to execute 'forEach' on 'iterable': The callback provided " + "as parameter 1 is not a function.");
        }

        var thisArg = arguments[1];
        var pairs = Array.from(this[implSymbol]);
        var i = 0;

        while (i < pairs.length) {
          var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
              _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),
              key = _pairs$i$map2[0],
              value = _pairs$i$map2[1];

          callback.call(thisArg, value, key, this);
          pairs = Array.from(this[implSymbol]);
          i++;
        }
      }
    }]);

    return FormData;
  }();

  Object.defineProperties(FormData.prototype, (_Object$definePropert = {
    append: {
      enumerable: true
    },
    "delete": {
      enumerable: true
    },
    get: {
      enumerable: true
    },
    getAll: {
      enumerable: true
    },
    has: {
      enumerable: true
    },
    set: {
      enumerable: true
    },
    keys: {
      enumerable: true
    },
    values: {
      enumerable: true
    },
    entries: {
      enumerable: true
    },
    forEach: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "FormData",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.iterator, {
    value: FormData.prototype.entries,
    configurable: true,
    writable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = FormData;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: FormData
  });
};

var Impl = require("../xhr/FormData-impl.js");