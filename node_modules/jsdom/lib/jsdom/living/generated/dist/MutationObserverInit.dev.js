"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

exports._convertInherit = function (obj, ret) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  {
    var key = "attributeFilter";
    var value = obj === undefined || obj === null ? undefined : obj[key];

    if (value !== undefined) {
      if (!utils.isObject(value)) {
        throw new TypeError(context + " has member 'attributeFilter' that" + " is not an iterable object.");
      } else {
        var V = [];
        var tmp = value;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var nextItem = _step.value;
            nextItem = conversions["DOMString"](nextItem, {
              context: context + " has member 'attributeFilter' that" + "'s element"
            });
            V.push(nextItem);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        value = V;
      }

      ret[key] = value;
    }
  }
  {
    var _key = "attributeOldValue";

    var _value = obj === undefined || obj === null ? undefined : obj[_key];

    if (_value !== undefined) {
      _value = conversions["boolean"](_value, {
        context: context + " has member 'attributeOldValue' that"
      });
      ret[_key] = _value;
    }
  }
  {
    var _key2 = "attributes";

    var _value2 = obj === undefined || obj === null ? undefined : obj[_key2];

    if (_value2 !== undefined) {
      _value2 = conversions["boolean"](_value2, {
        context: context + " has member 'attributes' that"
      });
      ret[_key2] = _value2;
    }
  }
  {
    var _key3 = "characterData";

    var _value3 = obj === undefined || obj === null ? undefined : obj[_key3];

    if (_value3 !== undefined) {
      _value3 = conversions["boolean"](_value3, {
        context: context + " has member 'characterData' that"
      });
      ret[_key3] = _value3;
    }
  }
  {
    var _key4 = "characterDataOldValue";

    var _value4 = obj === undefined || obj === null ? undefined : obj[_key4];

    if (_value4 !== undefined) {
      _value4 = conversions["boolean"](_value4, {
        context: context + " has member 'characterDataOldValue' that"
      });
      ret[_key4] = _value4;
    }
  }
  {
    var _key5 = "childList";

    var _value5 = obj === undefined || obj === null ? undefined : obj[_key5];

    if (_value5 !== undefined) {
      _value5 = conversions["boolean"](_value5, {
        context: context + " has member 'childList' that"
      });
      ret[_key5] = _value5;
    } else {
      ret[_key5] = false;
    }
  }
  {
    var _key6 = "subtree";

    var _value6 = obj === undefined || obj === null ? undefined : obj[_key6];

    if (_value6 !== undefined) {
      _value6 = conversions["boolean"](_value6, {
        context: context + " has member 'subtree' that"
      });
      ret[_key6] = _value6;
    } else {
      ret[_key6] = false;
    }
  }
};

exports.convert = function convert(obj) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$context = _ref2.context,
      context = _ref2$context === void 0 ? "The provided value" : _ref2$context;

  if (obj !== undefined && _typeof(obj) !== "object" && typeof obj !== "function") {
    throw new TypeError("".concat(context, " is not an object."));
  }

  var ret = Object.create(null);

  exports._convertInherit(obj, ret, {
    context: context
  });

  return ret;
};