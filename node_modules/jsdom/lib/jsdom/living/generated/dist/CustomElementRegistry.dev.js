"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var ElementDefinitionOptions = require("./ElementDefinitionOptions.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var Node = require("./Node.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "CustomElementRegistry";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'CustomElementRegistry'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["CustomElementRegistry"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor CustomElementRegistry is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var CustomElementRegistry =
  /*#__PURE__*/
  function () {
    function CustomElementRegistry() {
      _classCallCheck(this, CustomElementRegistry);

      throw new TypeError("Illegal constructor");
    }

    _createClass(CustomElementRegistry, [{
      key: "define",
      value: function define(name, constructor) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'define' on 'CustomElementRegistry': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'define' on 'CustomElementRegistry': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = utils.tryImplForWrapper(_curArg);
          args.push(_curArg);
        }
        {
          var _curArg2 = arguments[2];
          _curArg2 = ElementDefinitionOptions.convert(_curArg2, {
            context: "Failed to execute 'define' on 'CustomElementRegistry': parameter 3"
          });
          args.push(_curArg2);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol;

          return (_esValue$implSymbol = esValue[implSymbol]).define.apply(_esValue$implSymbol, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "get",
      value: function get(name) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'get' on 'CustomElementRegistry': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'get' on 'CustomElementRegistry': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).get.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "whenDefined",
      value: function whenDefined(name) {
        try {
          var _esValue$implSymbol3;

          var esValue = this !== null && this !== undefined ? this : globalObject;

          if (!exports.is(esValue)) {
            throw new TypeError("Illegal invocation");
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to execute 'whenDefined' on 'CustomElementRegistry': 1 argument required, but only " + arguments.length + " present.");
          }

          var args = [];
          {
            var curArg = arguments[0];
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'whenDefined' on 'CustomElementRegistry': parameter 1"
            });
            args.push(curArg);
          }
          return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).whenDefined.apply(_esValue$implSymbol3, args));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    }, {
      key: "upgrade",
      value: function upgrade(root) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'upgrade' on 'CustomElementRegistry': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'upgrade' on 'CustomElementRegistry': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol4;

          return (_esValue$implSymbol4 = esValue[implSymbol]).upgrade.apply(_esValue$implSymbol4, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }]);

    return CustomElementRegistry;
  }();

  Object.defineProperties(CustomElementRegistry.prototype, _defineProperty({
    define: {
      enumerable: true
    },
    get: {
      enumerable: true
    },
    whenDefined: {
      enumerable: true
    },
    upgrade: {
      enumerable: true
    }
  }, Symbol.toStringTag, {
    value: "CustomElementRegistry",
    configurable: true
  }));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = CustomElementRegistry;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: CustomElementRegistry
  });
};

var Impl = require("../custom-elements/CustomElementRegistry-impl.js");