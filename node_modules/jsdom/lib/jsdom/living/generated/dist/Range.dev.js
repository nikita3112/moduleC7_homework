"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var Node = require("./Node.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var AbstractRange = require("./AbstractRange.js");

var interfaceName = "Range";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Range'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Range"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Range is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  AbstractRange._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.AbstractRange === undefined) {
    throw new Error("Internal error: attempting to evaluate Range before AbstractRange");
  }

  var Range =
  /*#__PURE__*/
  function (_globalObject$Abstrac) {
    _inherits(Range, _globalObject$Abstrac);

    function Range() {
      var _this;

      _classCallCheck(this, Range);

      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof Range ? this.constructor : void 0).prototype), globalObject, undefined));
    }

    _createClass(Range, [{
      key: "setStart",
      value: function setStart(node, offset) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'setStart' on 'Range': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setStart' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["unsigned long"](_curArg, {
            context: "Failed to execute 'setStart' on 'Range': parameter 2"
          });
          args.push(_curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).setStart.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "setEnd",
      value: function setEnd(node, offset) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'setEnd' on 'Range': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setEnd' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = conversions["unsigned long"](_curArg2, {
            context: "Failed to execute 'setEnd' on 'Range': parameter 2"
          });
          args.push(_curArg2);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).setEnd.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "setStartBefore",
      value: function setStartBefore(node) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setStartBefore' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setStartBefore' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).setStartBefore.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "setStartAfter",
      value: function setStartAfter(node) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setStartAfter' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setStartAfter' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).setStartAfter.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "setEndBefore",
      value: function setEndBefore(node) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setEndBefore' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setEndBefore' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).setEndBefore.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "setEndAfter",
      value: function setEndAfter(node) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'setEndAfter' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'setEndAfter' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol6 = esValue[implSymbol]).setEndAfter.apply(_esValue$implSymbol6, args);
      }
    }, {
      key: "collapse",
      value: function collapse() {
        var _esValue$implSymbol7;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["boolean"](curArg, {
              context: "Failed to execute 'collapse' on 'Range': parameter 1"
            });
          } else {
            curArg = false;
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol7 = esValue[implSymbol]).collapse.apply(_esValue$implSymbol7, args);
      }
    }, {
      key: "selectNode",
      value: function selectNode(node) {
        var _esValue$implSymbol8;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'selectNode' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'selectNode' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol8 = esValue[implSymbol]).selectNode.apply(_esValue$implSymbol8, args);
      }
    }, {
      key: "selectNodeContents",
      value: function selectNodeContents(node) {
        var _esValue$implSymbol9;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'selectNodeContents' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'selectNodeContents' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol9 = esValue[implSymbol]).selectNodeContents.apply(_esValue$implSymbol9, args);
      }
    }, {
      key: "compareBoundaryPoints",
      value: function compareBoundaryPoints(how, sourceRange) {
        var _esValue$implSymbol10;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'compareBoundaryPoints' on 'Range': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned short"](curArg, {
            context: "Failed to execute 'compareBoundaryPoints' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];
          _curArg3 = exports.convert(_curArg3, {
            context: "Failed to execute 'compareBoundaryPoints' on 'Range': parameter 2"
          });
          args.push(_curArg3);
        }
        return (_esValue$implSymbol10 = esValue[implSymbol]).compareBoundaryPoints.apply(_esValue$implSymbol10, args);
      }
    }, {
      key: "deleteContents",
      value: function deleteContents() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].deleteContents();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "extractContents",
      value: function extractContents() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return utils.tryWrapperForImpl(esValue[implSymbol].extractContents());
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "cloneContents",
      value: function cloneContents() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return utils.tryWrapperForImpl(esValue[implSymbol].cloneContents());
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "insertNode",
      value: function insertNode(node) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'insertNode' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'insertNode' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol11;

          return (_esValue$implSymbol11 = esValue[implSymbol]).insertNode.apply(_esValue$implSymbol11, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "surroundContents",
      value: function surroundContents(newParent) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'surroundContents' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'surroundContents' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol12;

          return (_esValue$implSymbol12 = esValue[implSymbol]).surroundContents.apply(_esValue$implSymbol12, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "cloneRange",
      value: function cloneRange() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol].cloneRange());
      }
    }, {
      key: "detach",
      value: function detach() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].detach();
      }
    }, {
      key: "isPointInRange",
      value: function isPointInRange(node, offset) {
        var _esValue$implSymbol13;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'isPointInRange' on 'Range': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'isPointInRange' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg4 = arguments[1];
          _curArg4 = conversions["unsigned long"](_curArg4, {
            context: "Failed to execute 'isPointInRange' on 'Range': parameter 2"
          });
          args.push(_curArg4);
        }
        return (_esValue$implSymbol13 = esValue[implSymbol]).isPointInRange.apply(_esValue$implSymbol13, args);
      }
    }, {
      key: "comparePoint",
      value: function comparePoint(node, offset) {
        var _esValue$implSymbol14;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'comparePoint' on 'Range': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'comparePoint' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg5 = arguments[1];
          _curArg5 = conversions["unsigned long"](_curArg5, {
            context: "Failed to execute 'comparePoint' on 'Range': parameter 2"
          });
          args.push(_curArg5);
        }
        return (_esValue$implSymbol14 = esValue[implSymbol]).comparePoint.apply(_esValue$implSymbol14, args);
      }
    }, {
      key: "intersectsNode",
      value: function intersectsNode(node) {
        var _esValue$implSymbol15;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'intersectsNode' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = Node.convert(curArg, {
            context: "Failed to execute 'intersectsNode' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol15 = esValue[implSymbol]).intersectsNode.apply(_esValue$implSymbol15, args);
      }
    }, {
      key: "toString",
      value: function toString() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].toString();
      }
    }, {
      key: "createContextualFragment",
      value: function createContextualFragment(fragment) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'createContextualFragment' on 'Range': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createContextualFragment' on 'Range': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol16;

          return utils.tryWrapperForImpl((_esValue$implSymbol16 = esValue[implSymbol]).createContextualFragment.apply(_esValue$implSymbol16, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "commonAncestorContainer",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["commonAncestorContainer"]);
      }
    }]);

    return Range;
  }(globalObject.AbstractRange);

  Object.defineProperties(Range.prototype, (_Object$definePropert = {
    setStart: {
      enumerable: true
    },
    setEnd: {
      enumerable: true
    },
    setStartBefore: {
      enumerable: true
    },
    setStartAfter: {
      enumerable: true
    },
    setEndBefore: {
      enumerable: true
    },
    setEndAfter: {
      enumerable: true
    },
    collapse: {
      enumerable: true
    },
    selectNode: {
      enumerable: true
    },
    selectNodeContents: {
      enumerable: true
    },
    compareBoundaryPoints: {
      enumerable: true
    },
    deleteContents: {
      enumerable: true
    },
    extractContents: {
      enumerable: true
    },
    cloneContents: {
      enumerable: true
    },
    insertNode: {
      enumerable: true
    },
    surroundContents: {
      enumerable: true
    },
    cloneRange: {
      enumerable: true
    },
    detach: {
      enumerable: true
    },
    isPointInRange: {
      enumerable: true
    },
    comparePoint: {
      enumerable: true
    },
    intersectsNode: {
      enumerable: true
    },
    toString: {
      enumerable: true
    },
    createContextualFragment: {
      enumerable: true
    },
    commonAncestorContainer: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Range",
    configurable: true
  }), _defineProperty(_Object$definePropert, "START_TO_START", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "START_TO_END", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "END_TO_END", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "END_TO_START", {
    value: 3,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(Range, {
    START_TO_START: {
      value: 0,
      enumerable: true
    },
    START_TO_END: {
      value: 1,
      enumerable: true
    },
    END_TO_END: {
      value: 2,
      enumerable: true
    },
    END_TO_START: {
      value: 3,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Range;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Range
  });
};

var Impl = require("../range/Range-impl.js");