"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var TextTrackKind = require("./TextTrackKind.js");

var parseURLToResultingURLRecord_helpers_document_base_url = require("../helpers/document-base-url.js").parseURLToResultingURLRecord;

var serializeURLwhatwg_url = require("whatwg-url").serializeURL;

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var HTMLElement = require("./HTMLElement.js");

var interfaceName = "HTMLMediaElement";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'HTMLMediaElement'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["HTMLMediaElement"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor HTMLMediaElement is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  HTMLElement._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.HTMLElement === undefined) {
    throw new Error("Internal error: attempting to evaluate HTMLMediaElement before HTMLElement");
  }

  var HTMLMediaElement =
  /*#__PURE__*/
  function (_globalObject$HTMLEle) {
    _inherits(HTMLMediaElement, _globalObject$HTMLEle);

    function HTMLMediaElement() {
      var _this;

      _classCallCheck(this, HTMLMediaElement);

      throw new TypeError("Illegal constructor");
      return _possibleConstructorReturn(_this);
    }

    _createClass(HTMLMediaElement, [{
      key: "load",
      value: function load() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].load();
      }
    }, {
      key: "canPlayType",
      value: function canPlayType(type) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'canPlayType' on 'HTMLMediaElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'canPlayType' on 'HTMLMediaElement': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).canPlayType.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "play",
      value: function play() {
        try {
          var esValue = this !== null && this !== undefined ? this : globalObject;

          if (!exports.is(esValue)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(esValue[implSymbol].play());
        } catch (e) {
          return Promise.reject(e);
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].pause();
      }
    }, {
      key: "addTextTrack",
      value: function addTextTrack(kind) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'addTextTrack' on 'HTMLMediaElement': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = TextTrackKind.convert(curArg, {
            context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];

          if (_curArg !== undefined) {
            _curArg = conversions["DOMString"](_curArg, {
              context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 2"
            });
          } else {
            _curArg = "";
          }

          args.push(_curArg);
        }
        {
          var _curArg2 = arguments[2];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["DOMString"](_curArg2, {
              context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 3"
            });
          } else {
            _curArg2 = "";
          }

          args.push(_curArg2);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).addTextTrack.apply(_esValue$implSymbol2, args));
      }
    }, {
      key: "src",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "src");

          if (value === null) {
            return "";
          }

          var urlRecord = parseURLToResultingURLRecord_helpers_document_base_url(value, esValue[implSymbol]._ownerDocument);

          if (urlRecord !== null) {
            return serializeURLwhatwg_url(urlRecord);
          }

          return conversions.USVString(value);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["USVString"](V, {
          context: "Failed to set the 'src' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "src", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "currentSrc",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["currentSrc"];
      }
    }, {
      key: "crossOrigin",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "crossorigin");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (V === null || V === undefined) {
          V = null;
        } else {
          V = conversions["DOMString"](V, {
            context: "Failed to set the 'crossOrigin' property on 'HTMLMediaElement': The provided value"
          });
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "crossorigin", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "networkState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["networkState"];
      }
    }, {
      key: "preload",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var value = esValue[implSymbol].getAttributeNS(null, "preload");
          return value === null ? "" : value;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'preload' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol].setAttributeNS(null, "preload", V);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "buffered",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["buffered"]);
      }
    }, {
      key: "readyState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["readyState"];
      }
    }, {
      key: "seeking",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["seeking"];
      }
    }, {
      key: "currentTime",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["currentTime"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["double"](V, {
          context: "Failed to set the 'currentTime' property on 'HTMLMediaElement': The provided value"
        });
        esValue[implSymbol]["currentTime"] = V;
      }
    }, {
      key: "duration",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["duration"];
      }
    }, {
      key: "paused",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["paused"];
      }
    }, {
      key: "defaultPlaybackRate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["defaultPlaybackRate"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["double"](V, {
          context: "Failed to set the 'defaultPlaybackRate' property on 'HTMLMediaElement': The provided value"
        });
        esValue[implSymbol]["defaultPlaybackRate"] = V;
      }
    }, {
      key: "playbackRate",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["playbackRate"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["double"](V, {
          context: "Failed to set the 'playbackRate' property on 'HTMLMediaElement': The provided value"
        });
        esValue[implSymbol]["playbackRate"] = V;
      }
    }, {
      key: "played",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["played"]);
      }
    }, {
      key: "seekable",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["seekable"]);
      }
    }, {
      key: "ended",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["ended"];
      }
    }, {
      key: "autoplay",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "autoplay");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'autoplay' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "autoplay", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "autoplay");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "loop",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "loop");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'loop' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "loop", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "loop");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "controls",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "controls");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'controls' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "controls", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "controls");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "volume",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["volume"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["double"](V, {
          context: "Failed to set the 'volume' property on 'HTMLMediaElement': The provided value"
        });
        esValue[implSymbol]["volume"] = V;
      }
    }, {
      key: "muted",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["muted"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'muted' property on 'HTMLMediaElement': The provided value"
        });
        esValue[implSymbol]["muted"] = V;
      }
    }, {
      key: "defaultMuted",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].hasAttributeNS(null, "muted");
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'defaultMuted' property on 'HTMLMediaElement': The provided value"
        });
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          if (V) {
            esValue[implSymbol].setAttributeNS(null, "muted", "");
          } else {
            esValue[implSymbol].removeAttributeNS(null, "muted");
          }
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "audioTracks",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "audioTracks", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["audioTracks"]);
        });
      }
    }, {
      key: "videoTracks",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "videoTracks", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["videoTracks"]);
        });
      }
    }, {
      key: "textTracks",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "textTracks", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["textTracks"]);
        });
      }
    }]);

    return HTMLMediaElement;
  }(globalObject.HTMLElement);

  Object.defineProperties(HTMLMediaElement.prototype, (_Object$definePropert = {
    load: {
      enumerable: true
    },
    canPlayType: {
      enumerable: true
    },
    play: {
      enumerable: true
    },
    pause: {
      enumerable: true
    },
    addTextTrack: {
      enumerable: true
    },
    src: {
      enumerable: true
    },
    currentSrc: {
      enumerable: true
    },
    crossOrigin: {
      enumerable: true
    },
    networkState: {
      enumerable: true
    },
    preload: {
      enumerable: true
    },
    buffered: {
      enumerable: true
    },
    readyState: {
      enumerable: true
    },
    seeking: {
      enumerable: true
    },
    currentTime: {
      enumerable: true
    },
    duration: {
      enumerable: true
    },
    paused: {
      enumerable: true
    },
    defaultPlaybackRate: {
      enumerable: true
    },
    playbackRate: {
      enumerable: true
    },
    played: {
      enumerable: true
    },
    seekable: {
      enumerable: true
    },
    ended: {
      enumerable: true
    },
    autoplay: {
      enumerable: true
    },
    loop: {
      enumerable: true
    },
    controls: {
      enumerable: true
    },
    volume: {
      enumerable: true
    },
    muted: {
      enumerable: true
    },
    defaultMuted: {
      enumerable: true
    },
    audioTracks: {
      enumerable: true
    },
    videoTracks: {
      enumerable: true
    },
    textTracks: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "HTMLMediaElement",
    configurable: true
  }), _defineProperty(_Object$definePropert, "NETWORK_EMPTY", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "NETWORK_IDLE", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "NETWORK_LOADING", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "NETWORK_NO_SOURCE", {
    value: 3,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HAVE_NOTHING", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HAVE_METADATA", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HAVE_CURRENT_DATA", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HAVE_FUTURE_DATA", {
    value: 3,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HAVE_ENOUGH_DATA", {
    value: 4,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(HTMLMediaElement, {
    NETWORK_EMPTY: {
      value: 0,
      enumerable: true
    },
    NETWORK_IDLE: {
      value: 1,
      enumerable: true
    },
    NETWORK_LOADING: {
      value: 2,
      enumerable: true
    },
    NETWORK_NO_SOURCE: {
      value: 3,
      enumerable: true
    },
    HAVE_NOTHING: {
      value: 0,
      enumerable: true
    },
    HAVE_METADATA: {
      value: 1,
      enumerable: true
    },
    HAVE_CURRENT_DATA: {
      value: 2,
      enumerable: true
    },
    HAVE_FUTURE_DATA: {
      value: 3,
      enumerable: true
    },
    HAVE_ENOUGH_DATA: {
      value: 4,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = HTMLMediaElement;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: HTMLMediaElement
  });
};

var Impl = require("../nodes/HTMLMediaElement-impl.js");