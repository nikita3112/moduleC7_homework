"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var Document = require("./Document.js");

var Blob = require("./Blob.js");

var FormData = require("./FormData.js");

var XMLHttpRequestResponseType = require("./XMLHttpRequestResponseType.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var XMLHttpRequestEventTarget = require("./XMLHttpRequestEventTarget.js");

var interfaceName = "XMLHttpRequest";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'XMLHttpRequest'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["XMLHttpRequest"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor XMLHttpRequest is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  XMLHttpRequestEventTarget._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "DedicatedWorker", "SharedWorker"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.XMLHttpRequestEventTarget === undefined) {
    throw new Error("Internal error: attempting to evaluate XMLHttpRequest before XMLHttpRequestEventTarget");
  }

  var XMLHttpRequest =
  /*#__PURE__*/
  function (_globalObject$XMLHttp) {
    _inherits(XMLHttpRequest, _globalObject$XMLHttp);

    function XMLHttpRequest() {
      var _this;

      _classCallCheck(this, XMLHttpRequest);

      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof XMLHttpRequest ? this.constructor : void 0).prototype), globalObject, undefined));
    }

    _createClass(XMLHttpRequest, [{
      key: "open",
      value: function open(method, url) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'open' on 'XMLHttpRequest': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];

        switch (arguments.length) {
          case 2:
            {
              var curArg = arguments[0];
              curArg = conversions["ByteString"](curArg, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 1"
              });
              args.push(curArg);
            }
            {
              var _curArg = arguments[1];
              _curArg = conversions["USVString"](_curArg, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 2"
              });
              args.push(_curArg);
            }
            break;

          case 3:
            {
              var _curArg2 = arguments[0];
              _curArg2 = conversions["ByteString"](_curArg2, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 1"
              });
              args.push(_curArg2);
            }
            {
              var _curArg3 = arguments[1];
              _curArg3 = conversions["USVString"](_curArg3, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 2"
              });
              args.push(_curArg3);
            }
            {
              var _curArg4 = arguments[2];
              _curArg4 = conversions["boolean"](_curArg4, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 3"
              });
              args.push(_curArg4);
            }
            break;

          case 4:
            {
              var _curArg5 = arguments[0];
              _curArg5 = conversions["ByteString"](_curArg5, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 1"
              });
              args.push(_curArg5);
            }
            {
              var _curArg6 = arguments[1];
              _curArg6 = conversions["USVString"](_curArg6, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 2"
              });
              args.push(_curArg6);
            }
            {
              var _curArg7 = arguments[2];
              _curArg7 = conversions["boolean"](_curArg7, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 3"
              });
              args.push(_curArg7);
            }
            {
              var _curArg8 = arguments[3];

              if (_curArg8 !== undefined) {
                if (_curArg8 === null || _curArg8 === undefined) {
                  _curArg8 = null;
                } else {
                  _curArg8 = conversions["USVString"](_curArg8, {
                    context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 4"
                  });
                }
              } else {
                _curArg8 = null;
              }

              args.push(_curArg8);
            }
            break;

          default:
            {
              var _curArg9 = arguments[0];
              _curArg9 = conversions["ByteString"](_curArg9, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 1"
              });
              args.push(_curArg9);
            }
            {
              var _curArg10 = arguments[1];
              _curArg10 = conversions["USVString"](_curArg10, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 2"
              });
              args.push(_curArg10);
            }
            {
              var _curArg11 = arguments[2];
              _curArg11 = conversions["boolean"](_curArg11, {
                context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 3"
              });
              args.push(_curArg11);
            }
            {
              var _curArg12 = arguments[3];

              if (_curArg12 !== undefined) {
                if (_curArg12 === null || _curArg12 === undefined) {
                  _curArg12 = null;
                } else {
                  _curArg12 = conversions["USVString"](_curArg12, {
                    context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 4"
                  });
                }
              } else {
                _curArg12 = null;
              }

              args.push(_curArg12);
            }
            {
              var _curArg13 = arguments[4];

              if (_curArg13 !== undefined) {
                if (_curArg13 === null || _curArg13 === undefined) {
                  _curArg13 = null;
                } else {
                  _curArg13 = conversions["USVString"](_curArg13, {
                    context: "Failed to execute 'open' on 'XMLHttpRequest': parameter 5"
                  });
                }
              } else {
                _curArg13 = null;
              }

              args.push(_curArg13);
            }
        }

        return (_esValue$implSymbol = esValue[implSymbol]).open.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "setRequestHeader",
      value: function setRequestHeader(name, value) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'setRequestHeader' on 'XMLHttpRequest': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'setRequestHeader' on 'XMLHttpRequest': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg14 = arguments[1];
          _curArg14 = conversions["ByteString"](_curArg14, {
            context: "Failed to execute 'setRequestHeader' on 'XMLHttpRequest': parameter 2"
          });
          args.push(_curArg14);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).setRequestHeader.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "send",
      value: function send() {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            if (curArg === null || curArg === undefined) {
              curArg = null;
            } else {
              if (Document.is(curArg) || Blob.is(curArg) || FormData.is(curArg)) {
                curArg = utils.implForWrapper(curArg);
              } else if (utils.isArrayBuffer(curArg)) {} else if (ArrayBuffer.isView(curArg)) {} else {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to execute 'send' on 'XMLHttpRequest': parameter 1"
                });
              }
            }
          } else {
            curArg = null;
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).send.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "abort",
      value: function abort() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].abort();
      }
    }, {
      key: "getResponseHeader",
      value: function getResponseHeader(name) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getResponseHeader' on 'XMLHttpRequest': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["ByteString"](curArg, {
            context: "Failed to execute 'getResponseHeader' on 'XMLHttpRequest': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).getResponseHeader.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "getAllResponseHeaders",
      value: function getAllResponseHeaders() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].getAllResponseHeaders();
      }
    }, {
      key: "overrideMimeType",
      value: function overrideMimeType(mime) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'overrideMimeType' on 'XMLHttpRequest': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'overrideMimeType' on 'XMLHttpRequest': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).overrideMimeType.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "onreadystatechange",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onreadystatechange"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onreadystatechange"] = V;
      }
    }, {
      key: "readyState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["readyState"];
      }
    }, {
      key: "timeout",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["timeout"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["unsigned long"](V, {
          context: "Failed to set the 'timeout' property on 'XMLHttpRequest': The provided value"
        });
        esValue[implSymbol]["timeout"] = V;
      }
    }, {
      key: "withCredentials",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["withCredentials"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["boolean"](V, {
          context: "Failed to set the 'withCredentials' property on 'XMLHttpRequest': The provided value"
        });
        esValue[implSymbol]["withCredentials"] = V;
      }
    }, {
      key: "upload",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "upload", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["upload"]);
        });
      }
    }, {
      key: "responseURL",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["responseURL"];
      }
    }, {
      key: "status",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["status"];
      }
    }, {
      key: "statusText",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["statusText"];
      }
    }, {
      key: "responseType",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["responseType"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = "".concat(V);

        if (!XMLHttpRequestResponseType.enumerationValues.has(V)) {
          return;
        }

        esValue[implSymbol]["responseType"] = V;
      }
    }, {
      key: "response",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["response"];
      }
    }, {
      key: "responseText",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["responseText"];
      }
    }, {
      key: "responseXML",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["responseXML"]);
      }
    }]);

    return XMLHttpRequest;
  }(globalObject.XMLHttpRequestEventTarget);

  Object.defineProperties(XMLHttpRequest.prototype, (_Object$definePropert = {
    open: {
      enumerable: true
    },
    setRequestHeader: {
      enumerable: true
    },
    send: {
      enumerable: true
    },
    abort: {
      enumerable: true
    },
    getResponseHeader: {
      enumerable: true
    },
    getAllResponseHeaders: {
      enumerable: true
    },
    overrideMimeType: {
      enumerable: true
    },
    onreadystatechange: {
      enumerable: true
    },
    readyState: {
      enumerable: true
    },
    timeout: {
      enumerable: true
    },
    withCredentials: {
      enumerable: true
    },
    upload: {
      enumerable: true
    },
    responseURL: {
      enumerable: true
    },
    status: {
      enumerable: true
    },
    statusText: {
      enumerable: true
    },
    responseType: {
      enumerable: true
    },
    response: {
      enumerable: true
    },
    responseText: {
      enumerable: true
    },
    responseXML: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "XMLHttpRequest",
    configurable: true
  }), _defineProperty(_Object$definePropert, "UNSENT", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "OPENED", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "HEADERS_RECEIVED", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "LOADING", {
    value: 3,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DONE", {
    value: 4,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(XMLHttpRequest, {
    UNSENT: {
      value: 0,
      enumerable: true
    },
    OPENED: {
      value: 1,
      enumerable: true
    },
    HEADERS_RECEIVED: {
      value: 2,
      enumerable: true
    },
    LOADING: {
      value: 3,
      enumerable: true
    },
    DONE: {
      value: 4,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = XMLHttpRequest;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: XMLHttpRequest
  });
};

var Impl = require("../xhr/XMLHttpRequest-impl.js");