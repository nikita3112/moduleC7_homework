"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var Blob = require("./Blob.js");

var BinaryType = require("./BinaryType.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var EventTarget = require("./EventTarget.js");

var interfaceName = "WebSocket";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'WebSocket'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["WebSocket"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor WebSocket is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  EventTarget._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window", "Worker"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.EventTarget === undefined) {
    throw new Error("Internal error: attempting to evaluate WebSocket before EventTarget");
  }

  var WebSocket =
  /*#__PURE__*/
  function (_globalObject$EventTa) {
    _inherits(WebSocket, _globalObject$EventTa);

    function WebSocket(url) {
      var _this;

      _classCallCheck(this, WebSocket);

      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'WebSocket': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["USVString"](curArg, {
          context: "Failed to construct 'WebSocket': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg = arguments[1];

        if (_curArg !== undefined) {
          if (utils.isObject(_curArg)) {
            if (_curArg[Symbol.iterator] !== undefined) {
              if (!utils.isObject(_curArg)) {
                throw new TypeError("Failed to construct 'WebSocket': parameter 2" + " sequence" + " is not an iterable object.");
              } else {
                var V = [];
                var tmp = _curArg;
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var nextItem = _step.value;
                    nextItem = conversions["DOMString"](nextItem, {
                      context: "Failed to construct 'WebSocket': parameter 2" + " sequence" + "'s element"
                    });
                    V.push(nextItem);
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                      _iterator["return"]();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                _curArg = V;
              }
            } else {}
          } else {
            _curArg = conversions["DOMString"](_curArg, {
              context: "Failed to construct 'WebSocket': parameter 2"
            });
          }
        } else {
          _curArg = [];
        }

        args.push(_curArg);
      }
      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof WebSocket ? this.constructor : void 0).prototype), globalObject, args));
    }

    _createClass(WebSocket, [{
      key: "close",
      value: function close() {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["unsigned short"](curArg, {
              context: "Failed to execute 'close' on 'WebSocket': parameter 1",
              clamp: true
            });
          }

          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];

          if (_curArg2 !== undefined) {
            _curArg2 = conversions["USVString"](_curArg2, {
              context: "Failed to execute 'close' on 'WebSocket': parameter 2"
            });
          }

          args.push(_curArg2);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).close.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "send",
      value: function send(data) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'send' on 'WebSocket': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (Blob.is(curArg)) {
            {
              var _curArg3 = arguments[0];
              _curArg3 = Blob.convert(_curArg3, {
                context: "Failed to execute 'send' on 'WebSocket': parameter 1"
              });
              args.push(_curArg3);
            }
          } else if (utils.isArrayBuffer(curArg)) {
            {
              var _curArg4 = arguments[0];
              _curArg4 = conversions["ArrayBuffer"](_curArg4, {
                context: "Failed to execute 'send' on 'WebSocket': parameter 1"
              });
              args.push(_curArg4);
            }
          } else if (ArrayBuffer.isView(curArg)) {
            {
              var _curArg5 = arguments[0];

              if (ArrayBuffer.isView(_curArg5)) {} else {
                throw new TypeError("Failed to execute 'send' on 'WebSocket': parameter 1" + " is not of any supported type.");
              }

              args.push(_curArg5);
            }
          } else {
            {
              var _curArg6 = arguments[0];
              _curArg6 = conversions["USVString"](_curArg6, {
                context: "Failed to execute 'send' on 'WebSocket': parameter 1"
              });
              args.push(_curArg6);
            }
          }
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).send.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "url",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["url"];
      }
    }, {
      key: "readyState",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["readyState"];
      }
    }, {
      key: "bufferedAmount",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["bufferedAmount"];
      }
    }, {
      key: "onopen",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onopen"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onopen"] = V;
      }
    }, {
      key: "onerror",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onerror"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onerror"] = V;
      }
    }, {
      key: "onclose",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onclose"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onclose"] = V;
      }
    }, {
      key: "extensions",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["extensions"];
      }
    }, {
      key: "protocol",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["protocol"];
      }
    }, {
      key: "onmessage",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["onmessage"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);
        esValue[implSymbol]["onmessage"] = V;
      }
    }, {
      key: "binaryType",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["binaryType"]);
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = "".concat(V);

        if (!BinaryType.enumerationValues.has(V)) {
          return;
        }

        esValue[implSymbol]["binaryType"] = V;
      }
    }]);

    return WebSocket;
  }(globalObject.EventTarget);

  Object.defineProperties(WebSocket.prototype, (_Object$definePropert = {
    close: {
      enumerable: true
    },
    send: {
      enumerable: true
    },
    url: {
      enumerable: true
    },
    readyState: {
      enumerable: true
    },
    bufferedAmount: {
      enumerable: true
    },
    onopen: {
      enumerable: true
    },
    onerror: {
      enumerable: true
    },
    onclose: {
      enumerable: true
    },
    extensions: {
      enumerable: true
    },
    protocol: {
      enumerable: true
    },
    onmessage: {
      enumerable: true
    },
    binaryType: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "WebSocket",
    configurable: true
  }), _defineProperty(_Object$definePropert, "CONNECTING", {
    value: 0,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "OPEN", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "CLOSING", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "CLOSED", {
    value: 3,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(WebSocket, {
    CONNECTING: {
      value: 0,
      enumerable: true
    },
    OPEN: {
      value: 1,
      enumerable: true
    },
    CLOSING: {
      value: 2,
      enumerable: true
    },
    CLOSED: {
      value: 3,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = WebSocket;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: WebSocket
  });
};

var Impl = require("../websockets/WebSocket-impl.js");