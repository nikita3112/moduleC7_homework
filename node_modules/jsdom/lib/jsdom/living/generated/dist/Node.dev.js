"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var GetRootNodeOptions = require("./GetRootNodeOptions.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;

var EventTarget = require("./EventTarget.js");

var interfaceName = "Node";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'Node'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["Node"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor Node is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  EventTarget._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.EventTarget === undefined) {
    throw new Error("Internal error: attempting to evaluate Node before EventTarget");
  }

  var Node =
  /*#__PURE__*/
  function (_globalObject$EventTa) {
    _inherits(Node, _globalObject$EventTa);

    function Node() {
      var _this;

      _classCallCheck(this, Node);

      throw new TypeError("Illegal constructor");
      return _possibleConstructorReturn(_this);
    }

    _createClass(Node, [{
      key: "getRootNode",
      value: function getRootNode() {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = GetRootNodeOptions.convert(curArg, {
            context: "Failed to execute 'getRootNode' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getRootNode.apply(_esValue$implSymbol, args));
      }
    }, {
      key: "hasChildNodes",
      value: function hasChildNodes() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].hasChildNodes();
      }
    }, {
      key: "normalize",
      value: function normalize() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].normalize();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "cloneNode",
      value: function cloneNode() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg !== undefined) {
            curArg = conversions["boolean"](curArg, {
              context: "Failed to execute 'cloneNode' on 'Node': parameter 1"
            });
          } else {
            curArg = false;
          }

          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol2;

          return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).cloneNode.apply(_esValue$implSymbol2, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "isEqualNode",
      value: function isEqualNode(otherNode) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'isEqualNode' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = exports.convert(curArg, {
              context: "Failed to execute 'isEqualNode' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).isEqualNode.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "isSameNode",
      value: function isSameNode(otherNode) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'isSameNode' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = exports.convert(curArg, {
              context: "Failed to execute 'isSameNode' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).isSameNode.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "compareDocumentPosition",
      value: function compareDocumentPosition(other) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'compareDocumentPosition' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = exports.convert(curArg, {
            context: "Failed to execute 'compareDocumentPosition' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).compareDocumentPosition.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "contains",
      value: function contains(other) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'contains' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = exports.convert(curArg, {
              context: "Failed to execute 'contains' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol6 = esValue[implSymbol]).contains.apply(_esValue$implSymbol6, args);
      }
    }, {
      key: "lookupPrefix",
      value: function lookupPrefix(namespace) {
        var _esValue$implSymbol7;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'lookupPrefix' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'lookupPrefix' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol7 = esValue[implSymbol]).lookupPrefix.apply(_esValue$implSymbol7, args);
      }
    }, {
      key: "lookupNamespaceURI",
      value: function lookupNamespaceURI(prefix) {
        var _esValue$implSymbol8;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'lookupNamespaceURI' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'lookupNamespaceURI' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol8 = esValue[implSymbol]).lookupNamespaceURI.apply(_esValue$implSymbol8, args);
      }
    }, {
      key: "isDefaultNamespace",
      value: function isDefaultNamespace(namespace) {
        var _esValue$implSymbol9;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'isDefaultNamespace' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];

          if (curArg === null || curArg === undefined) {
            curArg = null;
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'isDefaultNamespace' on 'Node': parameter 1"
            });
          }

          args.push(curArg);
        }
        return (_esValue$implSymbol9 = esValue[implSymbol]).isDefaultNamespace.apply(_esValue$implSymbol9, args);
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(node, child) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertBefore' on 'Node': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = exports.convert(curArg, {
            context: "Failed to execute 'insertBefore' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];

          if (_curArg === null || _curArg === undefined) {
            _curArg = null;
          } else {
            _curArg = exports.convert(_curArg, {
              context: "Failed to execute 'insertBefore' on 'Node': parameter 2"
            });
          }

          args.push(_curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol10;

          return utils.tryWrapperForImpl((_esValue$implSymbol10 = esValue[implSymbol]).insertBefore.apply(_esValue$implSymbol10, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "appendChild",
      value: function appendChild(node) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'appendChild' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = exports.convert(curArg, {
            context: "Failed to execute 'appendChild' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol11;

          return utils.tryWrapperForImpl((_esValue$implSymbol11 = esValue[implSymbol]).appendChild.apply(_esValue$implSymbol11, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "replaceChild",
      value: function replaceChild(node, child) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'replaceChild' on 'Node': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = exports.convert(curArg, {
            context: "Failed to execute 'replaceChild' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = exports.convert(_curArg2, {
            context: "Failed to execute 'replaceChild' on 'Node': parameter 2"
          });
          args.push(_curArg2);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol12;

          return utils.tryWrapperForImpl((_esValue$implSymbol12 = esValue[implSymbol]).replaceChild.apply(_esValue$implSymbol12, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "removeChild",
      value: function removeChild(child) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'removeChild' on 'Node': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = exports.convert(curArg, {
            context: "Failed to execute 'removeChild' on 'Node': parameter 1"
          });
          args.push(curArg);
        }
        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol13;

          return utils.tryWrapperForImpl((_esValue$implSymbol13 = esValue[implSymbol]).removeChild.apply(_esValue$implSymbol13, args));
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "nodeType",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["nodeType"];
      }
    }, {
      key: "nodeName",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["nodeName"];
      }
    }, {
      key: "baseURI",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["baseURI"];
      }
    }, {
      key: "isConnected",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["isConnected"];
      }
    }, {
      key: "ownerDocument",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["ownerDocument"]);
      }
    }, {
      key: "parentNode",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["parentNode"]);
      }
    }, {
      key: "parentElement",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["parentElement"]);
      }
    }, {
      key: "childNodes",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.getSameObject(this, "childNodes", function () {
          return utils.tryWrapperForImpl(esValue[implSymbol]["childNodes"]);
        });
      }
    }, {
      key: "firstChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["firstChild"]);
      }
    }, {
      key: "lastChild",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["lastChild"]);
      }
    }, {
      key: "previousSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["previousSibling"]);
      }
    }, {
      key: "nextSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["nextSibling"]);
      }
    }, {
      key: "nodeValue",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["nodeValue"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (V === null || V === undefined) {
          V = null;
        } else {
          V = conversions["DOMString"](V, {
            context: "Failed to set the 'nodeValue' property on 'Node': The provided value"
          });
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["nodeValue"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "textContent",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol]["textContent"];
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (V === null || V === undefined) {
          V = null;
        } else {
          V = conversions["DOMString"](V, {
            context: "Failed to set the 'textContent' property on 'Node': The provided value"
          });
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          esValue[implSymbol]["textContent"] = V;
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }]);

    return Node;
  }(globalObject.EventTarget);

  Object.defineProperties(Node.prototype, (_Object$definePropert = {
    getRootNode: {
      enumerable: true
    },
    hasChildNodes: {
      enumerable: true
    },
    normalize: {
      enumerable: true
    },
    cloneNode: {
      enumerable: true
    },
    isEqualNode: {
      enumerable: true
    },
    isSameNode: {
      enumerable: true
    },
    compareDocumentPosition: {
      enumerable: true
    },
    contains: {
      enumerable: true
    },
    lookupPrefix: {
      enumerable: true
    },
    lookupNamespaceURI: {
      enumerable: true
    },
    isDefaultNamespace: {
      enumerable: true
    },
    insertBefore: {
      enumerable: true
    },
    appendChild: {
      enumerable: true
    },
    replaceChild: {
      enumerable: true
    },
    removeChild: {
      enumerable: true
    },
    nodeType: {
      enumerable: true
    },
    nodeName: {
      enumerable: true
    },
    baseURI: {
      enumerable: true
    },
    isConnected: {
      enumerable: true
    },
    ownerDocument: {
      enumerable: true
    },
    parentNode: {
      enumerable: true
    },
    parentElement: {
      enumerable: true
    },
    childNodes: {
      enumerable: true
    },
    firstChild: {
      enumerable: true
    },
    lastChild: {
      enumerable: true
    },
    previousSibling: {
      enumerable: true
    },
    nextSibling: {
      enumerable: true
    },
    nodeValue: {
      enumerable: true
    },
    textContent: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "Node",
    configurable: true
  }), _defineProperty(_Object$definePropert, "ELEMENT_NODE", {
    value: 1,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "ATTRIBUTE_NODE", {
    value: 2,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "TEXT_NODE", {
    value: 3,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "CDATA_SECTION_NODE", {
    value: 4,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "ENTITY_REFERENCE_NODE", {
    value: 5,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "ENTITY_NODE", {
    value: 6,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "PROCESSING_INSTRUCTION_NODE", {
    value: 7,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "COMMENT_NODE", {
    value: 8,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_NODE", {
    value: 9,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_TYPE_NODE", {
    value: 10,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_FRAGMENT_NODE", {
    value: 11,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "NOTATION_NODE", {
    value: 12,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_DISCONNECTED", {
    value: 0x01,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_PRECEDING", {
    value: 0x02,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_FOLLOWING", {
    value: 0x04,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_CONTAINS", {
    value: 0x08,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_CONTAINED_BY", {
    value: 0x10,
    enumerable: true
  }), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", {
    value: 0x20,
    enumerable: true
  }), _Object$definePropert));
  Object.defineProperties(Node, {
    ELEMENT_NODE: {
      value: 1,
      enumerable: true
    },
    ATTRIBUTE_NODE: {
      value: 2,
      enumerable: true
    },
    TEXT_NODE: {
      value: 3,
      enumerable: true
    },
    CDATA_SECTION_NODE: {
      value: 4,
      enumerable: true
    },
    ENTITY_REFERENCE_NODE: {
      value: 5,
      enumerable: true
    },
    ENTITY_NODE: {
      value: 6,
      enumerable: true
    },
    PROCESSING_INSTRUCTION_NODE: {
      value: 7,
      enumerable: true
    },
    COMMENT_NODE: {
      value: 8,
      enumerable: true
    },
    DOCUMENT_NODE: {
      value: 9,
      enumerable: true
    },
    DOCUMENT_TYPE_NODE: {
      value: 10,
      enumerable: true
    },
    DOCUMENT_FRAGMENT_NODE: {
      value: 11,
      enumerable: true
    },
    NOTATION_NODE: {
      value: 12,
      enumerable: true
    },
    DOCUMENT_POSITION_DISCONNECTED: {
      value: 0x01,
      enumerable: true
    },
    DOCUMENT_POSITION_PRECEDING: {
      value: 0x02,
      enumerable: true
    },
    DOCUMENT_POSITION_FOLLOWING: {
      value: 0x04,
      enumerable: true
    },
    DOCUMENT_POSITION_CONTAINS: {
      value: 0x08,
      enumerable: true
    },
    DOCUMENT_POSITION_CONTAINED_BY: {
      value: 0x10,
      enumerable: true
    },
    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {
      value: 0x20,
      enumerable: true
    }
  });

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = Node;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: Node
  });
};

var Impl = require("../nodes/Node-impl.js");