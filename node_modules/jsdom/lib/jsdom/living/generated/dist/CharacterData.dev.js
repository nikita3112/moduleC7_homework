"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var Node = require("./Node.js");

var ceReactionsPreSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPreSteps;

var ceReactionsPostSteps_helpers_custom_elements = require("../helpers/custom-elements.js").ceReactionsPostSteps;

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "CharacterData";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'CharacterData'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["CharacterData"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor CharacterData is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {
  Node._internalSetup(wrapper, globalObject);
};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  if (globalObject.Node === undefined) {
    throw new Error("Internal error: attempting to evaluate CharacterData before Node");
  }

  var CharacterData =
  /*#__PURE__*/
  function (_globalObject$Node) {
    _inherits(CharacterData, _globalObject$Node);

    function CharacterData() {
      var _this;

      _classCallCheck(this, CharacterData);

      throw new TypeError("Illegal constructor");
      return _possibleConstructorReturn(_this);
    }

    _createClass(CharacterData, [{
      key: "substringData",
      value: function substringData(offset, count) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'substringData' on 'CharacterData': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'substringData' on 'CharacterData': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["unsigned long"](_curArg, {
            context: "Failed to execute 'substringData' on 'CharacterData': parameter 2"
          });
          args.push(_curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).substringData.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "appendData",
      value: function appendData(data) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'appendData' on 'CharacterData': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'appendData' on 'CharacterData': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).appendData.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "insertData",
      value: function insertData(offset, data) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertData' on 'CharacterData': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'insertData' on 'CharacterData': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = conversions["DOMString"](_curArg2, {
            context: "Failed to execute 'insertData' on 'CharacterData': parameter 2"
          });
          args.push(_curArg2);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).insertData.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "deleteData",
      value: function deleteData(offset, count) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'deleteData' on 'CharacterData': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'deleteData' on 'CharacterData': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg3 = arguments[1];
          _curArg3 = conversions["unsigned long"](_curArg3, {
            context: "Failed to execute 'deleteData' on 'CharacterData': parameter 2"
          });
          args.push(_curArg3);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).deleteData.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "replaceData",
      value: function replaceData(offset, count, data) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 3) {
          throw new TypeError("Failed to execute 'replaceData' on 'CharacterData': 3 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'replaceData' on 'CharacterData': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg4 = arguments[1];
          _curArg4 = conversions["unsigned long"](_curArg4, {
            context: "Failed to execute 'replaceData' on 'CharacterData': parameter 2"
          });
          args.push(_curArg4);
        }
        {
          var _curArg5 = arguments[2];
          _curArg5 = conversions["DOMString"](_curArg5, {
            context: "Failed to execute 'replaceData' on 'CharacterData': parameter 3"
          });
          args.push(_curArg5);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).replaceData.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "before",
      value: function before() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'before' on 'CharacterData': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol6;

          return (_esValue$implSymbol6 = esValue[implSymbol]).before.apply(_esValue$implSymbol6, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "after",
      value: function after() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'after' on 'CharacterData': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol7;

          return (_esValue$implSymbol7 = esValue[implSymbol]).after.apply(_esValue$implSymbol7, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "replaceWith",
      value: function replaceWith() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        var args = [];

        for (var i = 0; i < arguments.length; i++) {
          var curArg = arguments[i];

          if (Node.is(curArg)) {
            curArg = utils.implForWrapper(curArg);
          } else {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'replaceWith' on 'CharacterData': parameter " + (i + 1)
            });
          }

          args.push(curArg);
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          var _esValue$implSymbol8;

          return (_esValue$implSymbol8 = esValue[implSymbol]).replaceWith.apply(_esValue$implSymbol8, args);
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "remove",
      value: function remove() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        ceReactionsPreSteps_helpers_custom_elements(globalObject);

        try {
          return esValue[implSymbol].remove();
        } finally {
          ceReactionsPostSteps_helpers_custom_elements(globalObject);
        }
      }
    }, {
      key: "data",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["data"];
      },
      set: function set(V) {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        V = conversions["DOMString"](V, {
          context: "Failed to set the 'data' property on 'CharacterData': The provided value",
          treatNullAsEmptyString: true
        });
        esValue[implSymbol]["data"] = V;
      }
    }, {
      key: "length",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["length"];
      }
    }, {
      key: "previousElementSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["previousElementSibling"]);
      }
    }, {
      key: "nextElementSibling",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(esValue[implSymbol]["nextElementSibling"]);
      }
    }]);

    return CharacterData;
  }(globalObject.Node);

  Object.defineProperties(CharacterData.prototype, (_Object$definePropert = {
    substringData: {
      enumerable: true
    },
    appendData: {
      enumerable: true
    },
    insertData: {
      enumerable: true
    },
    deleteData: {
      enumerable: true
    },
    replaceData: {
      enumerable: true
    },
    before: {
      enumerable: true
    },
    after: {
      enumerable: true
    },
    replaceWith: {
      enumerable: true
    },
    remove: {
      enumerable: true
    },
    data: {
      enumerable: true
    },
    length: {
      enumerable: true
    },
    previousElementSibling: {
      enumerable: true
    },
    nextElementSibling: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "CharacterData",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.unscopables, {
    value: {
      before: true,
      after: true,
      replaceWith: true,
      remove: true,
      __proto__: null
    },
    configurable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = CharacterData;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: CharacterData
  });
};

var Impl = require("../nodes/CharacterData-impl.js");