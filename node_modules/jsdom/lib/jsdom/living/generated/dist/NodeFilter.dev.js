"use strict";

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

exports.convert = function convert(value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (!utils.isObject(value)) {
    throw new TypeError("".concat(context, " is not an object."));
  }

  function callTheUserObjectsOperation(node) {
    var thisArg = utils.tryWrapperForImpl(this);
    var O = value;
    var X = O;

    if (typeof O !== "function") {
      X = O["acceptNode"];

      if (typeof X !== "function") {
        throw new TypeError("".concat(context, " does not correctly implement NodeFilter."));
      }

      thisArg = O;
    }

    node = utils.tryWrapperForImpl(node);
    var callResult = Reflect.apply(X, thisArg, [node]);
    callResult = conversions["unsigned short"](callResult, {
      context: context
    });
    return callResult;
  }

  callTheUserObjectsOperation[utils.wrapperSymbol] = value;
  callTheUserObjectsOperation.objectReference = value;
  return callTheUserObjectsOperation;
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var NodeFilter = function NodeFilter() {
    throw new TypeError("Illegal invocation");
  };

  Object.defineProperties(NodeFilter, {
    FILTER_ACCEPT: {
      value: 1,
      enumerable: true
    },
    FILTER_REJECT: {
      value: 2,
      enumerable: true
    },
    FILTER_SKIP: {
      value: 3,
      enumerable: true
    },
    SHOW_ALL: {
      value: 0xffffffff,
      enumerable: true
    },
    SHOW_ELEMENT: {
      value: 0x1,
      enumerable: true
    },
    SHOW_ATTRIBUTE: {
      value: 0x2,
      enumerable: true
    },
    SHOW_TEXT: {
      value: 0x4,
      enumerable: true
    },
    SHOW_CDATA_SECTION: {
      value: 0x8,
      enumerable: true
    },
    SHOW_ENTITY_REFERENCE: {
      value: 0x10,
      enumerable: true
    },
    SHOW_ENTITY: {
      value: 0x20,
      enumerable: true
    },
    SHOW_PROCESSING_INSTRUCTION: {
      value: 0x40,
      enumerable: true
    },
    SHOW_COMMENT: {
      value: 0x80,
      enumerable: true
    },
    SHOW_DOCUMENT: {
      value: 0x100,
      enumerable: true
    },
    SHOW_DOCUMENT_TYPE: {
      value: 0x200,
      enumerable: true
    },
    SHOW_DOCUMENT_FRAGMENT: {
      value: 0x400,
      enumerable: true
    },
    SHOW_NOTATION: {
      value: 0x800,
      enumerable: true
    }
  });
  Object.defineProperty(globalObject, "NodeFilter", {
    configurable: true,
    writable: true,
    value: NodeFilter
  });
};