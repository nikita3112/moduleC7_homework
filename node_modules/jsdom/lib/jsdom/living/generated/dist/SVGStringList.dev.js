"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var implSymbol = utils.implSymbol;
var ctorRegistrySymbol = utils.ctorRegistrySymbol;
var interfaceName = "SVGStringList";

exports.is = function (value) {
  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
};

exports.isImpl = function (value) {
  return utils.isObject(value) && value instanceof Impl.implementation;
};

exports.convert = function (value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$context = _ref.context,
      context = _ref$context === void 0 ? "The provided value" : _ref$context;

  if (exports.is(value)) {
    return utils.implForWrapper(value);
  }

  throw new TypeError("".concat(context, " is not of type 'SVGStringList'."));
};

function makeWrapper(globalObject) {
  if (globalObject[ctorRegistrySymbol] === undefined) {
    throw new Error("Internal error: invalid global object");
  }

  var ctor = globalObject[ctorRegistrySymbol]["SVGStringList"];

  if (ctor === undefined) {
    throw new Error("Internal error: constructor SVGStringList is not installed on the passed global object");
  }

  return Object.create(ctor.prototype);
}

exports.create = function (globalObject, constructorArgs, privateData) {
  var wrapper = makeWrapper(globalObject);
  return exports.setup(wrapper, globalObject, constructorArgs, privateData);
};

exports.createImpl = function (globalObject, constructorArgs, privateData) {
  var wrapper = exports.create(globalObject, constructorArgs, privateData);
  return utils.implForWrapper(wrapper);
};

exports._internalSetup = function (wrapper, globalObject) {};

exports.setup = function (wrapper, globalObject) {
  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  privateData.wrapper = wrapper;

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: new Impl.implementation(globalObject, constructorArgs, privateData),
    configurable: true
  });
  wrapper = new Proxy(wrapper, proxyHandler);
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper;
};

exports["new"] = function (globalObject) {
  var wrapper = makeWrapper(globalObject);

  exports._internalSetup(wrapper, globalObject);

  Object.defineProperty(wrapper, implSymbol, {
    value: Object.create(Impl.implementation.prototype),
    configurable: true
  });
  wrapper = new Proxy(wrapper, proxyHandler);
  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;

  if (Impl.init) {
    Impl.init(wrapper[implSymbol]);
  }

  return wrapper[implSymbol];
};

var exposed = new Set(["Window"]);

exports.install = function (globalObject, globalNames) {
  var _Object$definePropert;

  if (!globalNames.some(function (globalName) {
    return exposed.has(globalName);
  })) {
    return;
  }

  var SVGStringList =
  /*#__PURE__*/
  function () {
    function SVGStringList() {
      _classCallCheck(this, SVGStringList);

      throw new TypeError("Illegal constructor");
    }

    _createClass(SVGStringList, [{
      key: "clear",
      value: function clear() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol].clear();
      }
    }, {
      key: "initialize",
      value: function initialize(newItem) {
        var _esValue$implSymbol;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'initialize' on 'SVGStringList': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'initialize' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol = esValue[implSymbol]).initialize.apply(_esValue$implSymbol, args);
      }
    }, {
      key: "getItem",
      value: function getItem(index) {
        var _esValue$implSymbol2;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'getItem' on 'SVGStringList': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'getItem' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol2 = esValue[implSymbol]).getItem.apply(_esValue$implSymbol2, args);
      }
    }, {
      key: "insertItemBefore",
      value: function insertItemBefore(newItem, index) {
        var _esValue$implSymbol3;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'insertItemBefore' on 'SVGStringList': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg = arguments[1];
          _curArg = conversions["unsigned long"](_curArg, {
            context: "Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 2"
          });
          args.push(_curArg);
        }
        return (_esValue$implSymbol3 = esValue[implSymbol]).insertItemBefore.apply(_esValue$implSymbol3, args);
      }
    }, {
      key: "replaceItem",
      value: function replaceItem(newItem, index) {
        var _esValue$implSymbol4;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 2) {
          throw new TypeError("Failed to execute 'replaceItem' on 'SVGStringList': 2 arguments required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'replaceItem' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        {
          var _curArg2 = arguments[1];
          _curArg2 = conversions["unsigned long"](_curArg2, {
            context: "Failed to execute 'replaceItem' on 'SVGStringList': parameter 2"
          });
          args.push(_curArg2);
        }
        return (_esValue$implSymbol4 = esValue[implSymbol]).replaceItem.apply(_esValue$implSymbol4, args);
      }
    }, {
      key: "removeItem",
      value: function removeItem(index) {
        var _esValue$implSymbol5;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'removeItem' on 'SVGStringList': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["unsigned long"](curArg, {
            context: "Failed to execute 'removeItem' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol5 = esValue[implSymbol]).removeItem.apply(_esValue$implSymbol5, args);
      }
    }, {
      key: "appendItem",
      value: function appendItem(newItem) {
        var _esValue$implSymbol6;

        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'appendItem' on 'SVGStringList': 1 argument required, but only " + arguments.length + " present.");
        }

        var args = [];
        {
          var curArg = arguments[0];
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'appendItem' on 'SVGStringList': parameter 1"
          });
          args.push(curArg);
        }
        return (_esValue$implSymbol6 = esValue[implSymbol]).appendItem.apply(_esValue$implSymbol6, args);
      }
    }, {
      key: "length",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["length"];
      }
    }, {
      key: "numberOfItems",
      get: function get() {
        var esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("Illegal invocation");
        }

        return esValue[implSymbol]["numberOfItems"];
      }
    }]);

    return SVGStringList;
  }();

  Object.defineProperties(SVGStringList.prototype, (_Object$definePropert = {
    clear: {
      enumerable: true
    },
    initialize: {
      enumerable: true
    },
    getItem: {
      enumerable: true
    },
    insertItemBefore: {
      enumerable: true
    },
    replaceItem: {
      enumerable: true
    },
    removeItem: {
      enumerable: true
    },
    appendItem: {
      enumerable: true
    },
    length: {
      enumerable: true
    },
    numberOfItems: {
      enumerable: true
    }
  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
    value: "SVGStringList",
    configurable: true
  }), _defineProperty(_Object$definePropert, Symbol.iterator, {
    value: Array.prototype[Symbol.iterator],
    configurable: true,
    writable: true
  }), _Object$definePropert));

  if (globalObject[ctorRegistrySymbol] === undefined) {
    globalObject[ctorRegistrySymbol] = Object.create(null);
  }

  globalObject[ctorRegistrySymbol][interfaceName] = SVGStringList;
  Object.defineProperty(globalObject, interfaceName, {
    configurable: true,
    writable: true,
    value: SVGStringList
  });
};

var proxyHandler = {
  get: function get(target, P, receiver) {
    if (_typeof(P) === "symbol") {
      return Reflect.get(target, P, receiver);
    }

    var desc = this.getOwnPropertyDescriptor(target, P);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(target);

      if (parent === null) {
        return undefined;
      }

      return Reflect.get(target, P, receiver);
    }

    if (!desc.get && !desc.set) {
      return desc.value;
    }

    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return Reflect.apply(getter, receiver, []);
  },
  has: function has(target, P) {
    if (_typeof(P) === "symbol") {
      return Reflect.has(target, P);
    }

    var desc = this.getOwnPropertyDescriptor(target, P);

    if (desc !== undefined) {
      return true;
    }

    var parent = Object.getPrototypeOf(target);

    if (parent !== null) {
      return Reflect.has(parent, P);
    }

    return false;
  },
  ownKeys: function ownKeys(target) {
    var keys = new Set();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = target[implSymbol][utils.supportedPropertyIndices][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;
        keys.add("".concat(key));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Reflect.ownKeys(target)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _key = _step2.value;
        keys.add(_key);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return _toConsumableArray(keys);
  },
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, P) {
    if (_typeof(P) === "symbol") {
      return Reflect.getOwnPropertyDescriptor(target, P);
    }

    var ignoreNamedProps = false;

    if (utils.isArrayIndexPropName(P)) {
      var index = P >>> 0;

      if (target[implSymbol][utils.supportsPropertyIndex](index)) {
        var indexedValue = target[implSymbol].getItem(index);
        return {
          writable: true,
          enumerable: true,
          configurable: true,
          value: utils.tryWrapperForImpl(indexedValue)
        };
      }

      ignoreNamedProps = true;
    }

    return Reflect.getOwnPropertyDescriptor(target, P);
  },
  set: function set(target, P, V, receiver) {
    if (_typeof(P) === "symbol") {
      return Reflect.set(target, P, V, receiver);
    }

    if (target === receiver) {
      if (utils.isArrayIndexPropName(P)) {
        var index = P >>> 0;
        var indexedValue = V;
        indexedValue = conversions["DOMString"](indexedValue, {
          context: "Failed to set the " + index + " property on 'SVGStringList': The provided value"
        });
        var creating = !target[implSymbol][utils.supportsPropertyIndex](index);

        if (creating) {
          target[implSymbol][utils.indexedSetNew](index, indexedValue);
        } else {
          target[implSymbol][utils.indexedSetExisting](index, indexedValue);
        }

        return true;
      }
    }

    var ownDesc;

    if (utils.isArrayIndexPropName(P)) {
      var _index = P >>> 0;

      if (target[implSymbol][utils.supportsPropertyIndex](_index)) {
        var _indexedValue = target[implSymbol].getItem(_index);

        ownDesc = {
          writable: true,
          enumerable: true,
          configurable: true,
          value: utils.tryWrapperForImpl(_indexedValue)
        };
      }
    }

    if (ownDesc === undefined) {
      ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
    }

    if (ownDesc === undefined) {
      var parent = Reflect.getPrototypeOf(target);

      if (parent !== null) {
        return Reflect.set(parent, P, V, receiver);
      }

      ownDesc = {
        writable: true,
        enumerable: true,
        configurable: true,
        value: undefined
      };
    }

    if (!ownDesc.writable) {
      return false;
    }

    if (!utils.isObject(receiver)) {
      return false;
    }

    var existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
    var valueDesc;

    if (existingDesc !== undefined) {
      if (existingDesc.get || existingDesc.set) {
        return false;
      }

      if (!existingDesc.writable) {
        return false;
      }

      valueDesc = {
        value: V
      };
    } else {
      valueDesc = {
        writable: true,
        enumerable: true,
        configurable: true,
        value: V
      };
    }

    return Reflect.defineProperty(receiver, P, valueDesc);
  },
  defineProperty: function defineProperty(target, P, desc) {
    if (_typeof(P) === "symbol") {
      return Reflect.defineProperty(target, P, desc);
    }

    if (utils.isArrayIndexPropName(P)) {
      if (desc.get || desc.set) {
        return false;
      }

      var index = P >>> 0;
      var indexedValue = desc.value;
      indexedValue = conversions["DOMString"](indexedValue, {
        context: "Failed to set the " + index + " property on 'SVGStringList': The provided value"
      });
      var creating = !target[implSymbol][utils.supportsPropertyIndex](index);

      if (creating) {
        target[implSymbol][utils.indexedSetNew](index, indexedValue);
      } else {
        target[implSymbol][utils.indexedSetExisting](index, indexedValue);
      }

      return true;
    }

    return Reflect.defineProperty(target, P, desc);
  },
  deleteProperty: function deleteProperty(target, P) {
    if (_typeof(P) === "symbol") {
      return Reflect.deleteProperty(target, P);
    }

    if (utils.isArrayIndexPropName(P)) {
      var index = P >>> 0;
      return !target[implSymbol][utils.supportsPropertyIndex](index);
    }

    return Reflect.deleteProperty(target, P);
  },
  preventExtensions: function preventExtensions() {
    return false;
  }
};

var Impl = require("../svg/SVGStringList-impl.js");