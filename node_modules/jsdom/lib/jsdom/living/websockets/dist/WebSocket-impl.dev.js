"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var nodeURL = require("url");

var DOMException = require("domexception/webidl2js-wrapper");

var _require = require("whatwg-url"),
    parseURL = _require.parseURL,
    serializeURL = _require.serializeURL,
    serializeURLOrigin = _require.serializeURLOrigin;

var WebSocket = require("ws");

var _require2 = require("../helpers/create-event-accessor"),
    setupForSimpleEventAccessors = _require2.setupForSimpleEventAccessors;

var _require3 = require("../helpers/events"),
    fireAnEvent = _require3.fireAnEvent;

var _require4 = require("../generated/utils"),
    isArrayBuffer = _require4.isArrayBuffer;

var _require5 = require("../helpers/binary-data"),
    copyToArrayBufferInNewRealm = _require5.copyToArrayBufferInNewRealm;

var EventTargetImpl = require("../events/EventTarget-impl").implementation;

var idlUtils = require("../generated/utils");

var Blob = require("../generated/Blob");

var CloseEvent = require("../generated/CloseEvent");

var MessageEvent = require("../generated/MessageEvent");

var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;
var productions = {
  // https://tools.ietf.org/html/rfc7230#section-3.2.6
  token: /^[!#$%&'*+\-.^_`|~\dA-Za-z]+$/
};
var readyStateWSToDOM = [];
readyStateWSToDOM[WebSocket.CONNECTING] = CONNECTING;
readyStateWSToDOM[WebSocket.OPEN] = OPEN;
readyStateWSToDOM[WebSocket.CLOSING] = CLOSING;
readyStateWSToDOM[WebSocket.CLOSED] = CLOSED; // https://tools.ietf.org/html/rfc6455#section-4.3
// See Sec-WebSocket-Protocol-Client, which is for the syntax of an entire header value. This function checks if a
// single header conforms to the rules.

function verifySecWebSocketProtocol(str) {
  return productions.token.test(str);
}

var PromiseQueues =
/*#__PURE__*/
function (_WeakMap) {
  _inherits(PromiseQueues, _WeakMap);

  function PromiseQueues() {
    _classCallCheck(this, PromiseQueues);

    return _possibleConstructorReturn(this, _getPrototypeOf(PromiseQueues).apply(this, arguments));
  }

  _createClass(PromiseQueues, [{
    key: "get",
    value: function get(window) {
      var cur = _get(_getPrototypeOf(PromiseQueues.prototype), "get", this).call(this, window);

      return cur !== undefined ? cur : Promise.resolve();
    }
  }]);

  return PromiseQueues;
}(_wrapNativeSuper(WeakMap));

var openSockets = new WeakMap();
var openingQueues = new PromiseQueues();

var WebSocketImpl =
/*#__PURE__*/
function (_EventTargetImpl) {
  _inherits(WebSocketImpl, _EventTargetImpl);

  function WebSocketImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, WebSocketImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocketImpl).call(this, globalObject, args, privateData));
    _this._ownerDocument = idlUtils.implForWrapper(globalObject._document);
    var url = args[0];
    var protocols = args[1] !== undefined ? args[1] : [];
    var urlRecord = parseURL(url);

    if (urlRecord === null) {
      throw DOMException.create(_this._globalObject, ["The URL '".concat(url, "' is invalid."), "SyntaxError"]);
    }

    if (urlRecord.scheme !== "ws" && urlRecord.scheme !== "wss") {
      throw DOMException.create(_this._globalObject, ["The URL's scheme must be either 'ws' or 'wss'. '".concat(urlRecord.scheme, "' is not allowed."), "SyntaxError"]);
    }

    if (urlRecord.fragment !== null) {
      throw DOMException.create(_this._globalObject, ["The URL contains a fragment identifier ('".concat(urlRecord.fragment, "'). Fragment identifiers ") + "are not allowed in WebSocket URLs.", "SyntaxError"]);
    }

    if (typeof protocols === "string") {
      protocols = [protocols];
    }

    var protocolSet = new Set();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = protocols[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var protocol = _step.value;

        if (!verifySecWebSocketProtocol(protocol)) {
          throw DOMException.create(_this._globalObject, ["The subprotocol '".concat(protocol, "' is invalid."), "SyntaxError"]);
        }

        var lowered = protocol.toLowerCase();

        if (protocolSet.has(lowered)) {
          throw DOMException.create(_this._globalObject, ["The subprotocol '".concat(protocol, "' is duplicated."), "SyntaxError"]);
        }

        protocolSet.add(lowered);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _this._urlRecord = urlRecord;
    _this.url = serializeURL(urlRecord);
    var nodeParsedURL = nodeURL.parse(_this.url);
    _this.extensions = "";
    _this.binaryType = "blob";
    _this._ws = null; // Used when this._ws has not been initialized yet.

    _this._readyState = CONNECTING;
    _this._requiredToFail = false;
    _this.bufferedAmount = 0;
    _this._sendQueue = [];
    var openSocketsForWindow = openSockets.get(globalObject._globalProxy);

    if (openSocketsForWindow === undefined) {
      openSocketsForWindow = new Set();
      openSockets.set(globalObject._globalProxy, openSocketsForWindow);
    }

    openSocketsForWindow.add(_assertThisInitialized(_this));
    openingQueues.set(_this._ownerDocument, openingQueues.get(_this._ownerDocument).then(function () {
      return new Promise(function (resolve) {
        // close() called before _ws has been initialized.
        if (_this._requiredToFail) {
          resolve();
          _this._readyState = CLOSED;

          _this._onConnectionClosed(1006, "");

          return;
        }

        _this._ws = new WebSocket(_this.url, protocols, {
          headers: {
            "user-agent": globalObject.navigator.userAgent,
            cookie: _this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, {
              http: true
            }),
            origin: globalObject._origin
          },
          rejectUnauthorized: _this._ownerDocument._strictSSL
        });

        _this._ws.once("open", function () {
          resolve();

          _this._onConnectionEstablished();
        });

        _this._ws.on("message", _this._onMessageReceived.bind(_assertThisInitialized(_this)));

        _this._ws.once("close", function () {
          var _this2;

          resolve();

          (_this2 = _this)._onConnectionClosed.apply(_this2, arguments);
        });

        _this._ws.once("upgrade", function (_ref) {
          var headers = _ref.headers;

          if (Array.isArray(headers["set-cookie"])) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = headers["set-cookie"][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var cookie = _step2.value;

                _this._ownerDocument._cookieJar.setCookieSync(cookie, nodeParsedURL, {
                  http: true,
                  ignoreError: true
                });
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          } else if (headers["set-cookie"] !== undefined) {
            _this._ownerDocument._cookieJar.setCookieSync(headers["set-cookie"], nodeParsedURL, {
              http: true,
              ignoreError: true
            });
          }
        });

        _this._ws.once("error", function () {
          // The exact error is passed into this callback, but it is ignored as we don't really care about it.
          resolve();
          _this._requiredToFail = true; // Do not emit an error here, as that will be handled in _onConnectionClosed. ws always emits a close event
          // after errors.
        });
      });
    }));
    return _this;
  } // https://html.spec.whatwg.org/multipage/web-sockets.html#make-disappear


  _createClass(WebSocketImpl, [{
    key: "_makeDisappear",
    value: function _makeDisappear() {
      this._eventListeners = Object.create(null);

      this._close(1001);
    }
  }, {
    key: "_onConnectionEstablished",
    // https://html.spec.whatwg.org/multipage/web-sockets.html#feedback-from-the-protocol
    value: function _onConnectionEstablished() {
      // readyState is a getter.
      if (this._ws.extensions !== null) {
        // Right now, ws only supports one extension, permessage-deflate, without any parameters. This algorithm may need
        // to be more sophiscated as more extenions are supported.
        this.extensions = Object.keys(this._ws.extensions).join(", ");
      } // protocol is a getter.


      fireAnEvent("open", this);
    }
  }, {
    key: "_onMessageReceived",
    value: function _onMessageReceived(data) {
      if (this.readyState !== OPEN) {
        return;
      }

      var dataForEvent;

      if (typeof data === "string") {
        dataForEvent = data;
      } else if (this.binaryType === "arraybuffer") {
        if (isArrayBuffer(data)) {
          dataForEvent = data;
        } else if (Array.isArray(data)) {
          dataForEvent = copyToArrayBufferInNewRealm(Buffer.concat(data), this._globalObject);
        } else {
          dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);
        }
      } else {
        // this.binaryType === "blob"
        if (!Array.isArray(data)) {
          data = [data];
        }

        dataForEvent = Blob.create(this._globalObject, [data, {
          type: ""
        }]);
      }

      fireAnEvent("message", this, MessageEvent, {
        data: dataForEvent,
        origin: serializeURLOrigin(this._urlRecord)
      });
    }
  }, {
    key: "_onConnectionClosed",
    value: function _onConnectionClosed(code, reason) {
      var openSocketsForWindow = openSockets.get(this._ownerDocument._defaultView);
      openSocketsForWindow["delete"](this);
      var wasClean = !this._requiredToFail;

      if (this._requiredToFail) {
        fireAnEvent("error", this);
      }

      fireAnEvent("close", this, CloseEvent, {
        wasClean: wasClean,
        code: code,
        reason: reason
      });
    }
  }, {
    key: "close",
    value: function close() {
      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (code !== undefined && code !== 1000 && !(code >= 3000 && code <= 4999)) {
        throw DOMException.create(this._globalObject, ["The code must be either 1000, or between 3000 and 4999. ".concat(code, " is neither."), "InvalidAccessError"]);
      }

      if (reason !== undefined && Buffer.byteLength(reason, "utf8") > 123) {
        throw DOMException.create(this._globalObject, ["The message must not be greater than 123 bytes.", "SyntaxError"]);
      }

      this._close(code, reason);
    }
  }, {
    key: "_close",
    value: function _close() {
      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (this.readyState === CONNECTING) {
        this._requiredToFail = true;

        if (this._ws !== null) {
          this._ws.terminate();
        } else {
          this._readyState = CLOSING;
        }
      } else if (this.readyState === OPEN) {
        this._ws.close(code, reason);
      }
    }
  }, {
    key: "send",
    value: function send(data) {
      if (this.readyState === CONNECTING) {
        throw DOMException.create(this._globalObject, ["Still in CONNECTING state.", "InvalidStateError"]);
      }

      if (this.readyState !== OPEN) {
        return;
      }

      if (Blob.isImpl(data)) {
        data = data._buffer;
      }

      var length;

      if (typeof data === "string") {
        length = Buffer.byteLength(data, "utf8");
      } else {
        length = data.byteLength;
      }

      this.bufferedAmount += length;

      this._sendQueue.push([data, length]);

      this._scheduleSend();
    }
  }, {
    key: "_actuallySend",
    value: function _actuallySend() {
      var _this3 = this;

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        var _loop = function _loop() {
          var _step3$value = _slicedToArray(_step3.value, 2),
              data = _step3$value[0],
              length = _step3$value[1];

          _this3._ws.send(data, {
            binary: typeof data !== "string"
          }, function () {
            _this3.bufferedAmount -= length;
          });
        };

        for (var _iterator3 = this._sendQueue.splice(0)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: "_scheduleSend",
    value: function _scheduleSend() {
      var _this4 = this;

      if (this._dequeueScheduled) {
        return;
      }

      this._dequeueScheduled = true;
      process.nextTick(function () {
        _this4._dequeueScheduled = false;

        _this4._actuallySend();
      });
    }
  }, {
    key: "readyState",
    get: function get() {
      if (this._ws !== null) {
        return readyStateWSToDOM[this._ws.readyState];
      }

      return this._readyState;
    }
  }, {
    key: "protocol",
    get: function get() {
      if (this._ws === null) {
        return "";
      }

      return this._ws.protocol;
    }
  }], [{
    key: "cleanUpWindow",
    value: function cleanUpWindow(window) {
      var openSocketsForWindow = openSockets.get(window._globalProxy);

      if (openSocketsForWindow !== undefined) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = openSocketsForWindow[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var ws = _step4.value;

            ws._makeDisappear();
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    }
  }]);

  return WebSocketImpl;
}(EventTargetImpl);

setupForSimpleEventAccessors(WebSocketImpl.prototype, ["open", "message", "error", "close"]);
exports.implementation = WebSocketImpl;