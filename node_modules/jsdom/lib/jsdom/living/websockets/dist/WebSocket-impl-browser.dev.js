/* eslint-env browser */
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMException = require("domexception/webidl2js-wrapper");

var _require = require("whatwg-url"),
    parseURL = _require.parseURL,
    serializeURL = _require.serializeURL,
    serializeURLOrigin = _require.serializeURLOrigin;

var _require2 = require("../helpers/create-event-accessor"),
    setupForSimpleEventAccessors = _require2.setupForSimpleEventAccessors;

var _require3 = require("../helpers/events"),
    fireAnEvent = _require3.fireAnEvent;

var EventTargetImpl = require("../events/EventTarget-impl").implementation;

var idlUtils = require("../generated/utils");

var Blob = require("../generated/Blob");

var CloseEvent = require("../generated/CloseEvent");

var MessageEvent = require("../generated/MessageEvent");

var productions = {
  // https://tools.ietf.org/html/rfc7230#section-3.2.6
  token: /^[!#$%&'*+\-.^_`|~\dA-Za-z]+$/
}; // https://tools.ietf.org/html/rfc6455#section-4.3
// See Sec-WebSocket-Protocol-Client, which is for the syntax of an entire header value. This function checks if a
// single header conforms to the rules.

function verifySecWebSocketProtocol(str) {
  return productions.token.test(str);
}

var openSockets = new WeakMap();

var WebSocketImpl =
/*#__PURE__*/
function (_EventTargetImpl) {
  _inherits(WebSocketImpl, _EventTargetImpl);

  function WebSocketImpl(constructorArgs, privateData) {
    var _this;

    _classCallCheck(this, WebSocketImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocketImpl).call(this, [], privateData));
    var window = privateData.window;
    _this._ownerDocument = idlUtils.implForWrapper(window._document);
    var url = constructorArgs[0];
    var protocols = constructorArgs[1] !== undefined ? constructorArgs[1] : [];
    var urlRecord = parseURL(url);

    if (urlRecord === null) {
      throw DOMException.create(_this._globalObject, ["The URL '".concat(url, "' is invalid."), "SyntaxError"]);
    }

    if (urlRecord.scheme !== "ws" && urlRecord.scheme !== "wss") {
      throw DOMException.create(_this._globalObject, ["The URL's scheme must be either 'ws' or 'wss'. '".concat(urlRecord.scheme, "' is not allowed."), "SyntaxError"]);
    }

    if (urlRecord.fragment !== null) {
      throw DOMException.create(_this._globalObject, ["The URL contains a fragment identifier ('".concat(urlRecord.fragment, "'). Fragment identifiers ") + "are not allowed in WebSocket URLs.", "SyntaxError"]);
    }

    if (typeof protocols === "string") {
      protocols = [protocols];
    }

    var protocolSet = new Set();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = protocols[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var protocol = _step.value;

        if (!verifySecWebSocketProtocol(protocol)) {
          throw DOMException.create(_this._globalObject, ["The subprotocol '".concat(protocol, "' is invalid."), "SyntaxError"]);
        }

        var lowered = protocol.toLowerCase();

        if (protocolSet.has(lowered)) {
          throw DOMException.create(_this._globalObject, ["The subprotocol '".concat(protocol, "' is duplicated."), "SyntaxError"]);
        }

        protocolSet.add(lowered);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _this._urlRecord = urlRecord;
    _this.url = serializeURL(urlRecord);
    _this._ws = new WebSocket(_this.url, protocols);

    _this._ws.onopen = function () {
      fireAnEvent("open", _assertThisInitialized(_this));
    };

    _this._ws.onerror = function () {
      fireAnEvent("error", _assertThisInitialized(_this));
    };

    _this._ws.onclose = function (event) {
      fireAnEvent("close", _assertThisInitialized(_this), CloseEvent, {
        wasClean: event.wasClean,
        code: event.code,
        reason: event.reason
      });
    };

    _this._ws.onmessage = function (event) {
      fireAnEvent("message", _assertThisInitialized(_this), MessageEvent, {
        data: event.data,
        origin: serializeURLOrigin(_this._urlRecord)
      });
    };

    var openSocketsForWindow = openSockets.get(window._globalProxy);

    if (openSocketsForWindow === undefined) {
      openSocketsForWindow = new Set();
      openSockets.set(window._globalProxy, openSocketsForWindow);
    }

    openSocketsForWindow.add(_assertThisInitialized(_this));
    return _this;
  } // https://html.spec.whatwg.org/multipage/web-sockets.html#make-disappear


  _createClass(WebSocketImpl, [{
    key: "_makeDisappear",
    value: function _makeDisappear() {
      this._eventListeners = Object.create(null);

      this._ws.close(1001);
    }
  }, {
    key: "close",
    value: function close() {
      var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
      var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (code !== undefined && code !== 1000 && !(code >= 3000 && code <= 4999)) {
        throw DOMException.create(this._globalObject, ["The code must be either 1000, or between 3000 and 4999. ".concat(code, " is neither."), "InvalidAccessError"]);
      }

      if (reason !== undefined && Buffer.byteLength(reason, "utf8") > 123) {
        throw DOMException.create(this._globalObject, ["The message must not be greater than 123 bytes.", "SyntaxError"]);
      }

      return this._ws.close(code, reason);
    }
  }, {
    key: "send",
    value: function send(data) {
      if (Blob.isImpl(data)) {
        data = data._buffer;
      }

      this._ws.send(data);
    }
  }, {
    key: "readyState",
    get: function get() {
      return this._ws.readyState;
    }
  }, {
    key: "bufferedAmount",
    get: function get() {
      return this._ws.bufferedAmount;
    }
  }, {
    key: "extensions",
    get: function get() {
      return this._ws.extensions;
    }
  }, {
    key: "protocol",
    get: function get() {
      return this._ws.protocol;
    }
  }, {
    key: "binaryType",
    get: function get() {
      return this._ws.binaryType;
    },
    set: function set(val) {
      this._ws.binaryType = val;
    }
  }], [{
    key: "cleanUpWindow",
    value: function cleanUpWindow(window) {
      var openSocketsForWindow = openSockets.get(window._globalProxy);

      if (openSocketsForWindow !== undefined) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = openSocketsForWindow[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var ws = _step2.value;

            ws._makeDisappear();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }]);

  return WebSocketImpl;
}(EventTargetImpl);

setupForSimpleEventAccessors(WebSocketImpl.prototype, ["open", "message", "error", "close"]);
exports.implementation = WebSocketImpl;