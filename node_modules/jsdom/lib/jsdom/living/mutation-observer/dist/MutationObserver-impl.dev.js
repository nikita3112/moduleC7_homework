"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../generated/utils"),
    wrapperForImpl = _require.wrapperForImpl; // If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because
// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The
// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the
// mutation observer creation.
// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be
// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.


var mutationObserverId = 0; // https://dom.spec.whatwg.org/#mutationobserver

var MutationObserverImpl =
/*#__PURE__*/
function () {
  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver
  function MutationObserverImpl(globalObject, args) {
    _classCallCheck(this, MutationObserverImpl);

    var _args = _slicedToArray(args, 1),
        callback = _args[0];

    this._callback = callback;
    this._nodeList = [];
    this._recordQueue = [];
    this._id = ++mutationObserverId;
  } // https://dom.spec.whatwg.org/#dom-mutationobserver-observe


  _createClass(MutationObserverImpl, [{
    key: "observe",
    value: function observe(target, options) {
      var _this = this;

      if (("attributeOldValue" in options || "attributeFilter" in options) && !("attributes" in options)) {
        options.attributes = true;
      }

      if ("characterDataOldValue" in options & !("characterData" in options)) {
        options.characterData = true;
      }

      if (!options.childList && !options.attributes && !options.characterData) {
        throw new TypeError("The options object must set at least one of 'attributes', 'characterData', or 'childList' " + "to true.");
      } else if (options.attributeOldValue && !options.attributes) {
        throw new TypeError("The options object may only set 'attributeOldValue' to true when 'attributes' is true or " + "not present.");
      } else if ("attributeFilter" in options && !options.attributes) {
        throw new TypeError("The options object may only set 'attributeFilter' when 'attributes' is true or not " + "present.");
      } else if (options.characterDataOldValue && !options.characterData) {
        throw new TypeError("The options object may only set 'characterDataOldValue' to true when 'characterData' is " + "true or not present.");
      }

      var existingRegisteredObserver = target._registeredObserverList.find(function (registeredObserver) {
        return registeredObserver.observer === _this;
      });

      if (existingRegisteredObserver) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._nodeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value;
            node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {
              return registeredObserver.source !== existingRegisteredObserver;
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        existingRegisteredObserver.options = options;
      } else {
        target._registeredObserverList.push({
          observer: this,
          options: options
        });

        this._nodeList.push(target);
      }
    } // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect

  }, {
    key: "disconnect",
    value: function disconnect() {
      var _this2 = this;

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this._nodeList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;
          node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {
            return registeredObserver.observer !== _this2;
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this._recordQueue = [];
    } // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords

  }, {
    key: "takeRecords",
    value: function takeRecords() {
      // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.
      var records = this._recordQueue.map(wrapperForImpl);

      this._recordQueue = [];
      return records;
    }
  }]);

  return MutationObserverImpl;
}();

module.exports = {
  implementation: MutationObserverImpl
};