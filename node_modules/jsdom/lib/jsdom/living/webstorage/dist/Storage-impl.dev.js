"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DOMException = require("domexception/webidl2js-wrapper");

var StorageEvent = require("../generated/StorageEvent");

var idlUtils = require("../generated/utils");

var _require = require("../helpers/events"),
    fireAnEvent = _require.fireAnEvent; // https://html.spec.whatwg.org/multipage/webstorage.html#the-storage-interface


var StorageImpl =
/*#__PURE__*/
function () {
  function StorageImpl(globalObject, args, privateData) {
    _classCallCheck(this, StorageImpl);

    var associatedWindow = privateData.associatedWindow,
        storageArea = privateData.storageArea,
        url = privateData.url,
        type = privateData.type,
        storageQuota = privateData.storageQuota;
    this._associatedWindow = associatedWindow;
    this._items = storageArea;
    this._url = url;
    this._type = type;
    this._quota = storageQuota;
    this._globalObject = globalObject;
  }

  _createClass(StorageImpl, [{
    key: "_dispatchStorageEvent",
    value: function _dispatchStorageEvent(key, oldValue, newValue) {
      var _this = this;

      return this._associatedWindow._currentOriginData.windowsInSameOrigin.filter(function (target) {
        return target !== _this._associatedWindow;
      }).forEach(function (target) {
        return fireAnEvent("storage", target, StorageEvent, {
          key: key,
          oldValue: oldValue,
          newValue: newValue,
          url: _this._url,
          storageArea: target["_" + _this._type]
        });
      });
    }
  }, {
    key: "key",
    value: function key(n) {
      if (n >= this._items.size) {
        return null;
      }

      return _toConsumableArray(this._items.keys())[n];
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      if (this._items.has(key)) {
        return this._items.get(key);
      }

      return null;
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      var oldValue = this._items.get(key) || null;

      if (oldValue === value) {
        return;
      } // Concatenate all keys and values to measure their length against the quota


      var itemsTotalLength = key.length + value.length;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              curKey = _step$value[0],
              curValue = _step$value[1];

          // If the key already exists, skip it as it will be set to the new value instead
          if (key !== curKey) {
            itemsTotalLength += curKey.length + curValue.length;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (itemsTotalLength > this._quota) {
        throw DOMException.create(this._globalObject, ["The ".concat(this._quota, "-code unit storage quota has been exceeded."), "QuotaExceededError"]);
      }

      setTimeout(this._dispatchStorageEvent.bind(this), 0, key, oldValue, value);

      this._items.set(key, value);
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      if (this._items.has(key)) {
        setTimeout(this._dispatchStorageEvent.bind(this), 0, key, this._items.get(key), null);

        this._items["delete"](key);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      if (this._items.size > 0) {
        setTimeout(this._dispatchStorageEvent.bind(this), 0, null, null, null);

        this._items.clear();
      }
    }
  }, {
    key: "length",
    get: function get() {
      return this._items.size;
    }
  }, {
    key: idlUtils.supportedPropertyNames,
    get: function get() {
      return this._items.keys();
    }
  }]);

  return StorageImpl;
}();

module.exports = {
  implementation: StorageImpl
};