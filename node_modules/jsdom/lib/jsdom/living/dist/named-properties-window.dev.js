"use strict";

var hasOwnProp = Object.prototype.hasOwnProperty;

var namedPropertiesTracker = require("../named-properties-tracker");

var NODE_TYPE = require("./node-type");

var HTMLCollection = require("./generated/HTMLCollection");

var _require = require("../utils"),
    treeOrderSorter = _require.treeOrderSorter;

var idlUtils = require("./generated/utils");

function isNamedPropertyElement(element) {
  // (for the name attribute)
  // use hasOwnProperty to make sure contentWindow comes from the prototype,
  // and is not set directly on the node by a script.
  if ("contentWindow" in element && !hasOwnProp.call(element, "contentWindow")) {
    return true;
  }

  switch (element.nodeName) {
    case "A":
    case "AREA":
    case "EMBED":
    case "FORM":
    case "FRAMESET":
    case "IMG":
    case "OBJECT":
      return true;

    default:
      return false;
  }
}

function namedPropertyResolver(window, name, values) {
  function getResult() {
    var results = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = values().keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var node = _step.value;

        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {
          continue;
        }

        if (node.getAttributeNS(null, "id") === name) {
          results.push(node);
        } else if (node.getAttributeNS(null, "name") === name && isNamedPropertyElement(node)) {
          results.push(node);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    results.sort(treeOrderSorter);
    return results;
  }

  var document = window._document;
  var objects = HTMLCollection.create(window, [], {
    element: idlUtils.implForWrapper(document.documentElement),
    query: getResult
  });
  var length = objects.length;

  for (var i = 0; i < length; ++i) {
    var node = objects[i];

    if ("contentWindow" in node && !hasOwnProp.call(node, "contentWindow") && node.getAttributeNS(null, "name") === name) {
      return node.contentWindow;
    }
  }

  if (length === 0) {
    return undefined;
  }

  if (length === 1) {
    return objects[0];
  }

  return objects;
}

exports.initializeWindow = function (window, windowProxy) {
  namedPropertiesTracker.create(window, windowProxy, namedPropertyResolver.bind(null));
};

exports.elementAttributeModified = function (element, name, value, oldValue) {
  if (!element._attached) {
    return;
  }

  var useName = isNamedPropertyElement(element);

  if (name === "id" || name === "name" && useName) {
    var tracker = namedPropertiesTracker.get(element._ownerDocument._global); // (tracker will be null if the document has no Window)

    if (tracker) {
      if (name === "id" && (!useName || element.getAttributeNS(null, "name") !== oldValue)) {
        tracker.untrack(oldValue, element);
      }

      if (name === "name" && element.getAttributeNS(null, "id") !== oldValue) {
        tracker.untrack(oldValue, element);
      }

      tracker.track(value, element);
    }
  }
};

exports.nodeAttachedToDocument = function (node) {
  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {
    return;
  }

  var tracker = namedPropertiesTracker.get(node._ownerDocument._global);

  if (!tracker) {
    return;
  }

  tracker.track(node.getAttributeNS(null, "id"), node);

  if (isNamedPropertyElement(node)) {
    tracker.track(node.getAttributeNS(null, "name"), node);
  }
};

exports.nodeDetachedFromDocument = function (node) {
  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {
    return;
  }

  var tracker = namedPropertiesTracker.get(node._ownerDocument._global);

  if (!tracker) {
    return;
  }

  tracker.untrack(node.getAttributeNS(null, "id"), node);

  if (isNamedPropertyElement(node)) {
    tracker.untrack(node.getAttributeNS(null, "name"), node);
  }
};