"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require("./attributes"),
    appendAttribute = _require.appendAttribute;

var NODE_TYPE = require("./node-type");

var orderedSetParse = require("./helpers/ordered-set").parse;

var _require2 = require("./helpers/create-element"),
    createElement = _require2.createElement;

var _require3 = require("./helpers/namespaces"),
    HTML_NS = _require3.HTML_NS,
    XMLNS_NS = _require3.XMLNS_NS;

var _require4 = require("./helpers/internal-constants"),
    cloningSteps = _require4.cloningSteps,
    domSymbolTree = _require4.domSymbolTree;

var _require5 = require("./helpers/strings"),
    asciiCaseInsensitiveMatch = _require5.asciiCaseInsensitiveMatch,
    asciiLowercase = _require5.asciiLowercase;

var HTMLCollection = require("./generated/HTMLCollection");

exports.clone = function (node, document, cloneChildren) {
  if (document === undefined) {
    document = node._ownerDocument;
  }

  var copy;

  switch (node.nodeType) {
    case NODE_TYPE.DOCUMENT_NODE:
      // Can't use a simple `Document.createImpl` because of circular dependency issues :-/
      copy = node._cloneDocument();
      break;

    case NODE_TYPE.DOCUMENT_TYPE_NODE:
      copy = document.implementation.createDocumentType(node.name, node.publicId, node.systemId);
      break;

    case NODE_TYPE.ELEMENT_NODE:
      copy = createElement(document, node._localName, node._namespaceURI, node._prefix, node._isValue, false);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = node._attributeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var attribute = _step.value;
          appendAttribute(copy, exports.clone(attribute, document));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      break;

    case NODE_TYPE.ATTRIBUTE_NODE:
      copy = document._createAttribute({
        namespace: node._namespace,
        namespacePrefix: node._namespacePrefix,
        localName: node._localName,
        value: node._value
      });
      break;

    case NODE_TYPE.TEXT_NODE:
      copy = document.createTextNode(node._data);
      break;

    case NODE_TYPE.CDATA_SECTION_NODE:
      copy = document.createCDATASection(node._data);
      break;

    case NODE_TYPE.COMMENT_NODE:
      copy = document.createComment(node._data);
      break;

    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
      copy = document.createProcessingInstruction(node.target, node._data);
      break;

    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
      copy = document.createDocumentFragment();
      break;
  }

  if (node[cloningSteps]) {
    node[cloningSteps](copy, node, document, cloneChildren);
  }

  if (cloneChildren) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = domSymbolTree.childrenIterator(node)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var child = _step2.value;
        var childCopy = exports.clone(child, document, true);

        copy._append(childCopy);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return copy;
}; // For the following, memoization is not applied here since the memoized results are stored on `this`.


exports.listOfElementsWithClassNames = function (classNames, root) {
  // https://dom.spec.whatwg.org/#concept-getElementsByClassName
  var classes = orderedSetParse(classNames);

  if (classes.size === 0) {
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return [];
      }
    });
  }

  return HTMLCollection.createImpl(root._globalObject, [], {
    element: root,
    query: function query() {
      var isQuirksMode = root._ownerDocument.compatMode === "BackCompat";
      return domSymbolTree.treeToArray(root, {
        filter: function filter(node) {
          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
            return false;
          }

          var classList = node.classList;

          if (isQuirksMode) {
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              var _loop = function _loop() {
                var className = _step3.value;

                if (!classList.tokenSet.some(function (cur) {
                  return asciiCaseInsensitiveMatch(cur, className);
                })) {
                  return {
                    v: false
                  };
                }
              };

              for (var _iterator3 = classes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _ret = _loop();

                if (_typeof(_ret) === "object") return _ret.v;
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          } else {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = classes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var className = _step4.value;

                if (!classList.tokenSet.contains(className)) {
                  return false;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }

          return true;
        }
      });
    }
  });
};

exports.listOfElementsWithQualifiedName = function (qualifiedName, root) {
  // https://dom.spec.whatwg.org/#concept-getelementsbytagname
  if (qualifiedName === "*") {
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return domSymbolTree.treeToArray(root, {
          filter: function filter(node) {
            return node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root;
          }
        });
      }
    });
  }

  if (root._ownerDocument._parsingMode === "html") {
    var lowerQualifiedName = asciiLowercase(qualifiedName);
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return domSymbolTree.treeToArray(root, {
          filter: function filter(node) {
            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
              return false;
            }

            if (node._namespaceURI === HTML_NS) {
              return node._qualifiedName === lowerQualifiedName;
            }

            return node._qualifiedName === qualifiedName;
          }
        });
      }
    });
  }

  return HTMLCollection.createImpl(root._globalObject, [], {
    element: root,
    query: function query() {
      return domSymbolTree.treeToArray(root, {
        filter: function filter(node) {
          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
            return false;
          }

          return node._qualifiedName === qualifiedName;
        }
      });
    }
  });
};

exports.listOfElementsWithNamespaceAndLocalName = function (namespace, localName, root) {
  // https://dom.spec.whatwg.org/#concept-getelementsbytagnamens
  if (namespace === "") {
    namespace = null;
  }

  if (namespace === "*" && localName === "*") {
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return domSymbolTree.treeToArray(root, {
          filter: function filter(node) {
            return node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root;
          }
        });
      }
    });
  }

  if (namespace === "*") {
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return domSymbolTree.treeToArray(root, {
          filter: function filter(node) {
            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
              return false;
            }

            return node._localName === localName;
          }
        });
      }
    });
  }

  if (localName === "*") {
    return HTMLCollection.createImpl(root._globalObject, [], {
      element: root,
      query: function query() {
        return domSymbolTree.treeToArray(root, {
          filter: function filter(node) {
            if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
              return false;
            }

            return node._namespaceURI === namespace;
          }
        });
      }
    });
  }

  return HTMLCollection.createImpl(root._globalObject, [], {
    element: root,
    query: function query() {
      return domSymbolTree.treeToArray(root, {
        filter: function filter(node) {
          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {
            return false;
          }

          return node._localName === localName && node._namespaceURI === namespace;
        }
      });
    }
  });
}; // https://dom.spec.whatwg.org/#converting-nodes-into-a-node
// create a fragment (or just return a node for one item)


exports.convertNodesIntoNode = function (document, nodes) {
  if (nodes.length === 1) {
    // note: I'd prefer to check instanceof Node rather than string
    return typeof nodes[0] === "string" ? document.createTextNode(nodes[0]) : nodes[0];
  }

  var fragment = document.createDocumentFragment();

  for (var i = 0; i < nodes.length; i++) {
    fragment._append(typeof nodes[i] === "string" ? document.createTextNode(nodes[i]) : nodes[i]);
  }

  return fragment;
}; // https://dom.spec.whatwg.org/#locate-a-namespace-prefix


exports.locateNamespacePrefix = function (element, namespace) {
  if (element._namespaceURI === namespace && element._prefix !== null) {
    return element._prefix;
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = element._attributeList[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var attribute = _step5.value;

      if (attribute._namespacePrefix === "xmlns" && attribute._value === namespace) {
        return attribute._localName;
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  if (element.parentElement !== null) {
    return exports.locateNamespacePrefix(element.parentElement, namespace);
  }

  return null;
}; // https://dom.spec.whatwg.org/#locate-a-namespace


exports.locateNamespace = function (node, prefix) {
  switch (node.nodeType) {
    case NODE_TYPE.ELEMENT_NODE:
      {
        if (node._namespaceURI !== null && node._prefix === prefix) {
          return node._namespaceURI;
        }

        if (prefix === null) {
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = node._attributeList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var attribute = _step6.value;

              if (attribute._namespace === XMLNS_NS && attribute._namespacePrefix === null && attribute._localName === "xmlns") {
                return attribute._value !== "" ? attribute._value : null;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        } else {
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = node._attributeList[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var _attribute = _step7.value;

              if (_attribute._namespace === XMLNS_NS && _attribute._namespacePrefix === "xmlns" && _attribute._localName === prefix) {
                return _attribute._value !== "" ? _attribute._value : null;
              }
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }
        }

        if (node.parentElement === null) {
          return null;
        }

        return exports.locateNamespace(node.parentElement, prefix);
      }

    case NODE_TYPE.DOCUMENT_NODE:
      {
        if (node.documentElement === null) {
          return null;
        }

        return exports.locateNamespace(node.documentElement, prefix);
      }

    case NODE_TYPE.DOCUMENT_TYPE_NODE:
    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
      {
        return null;
      }

    case NODE_TYPE.ATTRIBUTE_NODE:
      {
        if (node._element === null) {
          return null;
        }

        return exports.locateNamespace(node._element, prefix);
      }

    default:
      {
        if (node.parentElement === null) {
          return null;
        }

        return exports.locateNamespace(node.parentElement, prefix);
      }
  }
};