"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../helpers/shadow-dom"),
    findSlot = _require.findSlot,
    assignSlot = _require.assignSlot,
    assignSlotable = _require.assignSlotable; // https://dom.spec.whatwg.org/#mixin-slotable
// https://dom.spec.whatwg.org/#light-tree-slotables


var SlotableMixinImpl =
/*#__PURE__*/
function () {
  function SlotableMixinImpl() {
    _classCallCheck(this, SlotableMixinImpl);
  }

  _createClass(SlotableMixinImpl, [{
    key: "_initSlotableMixin",
    value: function _initSlotableMixin() {
      this._slotableName = "";
    }
  }, {
    key: "_attrModifiedSlotableMixin",
    value: function _attrModifiedSlotableMixin(name, value, oldValue) {
      if (name === "slot") {
        if (value === oldValue) {
          return;
        }

        if (value === null && oldValue === "") {
          return;
        }

        if (value === "" && oldValue === null) {
          return;
        }

        if (value === null || value === "") {
          this._slotableName = "";
        } else {
          this._slotableName = value;
        }

        if (this._assignedSlot) {
          assignSlotable(this._assignedSlot);
        }

        assignSlot(this);
      }
    }
  }, {
    key: "assignedSlot",
    get: function get() {
      return findSlot(this, "open");
    }
  }]);

  return SlotableMixinImpl;
}();

module.exports = {
  implementation: SlotableMixinImpl
};