"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../generated/utils.js");

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS;

exports.implementation =
/*#__PURE__*/
function () {
  function HTMLCollectionImpl(globalObject, args, privateData) {
    _classCallCheck(this, HTMLCollectionImpl);

    this._list = [];
    this._version = -1;
    this._element = privateData.element;
    this._query = privateData.query;
    this._globalObject = globalObject;

    this._update();
  }

  _createClass(HTMLCollectionImpl, [{
    key: "item",
    value: function item(index) {
      this._update();

      return this._list[index] || null;
    }
  }, {
    key: "namedItem",
    value: function namedItem(key) {
      if (key === "") {
        return null;
      }

      this._update();

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var element = _step.value;

          if (element.getAttributeNS(null, "id") === key) {
            return element;
          }

          if (element._namespaceURI === HTML_NS) {
            var name = element.getAttributeNS(null, "name");

            if (name === key) {
              return element;
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: "_update",
    value: function _update() {
      if (this._version < this._element._version) {
        var snapshot = this._query();

        for (var i = 0; i < snapshot.length; i++) {
          this._list[i] = snapshot[i];
        }

        this._list.length = snapshot.length;
        this._version = this._element._version;
      }
    }
  }, {
    key: Symbol.iterator,
    // Inherit some useful functions from Array.
    value: function value() {
      this._update();

      return this._list[Symbol.iterator]();
    }
  }, {
    key: "entries",
    value: function entries() {
      this._update();

      return this._list.entries();
    }
  }, {
    key: "filter",
    value: function filter() {
      var _this$_list;

      this._update();

      return (_this$_list = this._list).filter.apply(_this$_list, arguments);
    }
  }, {
    key: "map",
    value: function map() {
      var _this$_list2;

      this._update();

      return (_this$_list2 = this._list).map.apply(_this$_list2, arguments);
    }
  }, {
    key: "indexOf",
    value: function indexOf() {
      var _this$_list3;

      this._update();

      return (_this$_list3 = this._list).indexOf.apply(_this$_list3, arguments);
    }
  }, {
    key: "length",
    get: function get() {
      this._update();

      return this._list.length;
    }
  }, {
    key: idlUtils.supportedPropertyIndices,
    get: function get() {
      this._update();

      return this._list.keys();
    }
  }, {
    key: idlUtils.supportedPropertyNames,
    get: function get() {
      this._update();

      var result = new Set();
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this._list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var element = _step2.value;
          var id = element.getAttributeNS(null, "id");

          if (id) {
            result.add(id);
          }

          if (element._namespaceURI === HTML_NS) {
            var name = element.getAttributeNS(null, "name");

            if (name) {
              result.add(name);
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return result;
    }
  }]);

  return HTMLCollectionImpl;
}();