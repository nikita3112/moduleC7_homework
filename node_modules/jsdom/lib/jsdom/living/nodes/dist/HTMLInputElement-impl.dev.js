"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var DOMException = require("domexception/webidl2js-wrapper");

var FileList = require("../generated/FileList");

var Decimal = require("decimal.js");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var idlUtils = require("../generated/utils");

var DefaultConstraintValidationImpl = require("../constraint-validation/DefaultConstraintValidation-impl").implementation;

var ValidityState = require("../generated/ValidityState");

var _require = require("../../utils"),
    mixin = _require.mixin;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree,
    cloningSteps = _require2.cloningSteps;

var _require3 = require("../helpers/form-controls"),
    getLabelsForLabelable = _require3.getLabelsForLabelable,
    formOwner = _require3.formOwner;

var _require4 = require("../helpers/events"),
    fireAnEvent = _require4.fireAnEvent;

var _require5 = require("../helpers/form-controls"),
    isDisabled = _require5.isDisabled,
    isValidEmailAddress = _require5.isValidEmailAddress,
    isValidAbsoluteURL = _require5.isValidAbsoluteURL,
    sanitizeValueByType = _require5.sanitizeValueByType;

var _require6 = require("../helpers/strings"),
    asciiCaseInsensitiveMatch = _require6.asciiCaseInsensitiveMatch,
    asciiLowercase = _require6.asciiLowercase,
    parseFloatingPointNumber = _require6.parseFloatingPointNumber,
    splitOnCommas = _require6.splitOnCommas;

var _require7 = require("../helpers/dates-and-times"),
    isDate = _require7.isDate;

var _require8 = require("../helpers/number-and-date-inputs"),
    convertStringToNumberByType = _require8.convertStringToNumberByType,
    convertStringToDateByType = _require8.convertStringToDateByType,
    serializeDateByType = _require8.serializeDateByType,
    convertNumberToStringByType = _require8.convertNumberToStringByType;

var filesSymbol = Symbol("files"); // https://html.spec.whatwg.org/multipage/input.html#attr-input-type

var inputAllowedTypes = new Set(["hidden", "text", "search", "tel", "url", "email", "password", "date", "month", "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio", "file", "submit", "image", "reset", "button"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply

var variableLengthSelectionAllowedTypes = new Set(["text", "search", "url", "tel", "password"]);
var numericTypes = new Set(["date", "month", "week", "time", "datetime-local", "number", "range"]);
var applicableTypesForIDLMember = {
  valueAsDate: new Set(["date", "month", "week", "time"]),
  valueAsNumber: numericTypes,
  select: new Set(["text", "search", "url", "tel", "email", "password", "date", "month", "week", "time", "datetime-local", "number", "color", "file"]),
  selectionStart: variableLengthSelectionAllowedTypes,
  selectionEnd: variableLengthSelectionAllowedTypes,
  selectionDirection: variableLengthSelectionAllowedTypes,
  setRangeText: variableLengthSelectionAllowedTypes,
  setSelectionRange: variableLengthSelectionAllowedTypes,
  stepDown: numericTypes,
  stepUp: numericTypes
};
var lengthPatternSizeTypes = new Set(["text", "search", "url", "tel", "email", "password"]);
var readonlyTypes = new Set([].concat(_toConsumableArray(lengthPatternSizeTypes), ["date", "month", "week", "time", "datetime-local", "number"]));
var applicableTypesForContentAttribute = {
  list: new Set(["text", "search", "url", "tel", "email"].concat(_toConsumableArray(numericTypes), ["color"])),
  max: numericTypes,
  maxlength: lengthPatternSizeTypes,
  min: numericTypes,
  minlength: lengthPatternSizeTypes,
  multiple: new Set(["email", "file"]),
  pattern: lengthPatternSizeTypes,
  readonly: readonlyTypes,
  required: new Set([].concat(_toConsumableArray(readonlyTypes), ["checkbox", "radio", "file"])),
  step: numericTypes
};
var valueAttributeDefaultMode = new Set(["hidden", "submit", "image", "reset", "button"]);
var valueAttributeDefaultOnMode = new Set(["checkbox", "radio"]);

function valueAttributeMode(type) {
  if (valueAttributeDefaultMode.has(type)) {
    return "default";
  }

  if (valueAttributeDefaultOnMode.has(type)) {
    return "default/on";
  }

  if (type === "file") {
    return "filename";
  }

  return "value";
}

function getTypeFromAttribute(typeAttribute) {
  if (typeof typeAttribute !== "string") {
    return "text";
  }

  var type = asciiLowercase(typeAttribute);
  return inputAllowedTypes.has(type) ? type : "text";
}

var HTMLInputElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLInputElementImpl, _HTMLElementImpl);

  function HTMLInputElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLInputElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLInputElementImpl).call(this, globalObject, args, privateData));
    _this._selectionStart = _this._selectionEnd = 0;
    _this._selectionDirection = "none";
    _this._value = "";
    _this._dirtyValue = false;
    _this._checkedness = false;
    _this._dirtyCheckedness = false;
    _this._preCheckedRadioState = null;
    _this.indeterminate = false;
    _this._customValidityErrorMessage = "";
    _this._labels = null;
    _this._hasActivationBehavior = true;
    return _this;
  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number


  _createClass(HTMLInputElementImpl, [{
    key: "_isStepAligned",
    value: function _isStepAligned(v) {
      return new Decimal(v).minus(this._stepBase).modulo(this._allowedValueStep).isZero();
    } // Returns a Decimal.

  }, {
    key: "_stepAlign",
    value: function _stepAlign(v, roundUp) {
      var allowedValueStep = this._allowedValueStep;
      var stepBase = this._stepBase;
      return new Decimal(v).minus(stepBase).toNearest(allowedValueStep, roundUp ? Decimal.ROUND_UP : Decimal.ROUND_DOWN).add(stepBase);
    } // For <input>, https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-value
    // is a simple value that is gotten and set, not computed.

  }, {
    key: "_getValue",
    value: function _getValue() {
      return this._value;
    }
  }, {
    key: "_legacyPreActivationBehavior",
    value: function _legacyPreActivationBehavior() {
      // The spec says we should check this._mutable here, but browsers don't seem to implement this behavior. See
      // https://github.com/whatwg/html/issues/3239.
      if (this.type === "checkbox") {
        this.checked = !this.checked;
      } else if (this.type === "radio") {
        this._preCheckedRadioState = this.checked;
        this.checked = true;
      }
    }
  }, {
    key: "_legacyCanceledActivationBehavior",
    value: function _legacyCanceledActivationBehavior() {
      // The spec says we should check this._mutable here, but browsers don't seem to implement this behavior. See
      // https://github.com/whatwg/html/issues/3239.
      if (this.type === "checkbox") {
        this.checked = !this.checked;
      } else if (this.type === "radio") {
        if (this._preCheckedRadioState !== null) {
          this.checked = this._preCheckedRadioState;
          this._preCheckedRadioState = null;
        }
      }
    }
  }, {
    key: "_activationBehavior",
    value: function _activationBehavior() {
      if (!this._mutable) {
        return;
      }

      var form = this.form;

      if (this.type === "checkbox" || this.type === "radio" && !this._preCheckedRadioState) {
        fireAnEvent("input", this, undefined, {
          bubbles: true
        });
        fireAnEvent("change", this, undefined, {
          bubbles: true
        });
      } else if (form && this.type === "submit") {
        form._doSubmit();
      } else if (form && this.type === "reset") {
        form._doReset();
      }
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name, value, oldVal) {
      var wrapper = idlUtils.wrapperForImpl(this);

      if (!this._dirtyValue && name === "value") {
        this._value = sanitizeValueByType(this, wrapper.defaultValue);
      }

      if (!this._dirtyCheckedness && name === "checked") {
        this._checkedness = wrapper.defaultChecked;

        if (this._checkedness) {
          this._removeOtherRadioCheckedness();
        }
      }

      if (name === "name" || name === "type") {
        if (this._checkedness) {
          this._removeOtherRadioCheckedness();
        }
      }

      if (name === "type") {
        var prevType = getTypeFromAttribute(oldVal);
        var curType = getTypeFromAttribute(value); // When an input element's type attribute changes state…

        if (prevType !== curType) {
          var prevValueMode = valueAttributeMode(prevType);
          var curValueMode = valueAttributeMode(curType);

          if (prevValueMode === "value" && this._value !== "" && (curValueMode === "default" || curValueMode === "default/on")) {
            this.setAttributeNS(null, "value", this._value);
          } else if (prevValueMode !== "value" && curValueMode === "value") {
            this._value = this.getAttributeNS(null, "value") || "";
            this._dirtyValue = false;
          } else if (prevValueMode !== "filename" && curValueMode === "filename") {
            this._value = "";
          }

          this._signalATypeChange();

          this._value = sanitizeValueByType(this, this._value);

          var previouslySelectable = this._idlMemberApplies("setRangeText", prevType);

          var nowSelectable = this._idlMemberApplies("setRangeText", curType);

          if (!previouslySelectable && nowSelectable) {
            this._selectionStart = 0;
            this._selectionEnd = 0;
            this._selectionDirection = "none";
          }
        }
      }

      _get(_getPrototypeOf(HTMLInputElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    } // https://html.spec.whatwg.org/multipage/input.html#signal-a-type-change

  }, {
    key: "_signalATypeChange",
    value: function _signalATypeChange() {
      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "_formReset",
    value: function _formReset() {
      var wrapper = idlUtils.wrapperForImpl(this);
      this._value = sanitizeValueByType(this, wrapper.defaultValue);
      this._dirtyValue = false;
      this._checkedness = wrapper.defaultChecked;
      this._dirtyCheckedness = false;

      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "_changedFormOwner",
    value: function _changedFormOwner() {
      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "_removeOtherRadioCheckedness",
    value: function _removeOtherRadioCheckedness() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._otherRadioGroupElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var radioGroupElement = _step.value;
          radioGroupElement._checkedness = false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_someInRadioGroup",
    value: function _someInRadioGroup(name) {
      if (this[name]) {
        return true;
      }

      return this._otherRadioGroupElements.some(function (radioGroupElement) {
        return radioGroupElement[name];
      });
    }
  }, {
    key: "_stepUpdate",
    // https://html.spec.whatwg.org/multipage/input.html#dom-input-stepup
    value: function _stepUpdate(n, isUp) {
      var methodName = isUp ? "stepUp" : "stepDown";

      if (!this._idlMemberApplies(methodName)) {
        throw DOMException.create(this._globalObject, ["Failed to invoke '".concat(methodName, "' method on 'HTMLInputElement': ") + "This input element does not support Number values.", "InvalidStateError"]);
      }

      var allowedValueStep = this._allowedValueStep;

      if (allowedValueStep === null) {
        throw DOMException.create(this._globalObject, ["Failed to invoke '".concat(methodName, "' method on 'HTMLInputElement': ") + "This input element does not support value step.", "InvalidStateError"]);
      }

      var min = this._minimum;
      var max = this._maximum;

      if (min !== null && max !== null) {
        if (min > max) {
          return;
        }

        var candidateStepValue = this._stepAlign(Decimal.add(min, allowedValueStep),
        /* roundUp = */
        false);

        if (candidateStepValue.lt(min) || candidateStepValue.gt(max)) {
          return;
        }
      }

      var value = 0;

      try {
        value = this.valueAsNumber;

        if (isNaN(value)) {
          // Empty value is parsed as NaN.
          value = 0;
        }
      } catch (error) {// Step 5. Default value is 0.
      }

      value = new Decimal(value);
      var valueBeforeStepping = value;

      if (!this._isStepAligned(value)) {
        value = this._stepAlign(value,
        /* roundUp = */
        isUp);
      } else {
        var delta = Decimal.mul(n, allowedValueStep);

        if (!isUp) {
          delta = delta.neg();
        }

        value = value.add(delta);
      }

      if (min !== null && value.lt(min)) {
        value = this._stepAlign(min,
        /* roundUp = */
        true);
      }

      if (max !== null && value.gt(max)) {
        value = this._stepAlign(max,
        /* roundUp = */
        false);
      }

      if (isUp ? value.lt(valueBeforeStepping) : value.gt(valueBeforeStepping)) {
        return;
      }

      this._value = this._convertNumberToString(value.toNumber());
    }
  }, {
    key: "stepDown",
    value: function stepDown() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return this._stepUpdate(n, false);
    }
  }, {
    key: "stepUp",
    value: function stepUp() {
      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return this._stepUpdate(n, true);
    }
  }, {
    key: "_dispatchSelectEvent",
    value: function _dispatchSelectEvent() {
      fireAnEvent("select", this, undefined, {
        bubbles: true,
        cancelable: true
      });
    }
  }, {
    key: "_getValueLength",
    value: function _getValueLength() {
      return typeof this.value === "string" ? this.value.length : 0;
    }
  }, {
    key: "select",
    value: function select() {
      if (!this._idlMemberApplies("select")) {
        return;
      }

      this._selectionStart = 0;
      this._selectionEnd = this._getValueLength();
      this._selectionDirection = "none";

      this._dispatchSelectEvent();
    }
  }, {
    key: "setSelectionRange",
    value: function setSelectionRange(start, end, dir) {
      if (!this._idlMemberApplies("setSelectionRange")) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      this._selectionEnd = Math.min(end, this._getValueLength());
      this._selectionStart = Math.min(start, this._selectionEnd);
      this._selectionDirection = dir === "forward" || dir === "backward" ? dir : "none";

      this._dispatchSelectEvent();
    }
  }, {
    key: "setRangeText",
    value: function setRangeText(repl, start, end) {
      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "preserve";

      if (!this._idlMemberApplies("setRangeText")) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      if (arguments.length < 2) {
        start = this._selectionStart;
        end = this._selectionEnd;
      } else if (start > end) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      start = Math.min(start, this._getValueLength());
      end = Math.min(end, this._getValueLength());
      var val = this.value;
      var selStart = this._selectionStart;
      var selEnd = this._selectionEnd;
      this.value = val.slice(0, start) + repl + val.slice(end);
      var newEnd = start + this.value.length;

      if (selectionMode === "select") {
        this.setSelectionRange(start, newEnd);
      } else if (selectionMode === "start") {
        this.setSelectionRange(start, start);
      } else if (selectionMode === "end") {
        this.setSelectionRange(newEnd, newEnd);
      } else {
        // preserve
        var delta = repl.length - (end - start);

        if (selStart > end) {
          selStart += delta;
        } else if (selStart > start) {
          selStart = start;
        }

        if (selEnd > end) {
          selEnd += delta;
        } else if (selEnd > start) {
          selEnd = newEnd;
        }

        this.setSelectionRange(selStart, selEnd);
      }
    } // https://html.spec.whatwg.org/multipage/input.html#the-list-attribute

  }, {
    key: "_contentAttributeApplies",
    // https://html.spec.whatwg.org/multipage/input.html#common-input-element-attributes
    // When an attribute doesn't apply to an input element, user agents must ignore the attribute.
    value: function _contentAttributeApplies(attribute) {
      return applicableTypesForContentAttribute[attribute].has(this.type);
    }
  }, {
    key: "_hasAttributeAndApplies",
    value: function _hasAttributeAndApplies(attribute) {
      return this._contentAttributeApplies(attribute) && this.hasAttributeNS(null, attribute);
    }
  }, {
    key: "_getAttributeIfApplies",
    value: function _getAttributeIfApplies(attribute) {
      if (this._contentAttributeApplies(attribute)) {
        return this.getAttributeNS(null, attribute);
      }

      return null;
    }
  }, {
    key: "_idlMemberApplies",
    value: function _idlMemberApplies(member) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.type;
      return applicableTypesForIDLMember[member].has(type);
    }
  }, {
    key: "_barredFromConstraintValidationSpecialization",
    value: function _barredFromConstraintValidationSpecialization() {
      // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)
      // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)
      // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)
      var willNotValidateTypes = new Set(["hidden", "reset", "button"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly

      var readOnly = this._hasAttributeAndApplies("readonly"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled


      return willNotValidateTypes.has(this.type) || readOnly;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-required

  }, {
    key: cloningSteps,
    value: function value(copy, node) {
      copy._value = node._value;
      copy._checkedness = node._checkedness;
      copy._dirtyValue = node._dirtyValue;
      copy._dirtyCheckedness = node._dirtyCheckedness;
    }
  }, {
    key: "_convertStringToNumber",
    get: function get() {
      return convertStringToNumberByType[this.type];
    }
  }, {
    key: "_convertNumberToString",
    get: function get() {
      return convertNumberToStringByType[this.type];
    }
  }, {
    key: "_convertDateToString",
    get: function get() {
      return serializeDateByType[this.type];
    }
  }, {
    key: "_convertStringToDate",
    get: function get() {
      return convertStringToDateByType[this.type];
    }
  }, {
    key: "_otherRadioGroupElements",
    get: function get() {
      var wrapper = idlUtils.wrapperForImpl(this);
      var root = this._radioButtonGroupRoot;

      if (!root) {
        return [];
      }

      var result = [];
      var descendants = domSymbolTree.treeIterator(root);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = descendants[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var candidate = _step2.value;

          if (candidate._radioButtonGroupRoot !== root) {
            continue;
          }

          var candidateWrapper = idlUtils.wrapperForImpl(candidate);

          if (!candidateWrapper.name || candidateWrapper.name !== wrapper.name) {
            continue;
          }

          if (candidate !== this) {
            result.push(candidate);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return result;
    }
  }, {
    key: "_radioButtonGroupRoot",
    get: function get() {
      var wrapper = idlUtils.wrapperForImpl(this);

      if (this.type !== "radio" || !wrapper.name) {
        return null;
      }

      var e = domSymbolTree.parent(this);

      while (e) {
        // root node of this home sub tree
        // or the form element we belong to
        if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === "FORM") {
          return e;
        }

        e = domSymbolTree.parent(e);
      }

      return null;
    }
  }, {
    key: "_mutable",
    get: function get() {
      return !isDisabled(this) && !this._hasAttributeAndApplies("readonly");
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "checked",
    get: function get() {
      return this._checkedness;
    },
    set: function set(checked) {
      this._checkedness = Boolean(checked);
      this._dirtyCheckedness = true;

      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "value",
    get: function get() {
      switch (valueAttributeMode(this.type)) {
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value
        case "value":
          return this._getValue();
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default

        case "default":
          {
            var attr = this.getAttributeNS(null, "value");
            return attr !== null ? attr : "";
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on

        case "default/on":
          {
            var _attr = this.getAttributeNS(null, "value");

            return _attr !== null ? _attr : "on";
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename

        case "filename":
          return this.files.length ? "C:\\fakepath\\" + this.files[0].name : "";

        default:
          throw new Error("jsdom internal error: unknown value attribute mode");
      }
    },
    set: function set(val) {
      switch (valueAttributeMode(this.type)) {
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value
        case "value":
          {
            var oldValue = this._value;
            this._value = sanitizeValueByType(this, val);
            this._dirtyValue = true;

            if (oldValue !== this._value) {
              this._selectionStart = this._selectionEnd = this._getValueLength();
              this._selectionDirection = "none";
            }

            break;
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on

        case "default":
        case "default/on":
          this.setAttributeNS(null, "value", val);
          break;
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename

        case "filename":
          if (val === "") {
            this.files.length = 0;
          } else {
            throw DOMException.create(this._globalObject, ["This input element accepts a filename, which may only be programmatically set to the empty string.", "InvalidStateError"]);
          }

          break;

        default:
          throw new Error("jsdom internal error: unknown value attribute mode");
      }
    } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate

  }, {
    key: "valueAsDate",
    get: function get() {
      if (!this._idlMemberApplies("valueAsDate")) {
        return null;
      }

      var window = this._ownerDocument._defaultView;

      var convertedValue = this._convertStringToDate(this._value);

      if (convertedValue instanceof Date) {
        return new window.Date(convertedValue.getTime());
      }

      return null;
    },
    set: function set(v) {
      if (!this._idlMemberApplies("valueAsDate")) {
        throw DOMException.create(this._globalObject, ["Failed to set the 'valueAsDate' property on 'HTMLInputElement': This input element does not support Date " + "values.", "InvalidStateError"]);
      }

      if (v !== null && !isDate(v)) {
        throw new TypeError("Failed to set the 'valueAsDate' property on 'HTMLInputElement': The provided value is " + "not a Date.");
      }

      if (v === null || isNaN(v)) {
        this._value = "";
      }

      this._value = this._convertDateToString(v);
    } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasnumber

  }, {
    key: "valueAsNumber",
    get: function get() {
      if (!this._idlMemberApplies("valueAsNumber")) {
        return NaN;
      }

      var parsedValue = this._convertStringToNumber(this._value);

      return parsedValue !== null ? parsedValue : NaN;
    },
    set: function set(v) {
      if (!isFinite(v)) {
        throw new TypeError("Failed to set infinite value as Number");
      }

      if (!this._idlMemberApplies("valueAsNumber")) {
        throw DOMException.create(this._globalObject, ["Failed to set the 'valueAsNumber' property on 'HTMLInputElement': This input element does not support " + "Number values.", "InvalidStateError"]);
      }

      this._value = this._convertNumberToString(v);
    }
  }, {
    key: "files",
    get: function get() {
      if (this.type === "file") {
        this[filesSymbol] = this[filesSymbol] || FileList.createImpl(this._globalObject);
      } else {
        this[filesSymbol] = null;
      }

      return this[filesSymbol];
    },
    set: function set(value) {
      if (this.type === "file" && value !== null) {
        this[filesSymbol] = value;
      }
    }
  }, {
    key: "type",
    get: function get() {
      var typeAttribute = this.getAttributeNS(null, "type");
      return getTypeFromAttribute(typeAttribute);
    },
    set: function set(type) {
      this.setAttributeNS(null, "type", type);
    }
  }, {
    key: "selectionStart",
    get: function get() {
      if (!this._idlMemberApplies("selectionStart")) {
        return null;
      }

      return this._selectionStart;
    },
    set: function set(start) {
      if (!this._idlMemberApplies("selectionStart")) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);
    }
  }, {
    key: "selectionEnd",
    get: function get() {
      if (!this._idlMemberApplies("selectionEnd")) {
        return null;
      }

      return this._selectionEnd;
    },
    set: function set(end) {
      if (!this._idlMemberApplies("selectionEnd")) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);
    }
  }, {
    key: "selectionDirection",
    get: function get() {
      if (!this._idlMemberApplies("selectionDirection")) {
        return null;
      }

      return this._selectionDirection;
    },
    set: function set(dir) {
      if (!this._idlMemberApplies("selectionDirection")) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);
    }
  }, {
    key: "list",
    get: function get() {
      var id = this._getAttributeIfApplies("list");

      if (!id) {
        return null;
      }

      var el = this.getRootNode({}).getElementById(id);

      if (el && el.localName === "datalist") {
        return el;
      }

      return null;
    }
  }, {
    key: "maxLength",
    set: function set(value) {
      if (value < 0) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      this.setAttributeNS(null, "maxlength", String(value));
    } // Reflected IDL attribute does not care about whether the content attribute applies.
    ,
    get: function get() {
      if (!this.hasAttributeNS(null, "maxlength")) {
        return 524288; // stole this from chrome
      }

      return parseInt(this.getAttributeNS(null, "maxlength"));
    }
  }, {
    key: "minLength",
    set: function set(value) {
      if (value < 0) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      this.setAttributeNS(null, "minlength", String(value));
    },
    get: function get() {
      if (!this.hasAttributeNS(null, "minlength")) {
        return 0;
      }

      return parseInt(this.getAttributeNS(null, "minlength"));
    }
  }, {
    key: "size",
    get: function get() {
      if (!this.hasAttributeNS(null, "size")) {
        return 20;
      }

      return parseInt(this.getAttributeNS(null, "size"));
    },
    set: function set(value) {
      if (value <= 0) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      this.setAttributeNS(null, "size", String(value));
    } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes

  }, {
    key: "_minimum",
    get: function get() {
      var min = this._defaultMinimum;

      var attr = this._getAttributeIfApplies("min");

      if (attr !== null && this._convertStringToNumber !== undefined) {
        var parsed = this._convertStringToNumber(attr);

        if (parsed !== null) {
          min = parsed;
        }
      }

      return min;
    }
  }, {
    key: "_maximum",
    get: function get() {
      var max = this._defaultMaximum;

      var attr = this._getAttributeIfApplies("max");

      if (attr !== null && this._convertStringToNumber !== undefined) {
        var parsed = this._convertStringToNumber(attr);

        if (parsed !== null) {
          max = parsed;
        }
      }

      return max;
    }
  }, {
    key: "_defaultMinimum",
    get: function get() {
      if (this.type === "range") {
        return 0;
      }

      return null;
    }
  }, {
    key: "_defaultMaximum",
    get: function get() {
      if (this.type === "range") {
        return 100;
      }

      return null;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step

  }, {
    key: "_allowedValueStep",
    get: function get() {
      if (!this._contentAttributeApplies("step")) {
        return null;
      }

      var attr = this.getAttributeNS(null, "step");

      if (attr === null) {
        return this._defaultStep * this._stepScaleFactor;
      }

      if (asciiCaseInsensitiveMatch(attr, "any")) {
        return null;
      }

      var parsedStep = parseFloatingPointNumber(attr);

      if (parsedStep === null || parsedStep <= 0) {
        return this._defaultStep * this._stepScaleFactor;
      }

      return parsedStep * this._stepScaleFactor;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale

  }, {
    key: "_stepScaleFactor",
    get: function get() {
      var dayInMilliseconds = 24 * 60 * 60 * 1000;

      switch (this.type) {
        case "week":
          return 7 * dayInMilliseconds;

        case "date":
          return dayInMilliseconds;

        case "datetime-local":
        case "datetime":
        case "time":
          return 1000;
      }

      return 1;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default

  }, {
    key: "_defaultStep",
    get: function get() {
      if (this.type === "datetime-local" || this.type === "datetime" || this.type === "time") {
        return 60;
      }

      return 1;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero

  }, {
    key: "_stepBase",
    get: function get() {
      if (this._hasAttributeAndApplies("min")) {
        var min = this._convertStringToNumber(this.getAttributeNS(null, "min"));

        if (min !== null) {
          return min;
        }
      }

      if (this.hasAttributeNS(null, "value")) {
        var value = this._convertStringToNumber(this.getAttributeNS(null, "value"));

        if (value !== null) {
          return value;
        }
      }

      if (this._defaultStepBase !== null) {
        return this._defaultStepBase;
      }

      return 0;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base

  }, {
    key: "_defaultStepBase",
    get: function get() {
      if (this.type === "week") {
        // The start of week 1970-W01
        return -259200000;
      }

      return null;
    }
  }, {
    key: "_required",
    get: function get() {
      return this._hasAttributeAndApplies("required");
    } // https://html.spec.whatwg.org/multipage/input.html#has-a-periodic-domain

  }, {
    key: "_hasAPeriodicDomain",
    get: function get() {
      return this.type === "time";
    } // https://html.spec.whatwg.org/multipage/input.html#has-a-reversed-range

  }, {
    key: "_hasAReversedRange",
    get: function get() {
      return this._hasAPeriodicDomain && this._maximum < this._minimum;
    }
  }, {
    key: "validity",
    get: function get() {
      var _this2 = this;

      if (!this._validity) {
        // Constraint validation: When an element has a reversed range, and the result of applying
        // the algorithm to convert a string to a number to the string given by the element's value
        // is a number, and the number obtained from that algorithm is more than the maximum and less
        // than the minimum, the element is simultaneously suffering from an underflow and suffering
        // from an overflow.
        var reversedRangeSufferingOverUnderflow = function reversedRangeSufferingOverUnderflow() {
          var parsedValue = _this2._convertStringToNumber(_this2._value);

          return parsedValue !== null && parsedValue > _this2._maximum && parsedValue < _this2._minimum;
        };

        var state = {
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing
          valueMissing: function valueMissing() {
            // https://html.spec.whatwg.org/multipage/input.html#the-required-attribute
            // Constraint validation: If the element is required, and its value IDL attribute applies
            // and is in the mode value, and the element is mutable, and the element's value is the
            // empty string, then the element is suffering from being missing.
            //
            // Note: As of today, the value IDL attribute always applies.
            if (_this2._required && valueAttributeMode(_this2.type) === "value" && _this2._mutable && _this2._value === "") {
              return true;
            }

            switch (_this2.type) {
              // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)
              // Constraint validation: If the element is required and its checkedness is
              // false, then the element is suffering from being missing.
              case "checkbox":
                if (_this2._required && !_this2._checkedness) {
                  return true;
                }

                break;
              // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)
              // Constraint validation: If an element in the radio button group is required,
              // and all of the input elements in the radio button group have a checkedness
              // that is false, then the element is suffering from being missing.

              case "radio":
                if (_this2._someInRadioGroup("_required") && !_this2._someInRadioGroup("checked")) {
                  return true;
                }

                break;
              // https://html.spec.whatwg.org/multipage/input.html#file-upload-state-(type=file)
              // Constraint validation: If the element is required and the list of selected files is
              // empty, then the element is suffering from being missing.

              case "file":
                if (_this2._required && _this2.files.length === 0) {
                  return true;
                }

                break;
            }

            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength
          // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have
          // to be set to false.
          tooLong: function tooLong() {
            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength
          tooShort: function tooShort() {
            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow
          rangeOverflow: function rangeOverflow() {
            // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes
            if (_this2._hasAReversedRange) {
              return reversedRangeSufferingOverUnderflow();
            } // Constraint validation: When the element has a maximum and does not have a reversed
            // range, and the result of applying the algorithm to convert a string to a number to the
            // string given by the element's value is a number, and the number obtained from that
            // algorithm is more than the maximum, the element is suffering from an overflow.


            if (_this2._maximum !== null) {
              var parsedValue = _this2._convertStringToNumber(_this2._value);

              if (parsedValue !== null && parsedValue > _this2._maximum) {
                return true;
              }
            }

            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow
          rangeUnderflow: function rangeUnderflow() {
            // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes
            if (_this2._hasAReversedRange) {
              return reversedRangeSufferingOverUnderflow();
            } // Constraint validation: When the element has a minimum and does not have a reversed
            // range, and the result of applying the algorithm to convert a string to a number to the
            // string given by the element's value is a number, and the number obtained from that
            // algorithm is less than the minimum, the element is suffering from an underflow.


            if (_this2._minimum !== null) {
              var parsedValue = _this2._convertStringToNumber(_this2._value);

              if (parsedValue !== null && parsedValue < _this2._minimum) {
                return true;
              }
            }

            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch
          patternMismatch: function patternMismatch() {
            // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute
            if (_this2._value === "" || !_this2._hasAttributeAndApplies("pattern")) {
              return false;
            }

            var regExp;

            try {
              var pattern = _this2.getAttributeNS(null, "pattern"); // The pattern attribute should be matched against the entire value, not just any
              // subset, so add ^ and $ anchors. But also check the validity of the regex itself
              // first.


              new RegExp(pattern, "u"); // eslint-disable-line no-new

              regExp = new RegExp("^(?:" + pattern + ")$", "u");
            } catch (e) {
              return false;
            }

            if (_this2._hasAttributeAndApplies("multiple")) {
              return !splitOnCommas(_this2._value).every(function (value) {
                return regExp.test(value);
              });
            }

            return !regExp.test(_this2._value);
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch
          // https://html.spec.whatwg.org/multipage/input.html#attr-input-step
          stepMismatch: function stepMismatch() {
            var allowedValueStep = _this2._allowedValueStep;

            if (allowedValueStep === null) {
              return false;
            }

            var number = _this2._convertStringToNumber(_this2._value);

            return number !== null && !_this2._isStepAligned(number);
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch
          typeMismatch: function typeMismatch() {
            switch (_this2.type) {
              // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)
              // Constraint validation: While the value of the element is neither the empty string
              // nor a valid absolute URL, the element is suffering from a type mismatch.
              case "url":
                if (_this2._value !== "" && !isValidAbsoluteURL(_this2._value)) {
                  return true;
                }

                break;
              // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)
              // Constraint validation [multiple=false]: While the value of the element is neither the empty
              // string nor a single valid e - mail address, the element is suffering from a type mismatch.
              // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,
              // the element is suffering from a type mismatch.

              case "email":
                if (_this2._value !== "" && !isValidEmailAddress(_this2._getValue(), _this2.hasAttributeNS(null, "multiple"))) {
                  return true;
                }

                break;
            }

            return false;
          }
        };
        this._validity = ValidityState.createImpl(this._globalObject, [], {
          element: this,
          state: state
        });
      }

      return this._validity;
    }
  }]);

  return HTMLInputElementImpl;
}(HTMLElementImpl);

mixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
module.exports = {
  implementation: HTMLInputElementImpl
};