"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/form-controls"),
    getLabelsForLabelable = _require.getLabelsForLabelable;

var _require2 = require("../helpers/strings"),
    parseFloatingPointNumber = _require2.parseFloatingPointNumber;

var HTMLProgressElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLProgressElementImpl, _HTMLElementImpl);

  function HTMLProgressElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLProgressElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLProgressElementImpl).call(this, globalObject, args, privateData));
    _this._labels = null;
    return _this;
  }

  _createClass(HTMLProgressElementImpl, [{
    key: "_isDeterminate",
    get: function get() {
      return this.hasAttributeNS(null, "value");
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-progress-value

  }, {
    key: "_value",
    get: function get() {
      var valueAttr = this.getAttributeNS(null, "value");
      var parsedValue = parseFloatingPointNumber(valueAttr);

      if (parsedValue !== null && parsedValue > 0) {
        return parsedValue;
      }

      return 0;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-progress-current-value

  }, {
    key: "_currentValue",
    get: function get() {
      var value = this._value;
      return value > this.max ? this.max : value;
    }
  }, {
    key: "value",
    get: function get() {
      if (this._isDeterminate) {
        return this._currentValue;
      }

      return 0;
    },
    set: function set(value) {
      this.setAttributeNS(null, "value", value);
    }
  }, {
    key: "max",
    get: function get() {
      var max = this.getAttributeNS(null, "max");

      if (max !== null) {
        var parsedMax = parseFloatingPointNumber(max);

        if (parsedMax !== null && parsedMax > 0) {
          return parsedMax;
        }
      }

      return 1.0;
    },
    set: function set(value) {
      if (value > 0) {
        this.setAttributeNS(null, "max", value);
      }
    }
  }, {
    key: "position",
    get: function get() {
      if (!this._isDeterminate) {
        return -1;
      }

      return this._currentValue / this.max;
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }]);

  return HTMLProgressElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLProgressElementImpl
};