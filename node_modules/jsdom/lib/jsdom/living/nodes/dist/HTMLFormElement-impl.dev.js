"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMException = require("domexception/webidl2js-wrapper");

var _require = require("whatwg-url"),
    serializeURL = _require.serializeURL;

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree;

var _require3 = require("../helpers/events"),
    fireAnEvent = _require3.fireAnEvent;

var _require4 = require("../helpers/form-controls"),
    formOwner = _require4.formOwner,
    isListed = _require4.isListed,
    isSubmittable = _require4.isSubmittable,
    isSubmitButton = _require4.isSubmitButton;

var HTMLCollection = require("../generated/HTMLCollection");

var notImplemented = require("../../browser/not-implemented");

var _require5 = require("../helpers/document-base-url"),
    parseURLToResultingURLRecord = _require5.parseURLToResultingURLRecord;

var encTypes = new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
var methods = new Set(["get", "post", "dialog"]);
var constraintValidationPositiveResult = Symbol("positive");
var constraintValidationNegativeResult = Symbol("negative");

var HTMLFormElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLFormElementImpl, _HTMLElementImpl);

  function HTMLFormElementImpl() {
    _classCallCheck(this, HTMLFormElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLFormElementImpl).apply(this, arguments));
  }

  _createClass(HTMLFormElementImpl, [{
    key: "_descendantAdded",
    value: function _descendantAdded(parent, child) {
      var form = this;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = domSymbolTree.treeIterator(child)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var el = _step.value;

          if (typeof el._changedFormOwner === "function") {
            el._changedFormOwner(form);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), "_descendantAdded", this).apply(this, arguments);
    }
  }, {
    key: "_descendantRemoved",
    value: function _descendantRemoved(parent, child) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = domSymbolTree.treeIterator(child)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var el = _step2.value;

          if (typeof el._changedFormOwner === "function") {
            el._changedFormOwner(null);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      _get(_getPrototypeOf(HTMLFormElementImpl.prototype), "_descendantRemoved", this).apply(this, arguments);
    }
  }, {
    key: "_getElementNodes",
    value: function _getElementNodes() {
      var _this = this;

      return domSymbolTree.treeToArray(this.getRootNode({}), {
        filter: function filter(node) {
          if (!isListed(node) || node._localName === "input" && node.type === "image") {
            return false;
          }

          return formOwner(node) === _this;
        }
      });
    } // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements

  }, {
    key: "_doSubmit",
    value: function _doSubmit() {
      if (!this.isConnected) {
        return;
      }

      this.submit();
    }
  }, {
    key: "submit",
    value: function submit() {
      if (!fireAnEvent("submit", this, undefined, {
        bubbles: true,
        cancelable: true
      })) {
        return;
      }

      notImplemented("HTMLFormElement.prototype.submit", this._ownerDocument._defaultView);
    }
  }, {
    key: "requestSubmit",
    value: function requestSubmit() {
      var submitter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      if (submitter !== undefined) {
        if (!isSubmitButton(submitter)) {
          throw new TypeError("The specified element is not a submit button");
        }

        if (submitter.form !== this) {
          throw DOMException.create(this._globalObject, ["The specified element is not owned by this form element", "NotFoundError"]);
        }
      }

      if (!fireAnEvent("submit", this, undefined, {
        bubbles: true,
        cancelable: true
      })) {
        return;
      }

      notImplemented("HTMLFormElement.prototype.requestSubmit", this._ownerDocument._defaultView);
    }
  }, {
    key: "_doReset",
    value: function _doReset() {
      if (!this.isConnected) {
        return;
      }

      this.reset();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (!fireAnEvent("reset", this, undefined, {
        bubbles: true,
        cancelable: true
      })) {
        return;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.elements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var el = _step3.value;

          if (typeof el._formReset === "function") {
            el._formReset();
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: "checkValidity",
    // If the checkValidity() method is invoked, the user agent must statically validate the
    // constraints of the form element, and return true if the constraint validation returned
    // a positive result, and false if it returned a negative result.
    value: function checkValidity() {
      return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;
    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints

  }, {
    key: "reportValidity",
    value: function reportValidity() {
      return this.checkValidity();
    } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints

  }, {
    key: "_staticallyValidateConstraints",
    value: function _staticallyValidateConstraints() {
      var controls = [];
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var el = _step4.value;

          if (el.form === this && isSubmittable(el)) {
            controls.push(el);
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      var invalidControls = [];

      for (var _i = 0, _controls = controls; _i < _controls.length; _i++) {
        var control = _controls[_i];

        if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {
          invalidControls.push(control);
        }
      }

      if (invalidControls.length === 0) {
        return {
          result: constraintValidationPositiveResult
        };
      }

      var unhandledInvalidControls = [];

      for (var _i2 = 0, _invalidControls = invalidControls; _i2 < _invalidControls.length; _i2++) {
        var invalidControl = _invalidControls[_i2];
        var notCancelled = fireAnEvent("invalid", invalidControl, undefined, {
          cancelable: true
        });

        if (notCancelled) {
          unhandledInvalidControls.push(invalidControl);
        }
      }

      return {
        result: constraintValidationNegativeResult,
        unhandledInvalidControls: unhandledInvalidControls
      };
    }
  }, {
    key: "elements",
    get: function get() {
      var _this2 = this;

      // TODO: Return a HTMLFormControlsCollection
      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this.getRootNode({}),
        query: function query() {
          return _this2._getElementNodes();
        }
      });
    }
  }, {
    key: "length",
    get: function get() {
      return this.elements.length;
    }
  }, {
    key: "method",
    get: function get() {
      var method = this.getAttributeNS(null, "method");

      if (method) {
        method = method.toLowerCase();
      }

      if (methods.has(method)) {
        return method;
      }

      return "get";
    },
    set: function set(V) {
      this.setAttributeNS(null, "method", V);
    }
  }, {
    key: "enctype",
    get: function get() {
      var type = this.getAttributeNS(null, "enctype");

      if (type) {
        type = type.toLowerCase();
      }

      if (encTypes.has(type)) {
        return type;
      }

      return "application/x-www-form-urlencoded";
    },
    set: function set(V) {
      this.setAttributeNS(null, "enctype", V);
    }
  }, {
    key: "action",
    get: function get() {
      var attributeValue = this.getAttributeNS(null, "action");

      if (attributeValue === null || attributeValue === "") {
        return this._ownerDocument.URL;
      }

      var urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);

      if (urlRecord === null) {
        return attributeValue;
      }

      return serializeURL(urlRecord);
    },
    set: function set(V) {
      this.setAttributeNS(null, "action", V);
    }
  }]);

  return HTMLFormElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLFormElementImpl
};