"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../generated/utils.js");

exports.implementation =
/*#__PURE__*/
function () {
  function NodeListImpl(globalObject, args, privateData) {
    _classCallCheck(this, NodeListImpl);

    if (privateData.nodes) {
      this._list = _toConsumableArray(privateData.nodes);
      this._isLive = false;
    } else {
      this._list = [];
      this._isLive = true;
      this._version = -1;
      this._element = privateData.element;
      this._query = privateData.query;

      this._update();
    }
  }

  _createClass(NodeListImpl, [{
    key: "item",
    value: function item(index) {
      this._update();

      return this._list[index] || null;
    }
  }, {
    key: "_update",
    value: function _update() {
      if (this._isLive) {
        if (this._version < this._element._version) {
          var snapshot = this._query();

          for (var i = 0; i < snapshot.length; i++) {
            this._list[i] = snapshot[i];
          }

          this._list.length = snapshot.length;
          this._version = this._element._version;
        }
      }
    }
  }, {
    key: "length",
    get: function get() {
      this._update();

      return this._list.length;
    }
  }, {
    key: idlUtils.supportedPropertyIndices,
    get: function get() {
      this._update();

      return this._list.keys();
    }
  }]);

  return NodeListImpl;
}();