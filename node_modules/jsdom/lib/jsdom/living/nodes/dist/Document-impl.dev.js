"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("tough-cookie"),
    CookieJar = _require.CookieJar;

var NodeImpl = require("./Node-impl").implementation;

var idlUtils = require("../generated/utils");

var NODE_TYPE = require("../node-type");

var _require2 = require("../../utils"),
    mixin = _require2.mixin,
    memoizeQuery = _require2.memoizeQuery;

var _require3 = require("../helpers/traversal"),
    firstChildWithLocalName = _require3.firstChildWithLocalName,
    firstChildWithLocalNames = _require3.firstChildWithLocalNames,
    firstDescendantWithLocalName = _require3.firstDescendantWithLocalName;

var whatwgURL = require("whatwg-url");

var StyleSheetList = require("../generated/StyleSheetList.js");

var _require4 = require("../helpers/internal-constants"),
    domSymbolTree = _require4.domSymbolTree;

var eventAccessors = require("../helpers/create-event-accessor");

var _require5 = require("../helpers/strings"),
    asciiLowercase = _require5.asciiLowercase,
    stripAndCollapseASCIIWhitespace = _require5.stripAndCollapseASCIIWhitespace;

var _require6 = require("../helpers/text"),
    childTextContent = _require6.childTextContent;

var _require7 = require("../helpers/namespaces"),
    HTML_NS = _require7.HTML_NS,
    SVG_NS = _require7.SVG_NS;

var DOMException = require("domexception/webidl2js-wrapper");

var _require8 = require("../../browser/parser"),
    parseIntoDocument = _require8.parseIntoDocument;

var History = require("../generated/History");

var Location = require("../generated/Location");

var HTMLCollection = require("../generated/HTMLCollection");

var NodeList = require("../generated/NodeList");

var validateName = require("../helpers/validate-names").name;

var _require9 = require("../helpers/validate-names"),
    validateAndExtract = _require9.validateAndExtract;

var _require10 = require("../helpers/events"),
    fireAnEvent = _require10.fireAnEvent;

var _require11 = require("../helpers/shadow-dom"),
    shadowIncludingInclusiveDescendantsIterator = _require11.shadowIncludingInclusiveDescendantsIterator;

var _require12 = require("../helpers/custom-elements"),
    enqueueCECallbackReaction = _require12.enqueueCECallbackReaction;

var _require13 = require("../helpers/create-element"),
    _createElement = _require13.createElement,
    internalCreateElementNSSteps = _require13.internalCreateElementNSSteps;

var DocumentOrShadowRootImpl = require("./DocumentOrShadowRoot-impl").implementation;

var GlobalEventHandlersImpl = require("./GlobalEventHandlers-impl").implementation;

var NonElementParentNodeImpl = require("./NonElementParentNode-impl").implementation;

var ParentNodeImpl = require("./ParentNode-impl").implementation;

var _require14 = require("../node"),
    clone = _require14.clone,
    listOfElementsWithQualifiedName = _require14.listOfElementsWithQualifiedName,
    listOfElementsWithNamespaceAndLocalName = _require14.listOfElementsWithNamespaceAndLocalName,
    listOfElementsWithClassNames = _require14.listOfElementsWithClassNames;

var generatedAttr = require("../generated/Attr");

var Comment = require("../generated/Comment");

var ProcessingInstruction = require("../generated/ProcessingInstruction");

var CDATASection = require("../generated/CDATASection");

var Text = require("../generated/Text");

var DocumentFragment = require("../generated/DocumentFragment");

var DOMImplementation = require("../generated/DOMImplementation");

var TreeWalker = require("../generated/TreeWalker");

var NodeIterator = require("../generated/NodeIterator");

var ShadowRoot = require("../generated/ShadowRoot");

var Range = require("../generated/Range");

var documents = require("../documents.js");

var CustomEvent = require("../generated/CustomEvent");

var ErrorEvent = require("../generated/ErrorEvent");

var Event = require("../generated/Event");

var FocusEvent = require("../generated/FocusEvent");

var HashChangeEvent = require("../generated/HashChangeEvent");

var KeyboardEvent = require("../generated/KeyboardEvent");

var MessageEvent = require("../generated/MessageEvent");

var MouseEvent = require("../generated/MouseEvent");

var PopStateEvent = require("../generated/PopStateEvent");

var ProgressEvent = require("../generated/ProgressEvent");

var TouchEvent = require("../generated/TouchEvent");

var UIEvent = require("../generated/UIEvent");

var RequestManager = require("../../browser/resources/request-manager");

var AsyncResourceQueue = require("../../browser/resources/async-resource-queue");

var ResourceQueue = require("../../browser/resources/resource-queue");

var PerDocumentResourceLoader = require("../../browser/resources/per-document-resource-loader");

function clearChildNodes(node) {
  for (var child = domSymbolTree.firstChild(node); child; child = domSymbolTree.firstChild(node)) {
    node.removeChild(child);
  }
}

function pad(number) {
  if (number < 10) {
    return "0" + number;
  }

  return number;
}

function toLastModifiedString(date) {
  return pad(date.getMonth() + 1) + "/" + pad(date.getDate()) + "/" + date.getFullYear() + " " + pad(date.getHours()) + ":" + pad(date.getMinutes()) + ":" + pad(date.getSeconds());
}

var eventInterfaceTable = {
  customevent: CustomEvent,
  errorevent: ErrorEvent,
  event: Event,
  events: Event,
  focusevent: FocusEvent,
  hashchangeevent: HashChangeEvent,
  htmlevents: Event,
  keyboardevent: KeyboardEvent,
  messageevent: MessageEvent,
  mouseevent: MouseEvent,
  mouseevents: MouseEvent,
  popstateevent: PopStateEvent,
  progressevent: ProgressEvent,
  svgevents: Event,
  touchevent: TouchEvent,
  uievent: UIEvent,
  uievents: UIEvent
};

var DocumentImpl =
/*#__PURE__*/
function (_NodeImpl) {
  _inherits(DocumentImpl, _NodeImpl);

  function DocumentImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, DocumentImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DocumentImpl).call(this, globalObject, args, privateData));

    _this._initGlobalEvents();

    _this._ownerDocument = _assertThisInitialized(_this);
    _this.nodeType = NODE_TYPE.DOCUMENT_NODE;

    if (!privateData.options) {
      privateData.options = {};
    }

    if (!privateData.options.parsingMode) {
      privateData.options.parsingMode = "xml";
    }

    if (!privateData.options.encoding) {
      privateData.options.encoding = "UTF-8";
    }

    if (!privateData.options.contentType) {
      privateData.options.contentType = privateData.options.parsingMode === "xml" ? "application/xml" : "text/html";
    }

    _this._parsingMode = privateData.options.parsingMode;
    _this._implementation = DOMImplementation.createImpl(_this._globalObject, [], {
      ownerDocument: _assertThisInitialized(_this)
    });
    _this._defaultView = privateData.options.defaultView || null;
    _this._global = privateData.options.global;
    _this._ids = Object.create(null);
    _this._attached = true;
    _this._currentScript = null;
    _this._pageShowingFlag = false;
    _this._cookieJar = privateData.options.cookieJar;
    _this._parseOptions = privateData.options.parseOptions;
    _this._scriptingDisabled = privateData.options.scriptingDisabled;

    if (_this._cookieJar === undefined) {
      _this._cookieJar = new CookieJar(null, {
        looseMode: true
      });
    }

    _this.contentType = privateData.options.contentType;
    _this._encoding = privateData.options.encoding;
    var urlOption = privateData.options.url === undefined ? "about:blank" : privateData.options.url;
    var parsed = whatwgURL.parseURL(urlOption);

    if (parsed === null) {
      throw new TypeError("Could not parse \"".concat(urlOption, "\" as a URL"));
    }

    _this._URL = parsed;
    _this._origin = whatwgURL.serializeURLOrigin(parsed);
    _this._location = Location.createImpl(_this._globalObject, [], {
      relevantDocument: _assertThisInitialized(_this)
    });
    _this._history = History.createImpl(_this._globalObject, [], {
      window: _this._defaultView,
      document: _assertThisInitialized(_this),
      actAsIfLocationReloadCalled: function actAsIfLocationReloadCalled() {
        return _this._location.reload();
      }
    });
    _this._workingNodeIterators = [];
    _this._workingNodeIteratorsMax = privateData.options.concurrentNodeIterators === undefined ? 10 : Number(privateData.options.concurrentNodeIterators);

    if (isNaN(_this._workingNodeIteratorsMax)) {
      throw new TypeError("The 'concurrentNodeIterators' option must be a Number");
    }

    if (_this._workingNodeIteratorsMax < 0) {
      throw new RangeError("The 'concurrentNodeIterators' option must be a non negative Number");
    }

    _this._referrer = privateData.options.referrer || "";
    _this._lastModified = toLastModifiedString(privateData.options.lastModified || new Date());
    _this._asyncQueue = new AsyncResourceQueue();
    _this._queue = new ResourceQueue({
      asyncQueue: _this._asyncQueue,
      paused: false
    });
    _this._deferQueue = new ResourceQueue({
      paused: true
    });
    _this._requestManager = new RequestManager();
    _this._currentDocumentReadiness = privateData.options.readyState || "loading";
    _this._lastFocusedElement = null;
    _this._resourceLoader = new PerDocumentResourceLoader(_assertThisInitialized(_this)); // Each Document in a browsing context can also have a latest entry. This is the entry for that Document
    // to which the browsing context's session history was most recently traversed. When a Document is created,
    // it initially has no latest entry.

    _this._latestEntry = null; // https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#throw-on-dynamic-markup-insertion-counter

    _this._throwOnDynamicMarkupInsertionCounter = 0;
    return _this;
  }

  _createClass(DocumentImpl, [{
    key: "_getTheParent",
    value: function _getTheParent(event) {
      if (event.type === "load" || !this._defaultView) {
        return null;
      }

      return idlUtils.implForWrapper(this._defaultView);
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      return Boolean(this._lastFocusedElement);
    }
  }, {
    key: "_descendantRemoved",
    value: function _descendantRemoved(parent, child) {
      if (child.tagName === "STYLE") {
        this.styleSheets._remove(child.sheet);
      }

      _get(_getPrototypeOf(DocumentImpl.prototype), "_descendantRemoved", this).apply(this, arguments);
    }
  }, {
    key: "write",
    value: function write() {
      var text = "";

      for (var i = 0; i < arguments.length; ++i) {
        text += String(arguments[i]);
      }

      if (this._parsingMode === "xml") {
        throw DOMException.create(this._globalObject, ["Cannot use document.write on XML documents", "InvalidStateError"]);
      }

      if (this._throwOnDynamicMarkupInsertionCounter > 0) {
        throw DOMException.create(this._globalObject, ["Cannot use document.write while a custom element upgrades", "InvalidStateError"]);
      }

      if (this._writeAfterElement) {
        // If called from an script element directly (during the first tick),
        // the new elements are inserted right after that element.
        var tempDiv = this.createElement("div");
        tempDiv.innerHTML = text;
        var child = tempDiv.firstChild;
        var previous = this._writeAfterElement;
        var parent = this._writeAfterElement.parentNode;

        while (child) {
          var node = child;
          child = child.nextSibling;
          node._isMovingDueToDocumentWrite = true; // hack for script execution

          parent.insertBefore(node, previous.nextSibling);
          node._isMovingDueToDocumentWrite = false;
          previous = node;
        }
      } else if (this.readyState === "loading") {
        // During page loading, document.write appends to the current element
        // Find the last child that has been added to the document.
        if (this.lastChild) {
          var _node = this;

          while (_node.lastChild && _node.lastChild.nodeType === NODE_TYPE.ELEMENT_NODE) {
            _node = _node.lastChild;
          }

          _node.innerHTML = text;
        } else {
          clearChildNodes(this);
          parseIntoDocument(text, this);
        }
      } else if (text) {
        clearChildNodes(this);
        parseIntoDocument(text, this);
      }
    }
  }, {
    key: "writeln",
    value: function writeln() {
      this.write.apply(this, Array.prototype.slice.call(arguments).concat(["\n"]));
    } // This is implemented separately for Document (which has a _ids cache) and DocumentFragment (which does not).

  }, {
    key: "getElementById",
    value: function getElementById(id) {
      var _this2 = this;

      if (!this._ids[id]) {
        return null;
      } // Let's find the first element with where it's root is the document.


      var matchElement = this._ids[id].find(function (candidate) {
        var root = candidate;

        while (domSymbolTree.parent(root)) {
          root = domSymbolTree.parent(root);
        }

        return root === _this2;
      });

      return matchElement || null;
    }
  }, {
    key: "open",
    value: function open() {
      var child = domSymbolTree.firstChild(this);

      while (child) {
        this.removeChild(child);
        child = domSymbolTree.firstChild(this);
      }

      this._modified();

      return this;
    }
  }, {
    key: "close",
    value: function close(noQueue) {
      var _this3 = this;

      // In some cases like when creating an empty iframe, I want to emit the
      // events right away to avoid problems if later I asign the property src.
      if (noQueue) {
        this.readyState = "complete";
        fireAnEvent("DOMContentLoaded", this, undefined, {
          bubbles: true
        });
        fireAnEvent("load", this);
        return;
      }

      this._queue.resume();

      var dummyPromise = Promise.resolve();

      var onDOMContentLoad = function onDOMContentLoad() {
        var doc = _this3;

        function dispatchEvent() {
          // https://html.spec.whatwg.org/#the-end
          doc.readyState = "interactive";
          fireAnEvent("DOMContentLoaded", doc, undefined, {
            bubbles: true
          });
        }

        return new Promise(function (resolve) {
          if (!_this3._deferQueue.tail) {
            dispatchEvent();
            return resolve();
          }

          _this3._deferQueue.setListener(function () {
            dispatchEvent();
            resolve();
          });

          return _this3._deferQueue.resume();
        });
      };

      var onLoad = function onLoad() {
        var doc = _this3;

        function dispatchEvent() {
          doc.readyState = "complete";
          fireAnEvent("load", doc);
        }

        return new Promise(function (resolve) {
          if (_this3._asyncQueue.count() === 0) {
            dispatchEvent();
            return resolve();
          }

          return _this3._asyncQueue.setListener(function () {
            dispatchEvent();
            resolve();
          });
        });
      };

      this._queue.push(dummyPromise, onDOMContentLoad, null); // Set the readyState to 'complete' once all resources are loaded.
      // As a side-effect the document's load-event will be dispatched.


      this._queue.push(dummyPromise, onLoad, null, true);
    }
  }, {
    key: "getElementsByName",
    value: function getElementsByName(elementName) {
      var _this4 = this;

      return NodeList.createImpl(this._globalObject, [], {
        element: this,
        query: function query() {
          return domSymbolTree.treeToArray(_this4, {
            filter: function filter(node) {
              return node.getAttributeNS && node.getAttributeNS(null, "name") === elementName;
            }
          });
        }
      });
    }
  }, {
    key: "_runPreRemovingSteps",
    value: function _runPreRemovingSteps(oldNode) {
      // https://html.spec.whatwg.org/#focus-fixup-rule
      if (oldNode === this.activeElement) {
        this._lastFocusedElement = this.body;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._workingNodeIterators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var activeNodeIterator = _step.value;

          activeNodeIterator._preRemovingSteps(oldNode);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "createEvent",
    value: function createEvent(type) {
      var typeLower = type.toLowerCase();
      var eventWrapper = eventInterfaceTable[typeLower] || null;

      if (!eventWrapper) {
        throw DOMException.create(this._globalObject, ["The provided event type (\"" + type + "\") is invalid", "NotSupportedError"]);
      }

      var impl = eventWrapper.createImpl(this._globalObject, [""]);
      impl._initializedFlag = false;
      return impl;
    }
  }, {
    key: "createRange",
    value: function createRange() {
      return Range.createImpl(this._globalObject, [], {
        start: {
          node: this,
          offset: 0
        },
        end: {
          node: this,
          offset: 0
        }
      });
    }
  }, {
    key: "createProcessingInstruction",
    value: function createProcessingInstruction(target, data) {
      validateName(this._globalObject, target);

      if (data.includes("?>")) {
        throw DOMException.create(this._globalObject, ["Processing instruction data cannot contain the string \"?>\"", "InvalidCharacterError"]);
      }

      return ProcessingInstruction.createImpl(this._globalObject, [], {
        ownerDocument: this,
        target: target,
        data: data
      });
    } // https://dom.spec.whatwg.org/#dom-document-createcdatasection

  }, {
    key: "createCDATASection",
    value: function createCDATASection(data) {
      if (this._parsingMode === "html") {
        throw DOMException.create(this._globalObject, ["Cannot create CDATA sections in HTML documents", "NotSupportedError"]);
      }

      if (data.includes("]]>")) {
        throw DOMException.create(this._globalObject, ["CDATA section data cannot contain the string \"]]>\"", "InvalidCharacterError"]);
      }

      return CDATASection.createImpl(this._globalObject, [], {
        ownerDocument: this,
        data: data
      });
    }
  }, {
    key: "createTextNode",
    value: function createTextNode(data) {
      return Text.createImpl(this._globalObject, [], {
        ownerDocument: this,
        data: data
      });
    }
  }, {
    key: "createComment",
    value: function createComment(data) {
      return Comment.createImpl(this._globalObject, [], {
        ownerDocument: this,
        data: data
      });
    } // https://dom.spec.whatwg.org/#dom-document-createelement

  }, {
    key: "createElement",
    value: function createElement(localName, options) {
      validateName(this._globalObject, localName);

      if (this._parsingMode === "html") {
        localName = asciiLowercase(localName);
      }

      var isValue = null;

      if (options && options.is !== undefined) {
        isValue = options.is;
      }

      var namespace = this._parsingMode === "html" || this.contentType === "application/xhtml+xml" ? HTML_NS : null;
      return _createElement(this, localName, namespace, null, isValue, true);
    } // https://dom.spec.whatwg.org/#dom-document-createelementns

  }, {
    key: "createElementNS",
    value: function createElementNS(namespace, qualifiedName, options) {
      return internalCreateElementNSSteps(this, namespace, qualifiedName, options);
    }
  }, {
    key: "createDocumentFragment",
    value: function createDocumentFragment() {
      return DocumentFragment.createImpl(this._globalObject, [], {
        ownerDocument: this
      });
    }
  }, {
    key: "createAttribute",
    value: function createAttribute(localName) {
      validateName(this._globalObject, localName);

      if (this._parsingMode === "html") {
        localName = asciiLowercase(localName);
      }

      return this._createAttribute({
        localName: localName
      });
    }
  }, {
    key: "createAttributeNS",
    value: function createAttributeNS(namespace, name) {
      if (namespace === undefined) {
        namespace = null;
      }

      namespace = namespace !== null ? String(namespace) : namespace;
      var extracted = validateAndExtract(this._globalObject, namespace, name);
      return this._createAttribute({
        namespace: extracted.namespace,
        namespacePrefix: extracted.prefix,
        localName: extracted.localName
      });
    } // Using this helper function rather than directly calling generatedAttr.createImpl may be preferred in some files,
    // to avoid introducing a potentially cyclic dependency on generated/Attr.js.

  }, {
    key: "_createAttribute",
    value: function _createAttribute(_ref) {
      var localName = _ref.localName,
          value = _ref.value,
          namespace = _ref.namespace,
          namespacePrefix = _ref.namespacePrefix;
      return generatedAttr.createImpl(this._globalObject, [], {
        localName: localName,
        value: value,
        namespace: namespace,
        namespacePrefix: namespacePrefix,
        ownerDocument: this
      });
    }
  }, {
    key: "createTreeWalker",
    value: function createTreeWalker(root, whatToShow, filter) {
      return TreeWalker.createImpl(this._globalObject, [], {
        root: root,
        whatToShow: whatToShow,
        filter: filter
      });
    }
  }, {
    key: "createNodeIterator",
    value: function createNodeIterator(root, whatToShow, filter) {
      var nodeIterator = NodeIterator.createImpl(this._globalObject, [], {
        root: root,
        whatToShow: whatToShow,
        filter: filter
      });

      this._workingNodeIterators.push(nodeIterator);

      while (this._workingNodeIterators.length > this._workingNodeIteratorsMax) {
        var toInactivate = this._workingNodeIterators.shift();

        toInactivate._working = false;
      }

      return nodeIterator;
    }
  }, {
    key: "importNode",
    value: function importNode(node, deep) {
      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {
        throw DOMException.create(this._globalObject, ["Cannot import a document node", "NotSupportedError"]);
      } else if (ShadowRoot.isImpl(node)) {
        throw DOMException.create(this._globalObject, ["Cannot adopt a shadow root", "NotSupportedError"]);
      }

      return clone(node, this, deep);
    } // https://dom.spec.whatwg.org/#dom-document-adoptnode

  }, {
    key: "adoptNode",
    value: function adoptNode(node) {
      if (node.nodeType === NODE_TYPE.DOCUMENT_NODE) {
        throw DOMException.create(this._globalObject, ["Cannot adopt a document node", "NotSupportedError"]);
      } else if (ShadowRoot.isImpl(node)) {
        throw DOMException.create(this._globalObject, ["Cannot adopt a shadow root", "HierarchyRequestError"]);
      }

      this._adoptNode(node);

      return node;
    } // https://dom.spec.whatwg.org/#concept-node-adopt

  }, {
    key: "_adoptNode",
    value: function _adoptNode(node) {
      var newDocument = this;
      var oldDocument = node._ownerDocument;
      var parent = domSymbolTree.parent(node);

      if (parent) {
        parent._remove(node);
      }

      if (oldDocument !== newDocument) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = shadowIncludingInclusiveDescendantsIterator(node)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var inclusiveDescendant = _step2.value;
            inclusiveDescendant._ownerDocument = newDocument;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = shadowIncludingInclusiveDescendantsIterator(node)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _inclusiveDescendant = _step3.value;

            if (_inclusiveDescendant._ceState === "custom") {
              enqueueCECallbackReaction(_inclusiveDescendant, "adoptedCallback", [idlUtils.wrapperForImpl(oldDocument), idlUtils.wrapperForImpl(newDocument)]);
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = shadowIncludingInclusiveDescendantsIterator(node)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _inclusiveDescendant2 = _step4.value;

            if (_inclusiveDescendant2._adoptingSteps) {
              _inclusiveDescendant2._adoptingSteps(oldDocument);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    }
  }, {
    key: "clear",
    // The clear(), captureEvents(), and releaseEvents() methods must do nothing
    value: function clear() {}
  }, {
    key: "captureEvents",
    value: function captureEvents() {}
  }, {
    key: "releaseEvents",
    value: function releaseEvents() {}
  }, {
    key: "getSelection",
    // https://w3c.github.io/selection-api/#extensions-to-document-interface
    value: function getSelection() {
      return this._defaultView ? this._defaultView._selection : null;
    } // Needed to ensure that the resulting document has the correct prototype chain:
    // https://dom.spec.whatwg.org/#concept-node-clone says "that implements the same interfaces as node".

  }, {
    key: "_cloneDocument",
    value: function _cloneDocument() {
      var copy = documents.createImpl(this._globalObject, {
        contentType: this.contentType,
        encoding: this._encoding,
        parsingMode: this._parsingMode
      });
      copy._URL = this._URL;
      copy._origin = this._origin;
      return copy;
    }
  }, {
    key: "compatMode",
    get: function get() {
      return this._parsingMode === "xml" || this.doctype ? "CSS1Compat" : "BackCompat";
    }
  }, {
    key: "charset",
    get: function get() {
      return this._encoding;
    }
  }, {
    key: "characterSet",
    get: function get() {
      return this._encoding;
    }
  }, {
    key: "inputEncoding",
    get: function get() {
      return this._encoding;
    }
  }, {
    key: "doctype",
    get: function get() {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var childNode = _step5.value;

          if (childNode.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {
            return childNode;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return null;
    }
  }, {
    key: "URL",
    get: function get() {
      return whatwgURL.serializeURL(this._URL);
    }
  }, {
    key: "documentURI",
    get: function get() {
      return whatwgURL.serializeURL(this._URL);
    }
  }, {
    key: "location",
    get: function get() {
      return this._defaultView ? this._location : null;
    } // https://dom.spec.whatwg.org/#dom-document-documentelement

  }, {
    key: "documentElement",
    get: function get() {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var childNode = _step6.value;

          if (childNode.nodeType === NODE_TYPE.ELEMENT_NODE) {
            return childNode;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return null;
    }
  }, {
    key: "implementation",
    get: function get() {
      return this._implementation;
    },
    set: function set(implementation) {
      this._implementation = implementation;
    }
  }, {
    key: "defaultView",
    get: function get() {
      return this._defaultView;
    }
  }, {
    key: "currentScript",
    get: function get() {
      return this._currentScript;
    }
  }, {
    key: "readyState",
    get: function get() {
      return this._currentDocumentReadiness;
    },
    set: function set(state) {
      this._currentDocumentReadiness = state;
      fireAnEvent("readystatechange", this);
    }
  }, {
    key: "referrer",
    get: function get() {
      return this._referrer || "";
    }
  }, {
    key: "lastModified",
    get: function get() {
      return this._lastModified;
    }
  }, {
    key: "images",
    get: function get() {
      return this.getElementsByTagName("IMG");
    }
  }, {
    key: "embeds",
    get: function get() {
      return this.getElementsByTagName("EMBED");
    }
  }, {
    key: "plugins",
    get: function get() {
      return this.embeds;
    }
  }, {
    key: "links",
    get: function get() {
      var _this5 = this;

      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: function query() {
          return domSymbolTree.treeToArray(_this5, {
            filter: function filter(node) {
              return (node._localName === "a" || node._localName === "area") && node.hasAttributeNS(null, "href") && node._namespaceURI === HTML_NS;
            }
          });
        }
      });
    }
  }, {
    key: "forms",
    get: function get() {
      return this.getElementsByTagName("FORM");
    }
  }, {
    key: "scripts",
    get: function get() {
      return this.getElementsByTagName("SCRIPT");
    }
  }, {
    key: "anchors",
    get: function get() {
      var _this6 = this;

      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: function query() {
          return domSymbolTree.treeToArray(_this6, {
            filter: function filter(node) {
              return node._localName === "a" && node.hasAttributeNS(null, "name") && node._namespaceURI === HTML_NS;
            }
          });
        }
      });
    } // The applets attribute must return an
    // HTMLCollection rooted at the Document node,
    // whose filter matches nothing.
    // (It exists for historical reasons.)

  }, {
    key: "applets",
    get: function get() {
      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: function query() {
          return [];
        }
      });
    }
  }, {
    key: "title",
    get: function get() {
      var documentElement = this.documentElement;
      var value = "";

      if (documentElement && documentElement._localName === "svg") {
        var svgTitleElement = firstChildWithLocalName(documentElement, "title", SVG_NS);

        if (svgTitleElement) {
          value = childTextContent(svgTitleElement);
        }
      } else {
        var titleElement = firstDescendantWithLocalName(this, "title");

        if (titleElement) {
          value = childTextContent(titleElement);
        }
      }

      value = stripAndCollapseASCIIWhitespace(value);
      return value;
    },
    set: function set(value) {
      var documentElement = this.documentElement;
      var element;

      if (documentElement && documentElement._localName === "svg") {
        element = firstChildWithLocalName(documentElement, "title", SVG_NS);

        if (!element) {
          element = this.createElementNS(SVG_NS, "title");

          this._insert(element, documentElement.firstChild);
        }

        element.textContent = value;
      } else if (documentElement && documentElement._namespaceURI === HTML_NS) {
        var titleElement = firstDescendantWithLocalName(this, "title");
        var headElement = this.head;

        if (titleElement === null && headElement === null) {
          return;
        }

        if (titleElement !== null) {
          element = titleElement;
        } else {
          element = this.createElement("title");

          headElement._append(element);
        }

        element.textContent = value;
      }
    }
  }, {
    key: "dir",
    get: function get() {
      return this.documentElement ? this.documentElement.dir : "";
    },
    set: function set(value) {
      if (this.documentElement) {
        this.documentElement.dir = value;
      }
    }
  }, {
    key: "head",
    get: function get() {
      return this.documentElement ? firstChildWithLocalName(this.documentElement, "head") : null;
    }
  }, {
    key: "body",
    get: function get() {
      var documentElement = this.documentElement;

      if (!documentElement || documentElement._localName !== "html" || documentElement._namespaceURI !== HTML_NS) {
        return null;
      }

      return firstChildWithLocalNames(this.documentElement, new Set(["body", "frameset"]));
    },
    set: function set(value) {
      if (value === null || value._namespaceURI !== HTML_NS || value._localName !== "body" && value._localName !== "frameset") {
        throw DOMException.create(this._globalObject, ["Cannot set the body to null or a non-body/frameset element", "HierarchyRequestError"]);
      }

      var bodyElement = this.body;

      if (value === bodyElement) {
        return;
      }

      if (bodyElement !== null) {
        bodyElement.parentNode._replace(value, bodyElement);

        return;
      }

      var documentElement = this.documentElement;

      if (documentElement === null) {
        throw DOMException.create(this._globalObject, ["Cannot set the body when there is no document element", "HierarchyRequestError"]);
      }

      documentElement._append(value);
    }
  }, {
    key: "cookie",
    get: function get() {
      return this._cookieJar.getCookieStringSync(this.URL, {
        http: false
      });
    },
    set: function set(cookieStr) {
      cookieStr = String(cookieStr);

      this._cookieJar.setCookieSync(cookieStr, this.URL, {
        http: false,
        ignoreError: true
      });
    }
  }, {
    key: "styleSheets",
    get: function get() {
      if (!this._styleSheets) {
        this._styleSheets = StyleSheetList.createImpl(this._globalObject);
      } // TODO: each style and link element should register its sheet on creation
      // and remove it on removal.


      return this._styleSheets;
    }
  }, {
    key: "hidden",
    get: function get() {
      if (this._defaultView && this._defaultView._pretendToBeVisual) {
        return false;
      }

      return true;
    }
  }, {
    key: "visibilityState",
    get: function get() {
      if (this._defaultView && this._defaultView._pretendToBeVisual) {
        return "visible";
      }

      return "prerender";
    }
  }]);

  return DocumentImpl;
}(NodeImpl);

eventAccessors.createEventAccessor(DocumentImpl.prototype, "readystatechange");
mixin(DocumentImpl.prototype, DocumentOrShadowRootImpl.prototype);
mixin(DocumentImpl.prototype, GlobalEventHandlersImpl.prototype);
mixin(DocumentImpl.prototype, NonElementParentNodeImpl.prototype);
mixin(DocumentImpl.prototype, ParentNodeImpl.prototype);
DocumentImpl.prototype.getElementsByTagName = memoizeQuery(function (qualifiedName) {
  return listOfElementsWithQualifiedName(qualifiedName, this);
});
DocumentImpl.prototype.getElementsByTagNameNS = memoizeQuery(function (namespace, localName) {
  return listOfElementsWithNamespaceAndLocalName(namespace, localName, this);
});
DocumentImpl.prototype.getElementsByClassName = memoizeQuery(function getElementsByClassName(classNames) {
  return listOfElementsWithClassNames(classNames, this);
});
module.exports = {
  implementation: DocumentImpl
};