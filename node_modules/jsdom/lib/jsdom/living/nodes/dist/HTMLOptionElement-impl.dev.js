"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/strings"),
    stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree;

var _require3 = require("../helpers/traversal"),
    closest = _require3.closest;

var _require4 = require("../helpers/form-controls"),
    formOwner = _require4.formOwner;

var HTMLOptionElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLOptionElementImpl, _HTMLElementImpl);

  function HTMLOptionElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLOptionElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLOptionElementImpl).call(this, globalObject, args, privateData)); // whenever selectedness is set to true, make sure all
    // other options set selectedness to false

    _this._selectedness = false;
    _this._dirtyness = false;
    return _this;
  }

  _createClass(HTMLOptionElementImpl, [{
    key: "_removeOtherSelectedness",
    value: function _removeOtherSelectedness() {
      // Remove the selectedness flag from all other options in this select
      var select = this._selectNode;

      if (select && !select.hasAttributeNS(null, "multiple")) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = select.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var option = _step.value;

            if (option !== this) {
              option._selectedness = false;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: "_askForAReset",
    value: function _askForAReset() {
      var select = this._selectNode;

      if (select) {
        select._askedForAReset();
      }
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name) {
      if (!this._dirtyness && name === "selected") {
        this._selectedness = this.hasAttributeNS(null, "selected");

        if (this._selectedness) {
          this._removeOtherSelectedness();
        }

        this._askForAReset();
      }

      _get(_getPrototypeOf(HTMLOptionElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    }
  }, {
    key: "_getValue",
    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value
    value: function _getValue() {
      if (this.hasAttributeNS(null, "value")) {
        return this.getAttributeNS(null, "value");
      }

      return this.text;
    }
  }, {
    key: "_selectNode",
    get: function get() {
      var select = domSymbolTree.parent(this);

      if (!select) {
        return null;
      }

      if (select.nodeName.toUpperCase() !== "SELECT") {
        select = domSymbolTree.parent(select);

        if (!select || select.nodeName.toUpperCase() !== "SELECT") {
          return null;
        }
      }

      return select;
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "text",
    get: function get() {
      // TODO is not correctly excluding script and SVG script descendants
      return stripAndCollapseASCIIWhitespace(this.textContent);
    },
    set: function set(value) {
      this.textContent = value;
    }
  }, {
    key: "value",
    get: function get() {
      return this._getValue();
    },
    set: function set(value) {
      this.setAttributeNS(null, "value", value);
    }
  }, {
    key: "index",
    get: function get() {
      var select = closest(this, "select");

      if (select === null) {
        return 0;
      }

      return select.options.indexOf(this);
    }
  }, {
    key: "selected",
    get: function get() {
      return this._selectedness;
    },
    set: function set(s) {
      this._dirtyness = true;
      this._selectedness = Boolean(s);

      if (this._selectedness) {
        this._removeOtherSelectedness();
      }

      this._askForAReset();

      this._modified();
    }
  }, {
    key: "label",
    get: function get() {
      if (this.hasAttributeNS(null, "label")) {
        return this.getAttributeNS(null, "label");
      }

      return this.text;
    },
    set: function set(value) {
      this.setAttributeNS(null, "label", value);
    }
  }]);

  return HTMLOptionElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLOptionElementImpl
};