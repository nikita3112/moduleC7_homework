"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMTokenList = require("../generated/DOMTokenList");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var idlUtils = require("../generated/utils");

var _require = require("../helpers/stylesheets"),
    fetchStylesheet = _require.fetchStylesheet;

var _require2 = require("../helpers/document-base-url"),
    parseURLToResultingURLRecord = _require2.parseURLToResultingURLRecord;

var whatwgURL = require("whatwg-url"); // Important reading: "appropriate times to obtain the resource" in
// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet


var HTMLLinkElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLLinkElementImpl, _HTMLElementImpl);

  function HTMLLinkElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLLinkElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLLinkElementImpl).call(this, globalObject, args, privateData));
    _this.sheet = null;
    return _this;
  }

  _createClass(HTMLLinkElementImpl, [{
    key: "_attach",
    value: function _attach() {
      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), "_attach", this).call(this);

      maybeFetchAndProcess(this);
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name, value, oldValue) {
      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), "_attrModified", this).call(this, name, value, oldValue);

      if (name === "href") {
        // TODO crossorigin="" or type=""
        maybeFetchAndProcess(this);
      }

      if (name === "rel" && this._relList !== undefined) {
        this._relList.attrModified();
      }
    }
  }, {
    key: "relList",
    get: function get() {
      if (this._relList === undefined) {
        this._relList = DOMTokenList.createImpl(this._globalObject, [], {
          element: this,
          attributeLocalName: "rel",
          supportedTokens: new Set(["stylesheet"])
        });
      }

      return this._relList;
    }
  }, {
    key: "_accept",
    get: function get() {
      return "text/css,*/*;q=0.1";
    }
  }]);

  return HTMLLinkElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLLinkElementImpl
}; // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet

function maybeFetchAndProcess(el) {
  if (!isExternalResourceLink(el)) {
    return;
  } // Browsing-context connected


  if (!el.isConnected || !el._ownerDocument._defaultView) {
    return;
  }

  fetchAndProcess(el);
} // https://html.spec.whatwg.org/multipage/semantics.html#default-fetch-and-process-the-linked-resource
// TODO: refactor into general link-fetching like the spec.


function fetchAndProcess(el) {
  var href = el.getAttributeNS(null, "href");

  if (href === null || href === "") {
    return;
  }

  var url = parseURLToResultingURLRecord(href, el._ownerDocument);

  if (url === null) {
    return;
  } // TODO handle crossorigin="", nonce, integrity="", referrerpolicy=""


  var serialized = whatwgURL.serializeURL(url);
  fetchStylesheet(el, serialized);
}

function isExternalResourceLink(el) {
  // for our purposes, only stylesheets can be external resource links
  var wrapper = idlUtils.wrapperForImpl(el);

  if (!/(?:[ \t\n\r\f]|^)stylesheet(?:[ \t\n\r\f]|$)/i.test(wrapper.rel)) {
    // rel is a space-separated list of tokens, and the original rel types
    // are case-insensitive.
    return false;
  }

  return el.hasAttributeNS(null, "href");
}