"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../helpers/strings"),
    splitOnASCIIWhitespace = _require.splitOnASCIIWhitespace,
    splitOnCommas = _require.splitOnCommas;

var _require2 = require("../helpers/svg/basic-types"),
    reserializeCommaSeparatedTokens = _require2.reserializeCommaSeparatedTokens,
    reserializeSpaceSeparatedTokens = _require2.reserializeSpaceSeparatedTokens;

var SVGStringList = require("../generated/SVGStringList");

var SVGTestsImpl =
/*#__PURE__*/
function () {
  function SVGTestsImpl() {
    _classCallCheck(this, SVGTestsImpl);
  }

  _createClass(SVGTestsImpl, [{
    key: "requiredExtensions",
    get: function get() {
      return SVGStringList.createImpl(this._globalObject, [], {
        element: this,
        attribute: "requiredExtensions"
      });
    }
  }, {
    key: "systemLanguage",
    get: function get() {
      return SVGStringList.createImpl(this._globalObject, [], {
        element: this,
        attribute: "systemLanguage"
      });
    }
  }]);

  return SVGTestsImpl;
}();

SVGTestsImpl.attributeRegistry = new Map([// https://svgwg.org/svg2-draft/struct.html#RequiredExtensionsAttribute
["requiredExtensions", {
  getValue: splitOnASCIIWhitespace,
  serialize: reserializeSpaceSeparatedTokens,
  initialValue: undefined
}], // https://svgwg.org/svg2-draft/struct.html#SystemLanguageAttribute
["systemLanguage", {
  getValue: splitOnCommas,
  serialize: reserializeCommaSeparatedTokens,
  initialValue: undefined
}]]);
exports.implementation = SVGTestsImpl;