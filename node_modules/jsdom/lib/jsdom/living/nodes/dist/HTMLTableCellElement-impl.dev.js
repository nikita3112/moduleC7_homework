"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/strings"),
    asciiLowercase = _require.asciiLowercase,
    parseNonNegativeInteger = _require.parseNonNegativeInteger;

var _require2 = require("../helpers/traversal"),
    closest = _require2.closest;

function reflectedAttributeClampedToRange(attrValue, min, max) {
  var defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (attrValue === null) {
    return defaultValue;
  }

  var parsed = parseNonNegativeInteger(attrValue);

  if (parsed === null) {
    return defaultValue;
  }

  if (parsed < min) {
    return min;
  }

  if (parsed > max) {
    return max;
  }

  return parsed;
}

var HTMLTableCellElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLTableCellElementImpl, _HTMLElementImpl);

  function HTMLTableCellElementImpl() {
    _classCallCheck(this, HTMLTableCellElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableCellElementImpl).apply(this, arguments));
  }

  _createClass(HTMLTableCellElementImpl, [{
    key: "colSpan",
    get: function get() {
      return reflectedAttributeClampedToRange(this.getAttributeNS(null, "colspan"), 1, 1000, 1);
    },
    set: function set(V) {
      this.setAttributeNS(null, "colspan", String(V));
    }
  }, {
    key: "rowSpan",
    get: function get() {
      return reflectedAttributeClampedToRange(this.getAttributeNS(null, "rowspan"), 0, 65534, 1);
    },
    set: function set(V) {
      this.setAttributeNS(null, "rowspan", String(V));
    }
  }, {
    key: "cellIndex",
    get: function get() {
      var tr = closest(this, "tr");

      if (tr === null) {
        return -1;
      }

      return tr.cells.indexOf(this);
    }
  }, {
    key: "scope",
    get: function get() {
      var value = this.getAttributeNS(null, "scope");

      if (value === null) {
        return "";
      } // Enumerated attribute is matched ASCII-case-insensitively.


      value = asciiLowercase(value);

      if (value === "row" || value === "col" || value === "rowgroup" || value === "colgroup") {
        return value;
      }

      return "";
    },
    set: function set(V) {
      this.setAttributeNS(null, "scope", V);
    }
  }]);

  return HTMLTableCellElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLTableCellElementImpl
};