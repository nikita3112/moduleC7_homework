"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MIMEType = require("whatwg-mimetype");

var whatwgEncoding = require("whatwg-encoding");

var _require = require("whatwg-url"),
    parseURL = _require.parseURL,
    serializeURL = _require.serializeURL;

var sniffHTMLEncoding = require("html-encoding-sniffer");

var window = require("../../browser/Window");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require2 = require("../window/navigation"),
    evaluateJavaScriptURL = _require2.evaluateJavaScriptURL;

var _require3 = require("../../browser/parser"),
    parseIntoDocument = _require3.parseIntoDocument;

var _require4 = require("../helpers/document-base-url"),
    documentBaseURL = _require4.documentBaseURL;

var _require5 = require("../helpers/events"),
    fireAnEvent = _require5.fireAnEvent;

var _require6 = require("../attributes"),
    getAttributeValue = _require6.getAttributeValue;

var idlUtils = require("../generated/utils");

function fireLoadEvent(document, frame, attaching) {
  if (attaching) {
    fireAnEvent("load", frame);
    return;
  }

  var dummyPromise = Promise.resolve();

  function onLoad() {
    fireAnEvent("load", frame);
  }

  document._queue.push(dummyPromise, onLoad);
}

function fetchFrame(serializedURL, frame, document, contentDoc) {
  var resourceLoader = document._resourceLoader;
  var request;

  function onFrameLoaded(data) {
    var sniffOptions = {
      defaultEncoding: document._encoding
    };

    if (request.response) {
      var contentType = MIMEType.parse(request.response.headers["content-type"]) || new MIMEType("text/plain");
      sniffOptions.transportLayerEncodingLabel = contentType.parameters.get("charset");

      if (contentType) {
        if (contentType.isXML()) {
          contentDoc._parsingMode = "xml";
        }

        contentDoc.contentType = contentType.essence;
      }
    }

    var encoding = sniffHTMLEncoding(data, sniffOptions);
    contentDoc._encoding = encoding;
    var html = whatwgEncoding.decode(data, contentDoc._encoding);

    try {
      parseIntoDocument(html, contentDoc);
    } catch (error) {
      var DOMException = contentDoc._globalObject.DOMException;

      if (error.constructor.name === "DOMException" && error.code === DOMException.SYNTAX_ERR && contentDoc._parsingMode === "xml") {
        // As defined (https://html.spec.whatwg.org/#read-xml) parsing error in XML document may be reported inline by
        // mutating the document.
        var element = contentDoc.createElementNS("http://www.mozilla.org/newlayout/xml/parsererror.xml", "parsererror");
        element.textContent = error.message;

        while (contentDoc.childNodes.length > 0) {
          contentDoc.removeChild(contentDoc.lastChild);
        }

        contentDoc.appendChild(element);
      } else {
        throw error;
      }
    }

    contentDoc.close();
    return new Promise(function (resolve, reject) {
      contentDoc.addEventListener("load", resolve);
      contentDoc.addEventListener("error", reject);
    });
  }

  request = resourceLoader.fetch(serializedURL, {
    element: frame,
    onLoad: onFrameLoaded
  });
}

function canDispatchEvents(frame, attaching) {
  if (!attaching) {
    return false;
  }

  return Object.keys(frame._eventListeners).length === 0;
}

function loadFrame(frame, attaching) {
  if (frame._contentDocument) {
    if (frame._contentDocument._defaultView) {
      // close calls delete on its document.
      frame._contentDocument._defaultView.close();
    } else {
      delete frame._contentDocument;
    }
  }

  var parentDoc = frame._ownerDocument; // https://html.spec.whatwg.org/#process-the-iframe-attributes

  var url;
  var srcAttribute = getAttributeValue(frame, "src");

  if (srcAttribute === "") {
    url = parseURL("about:blank");
  } else {
    url = parseURL(srcAttribute, {
      baseURL: documentBaseURL(parentDoc) || undefined
    }) || parseURL("about:blank");
  }

  var serializedURL = serializeURL(url);
  var wnd = window.createWindow({
    parsingMode: "html",
    url: url.scheme === "javascript" || serializedURL === "about:blank" ? parentDoc.URL : serializedURL,
    resourceLoader: parentDoc._defaultView._resourceLoader,
    referrer: parentDoc.URL,
    cookieJar: parentDoc._cookieJar,
    pool: parentDoc._pool,
    encoding: parentDoc._encoding,
    runScripts: parentDoc._defaultView._runScripts,
    commonForOrigin: parentDoc._defaultView._commonForOrigin,
    pretendToBeVisual: parentDoc._defaultView._pretendToBeVisual
  });
  var contentDoc = frame._contentDocument = idlUtils.implForWrapper(wnd._document);
  var parent = parentDoc._defaultView;
  var contentWindow = contentDoc._defaultView;
  contentWindow._parent = parent;
  contentWindow._top = parent.top;
  contentWindow._frameElement = frame;
  contentWindow._virtualConsole = parent._virtualConsole;

  if (parentDoc._origin === contentDoc._origin) {
    contentWindow._currentOriginData.windowsInSameOrigin.push(contentWindow);
  }

  var noQueue = canDispatchEvents(frame, attaching); // Handle about:blank with a simulated load of an empty document.

  if (serializedURL === "about:blank") {
    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.
    parseIntoDocument("<html><head></head><body></body></html>", contentDoc);
    contentDoc.close(noQueue);

    if (noQueue) {
      fireLoadEvent(parentDoc, frame, noQueue);
    } else {
      contentDoc.addEventListener("load", function () {
        fireLoadEvent(parentDoc, frame);
      });
    }
  } else if (url.scheme === "javascript") {
    // Cannot be done inside the enqueued callback; the documentElement etc. need to be immediately available.
    parseIntoDocument("<html><head></head><body></body></html>", contentDoc);
    contentDoc.close(noQueue);
    var result = evaluateJavaScriptURL(contentWindow, url);

    if (typeof result === "string") {
      contentDoc.body.textContent = result;
    }

    if (noQueue) {
      fireLoadEvent(parentDoc, frame, noQueue);
    } else {
      contentDoc.addEventListener("load", function () {
        fireLoadEvent(parentDoc, frame);
      });
    }
  } else {
    fetchFrame(serializedURL, frame, parentDoc, contentDoc);
  }
}

function refreshAccessors(document) {
  var _defaultView = document._defaultView;

  if (!_defaultView) {
    return;
  }

  var frames = document.querySelectorAll("iframe,frame"); // delete accessors for all frames

  for (var i = 0; i < _defaultView._length; ++i) {
    delete _defaultView[i];
  }

  _defaultView._length = frames.length;
  Array.prototype.forEach.call(frames, function (frame, i) {
    Object.defineProperty(_defaultView, i, {
      configurable: true,
      enumerable: true,
      get: function get() {
        return frame.contentWindow;
      }
    });
  });
}

var HTMLFrameElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLFrameElementImpl, _HTMLElementImpl);

  function HTMLFrameElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLFrameElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLFrameElementImpl).call(this, globalObject, args, privateData));
    _this._contentDocument = null;
    return _this;
  }

  _createClass(HTMLFrameElementImpl, [{
    key: "_attrModified",
    value: function _attrModified(name, value, oldVal) {
      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), "_attrModified", this).call(this, name, value, oldVal);

      if (name === "src") {
        // iframe should never load in a document without a Window
        // (e.g. implementation.createHTMLDocument)
        if (this._attached && this._ownerDocument._defaultView) {
          loadFrame(this);
        }
      }
    }
  }, {
    key: "_detach",
    value: function _detach() {
      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), "_detach", this).call(this);

      if (this.contentWindow) {
        this.contentWindow.close();
      }

      refreshAccessors(this._ownerDocument);
    }
  }, {
    key: "_attach",
    value: function _attach() {
      _get(_getPrototypeOf(HTMLFrameElementImpl.prototype), "_attach", this).call(this);

      if (this._ownerDocument._defaultView) {
        loadFrame(this, true);
      }

      refreshAccessors(this._ownerDocument);
    }
  }, {
    key: "contentDocument",
    get: function get() {
      return this._contentDocument;
    }
  }, {
    key: "contentWindow",
    get: function get() {
      return this.contentDocument ? this.contentDocument._defaultView : null;
    }
  }]);

  return HTMLFrameElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLFrameElementImpl
};