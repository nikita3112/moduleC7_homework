"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var whatwgURL = require("whatwg-url");

var _require = require("../helpers/document-base-url"),
    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;

var _require2 = require("../helpers/strings"),
    asciiCaseInsensitiveMatch = _require2.asciiCaseInsensitiveMatch;

var _require3 = require("../window/navigation"),
    navigate = _require3.navigate;

exports.implementation =
/*#__PURE__*/
function () {
  function HTMLHyperlinkElementUtilsImpl() {
    _classCallCheck(this, HTMLHyperlinkElementUtilsImpl);
  }

  _createClass(HTMLHyperlinkElementUtilsImpl, [{
    key: "_htmlHyperlinkElementUtilsSetup",
    value: function _htmlHyperlinkElementUtilsSetup() {
      this.url = null;
    } // https://html.spec.whatwg.org/multipage/links.html#cannot-navigate

  }, {
    key: "_cannotNavigate",
    value: function _cannotNavigate() {
      // TODO: Correctly check if the document is fully active
      return this._localName !== "a" && !this.isConnected;
    } // https://html.spec.whatwg.org/multipage/semantics.html#get-an-element's-target

  }, {
    key: "_getAnElementsTarget",
    value: function _getAnElementsTarget() {
      if (this.hasAttributeNS(null, "target")) {
        return this.getAttributeNS(null, "target");
      }

      var baseEl = this._ownerDocument.querySelector("base[target]");

      if (baseEl) {
        return baseEl.getAttributeNS(null, "target");
      }

      return "";
    } // https://html.spec.whatwg.org/multipage/browsers.html#the-rules-for-choosing-a-browsing-context-given-a-browsing-context-name

  }, {
    key: "_chooseABrowsingContext",
    value: function _chooseABrowsingContext(name, current) {
      var chosen = null;

      if (name === "" || asciiCaseInsensitiveMatch(name, "_self")) {
        chosen = current;
      } else if (asciiCaseInsensitiveMatch(name, "_parent")) {
        chosen = current.parent;
      } else if (asciiCaseInsensitiveMatch(name, "_top")) {
        chosen = current.top;
      } else if (!asciiCaseInsensitiveMatch(name, "_blank")) {} // https://github.com/whatwg/html/issues/1440
      // TODO: Create new browsing context, handle noopener


      return chosen;
    } // https://html.spec.whatwg.org/multipage/links.html#following-hyperlinks-2

  }, {
    key: "_followAHyperlink",
    value: function _followAHyperlink() {
      if (this._cannotNavigate()) {
        return;
      }

      var source = this._ownerDocument._defaultView;
      var targetAttributeValue = "";

      if (this._localName === "a" || this._localName === "area") {
        targetAttributeValue = this._getAnElementsTarget();
      }

      var noopener = this.relList.contains("noreferrer") || this.relList.contains("noopener");

      var target = this._chooseABrowsingContext(targetAttributeValue, source, noopener);

      if (target === null) {
        return;
      }

      var url = parseURLToResultingURLRecord(this.href, this._ownerDocument);

      if (url === null) {
        return;
      } // TODO: Handle hyperlink suffix and referrerpolicy


      setTimeout(function () {
        navigate(target, url, {});
      }, 0);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.href;
    }
  }, {
    key: "href",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null) {
        var href = this.getAttributeNS(null, "href");
        return href === null ? "" : href;
      }

      return whatwgURL.serializeURL(url);
    },
    set: function set(v) {
      this.setAttributeNS(null, "href", v);
    }
  }, {
    key: "origin",
    get: function get() {
      reinitializeURL(this);

      if (this.url === null) {
        return "";
      }

      return whatwgURL.serializeURLOrigin(this.url);
    }
  }, {
    key: "protocol",
    get: function get() {
      reinitializeURL(this);

      if (this.url === null) {
        return ":";
      }

      return this.url.scheme + ":";
    },
    set: function set(v) {
      reinitializeURL(this);

      if (this.url === null) {
        return;
      }

      whatwgURL.basicURLParse(v + ":", {
        url: this.url,
        stateOverride: "scheme start"
      });
      updateHref(this);
    }
  }, {
    key: "username",
    get: function get() {
      reinitializeURL(this);

      if (this.url === null) {
        return "";
      }

      return this.url.username;
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file") {
        return;
      }

      whatwgURL.setTheUsername(url, v);
      updateHref(this);
    }
  }, {
    key: "password",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null) {
        return "";
      }

      return url.password;
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file") {
        return;
      }

      whatwgURL.setThePassword(url, v);
      updateHref(this);
    }
  }, {
    key: "host",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.host === null) {
        return "";
      }

      if (url.port === null) {
        return whatwgURL.serializeHost(url.host);
      }

      return whatwgURL.serializeHost(url.host) + ":" + whatwgURL.serializeInteger(url.port);
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.cannotBeABaseURL) {
        return;
      }

      whatwgURL.basicURLParse(v, {
        url: url,
        stateOverride: "host"
      });
      updateHref(this);
    }
  }, {
    key: "hostname",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.host === null) {
        return "";
      }

      return whatwgURL.serializeHost(url.host);
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.cannotBeABaseURL) {
        return;
      }

      whatwgURL.basicURLParse(v, {
        url: url,
        stateOverride: "hostname"
      });
      updateHref(this);
    }
  }, {
    key: "port",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.port === null) {
        return "";
      }

      return whatwgURL.serializeInteger(url.port);
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file") {
        return;
      }

      if (v === "") {
        url.port = null;
      } else {
        whatwgURL.basicURLParse(v, {
          url: url,
          stateOverride: "port"
        });
      }

      updateHref(this);
    }
  }, {
    key: "pathname",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null) {
        return "";
      }

      if (url.cannotBeABaseURL) {
        return url.path[0];
      }

      return "/" + url.path.join("/");
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.cannotBeABaseURL) {
        return;
      }

      url.path = [];
      whatwgURL.basicURLParse(v, {
        url: url,
        stateOverride: "path start"
      });
      updateHref(this);
    }
  }, {
    key: "search",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.query === null || url.query === "") {
        return "";
      }

      return "?" + url.query;
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null) {
        return;
      }

      if (v === "") {
        url.query = null;
      } else {
        var input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        whatwgURL.basicURLParse(input, {
          url: url,
          stateOverride: "query",
          encodingOverride: this._ownerDocument.charset
        });
      }

      updateHref(this);
    }
  }, {
    key: "hash",
    get: function get() {
      reinitializeURL(this);
      var url = this.url;

      if (url === null || url.fragment === null || url.fragment === "") {
        return "";
      }

      return "#" + url.fragment;
    },
    set: function set(v) {
      reinitializeURL(this);
      var url = this.url;

      if (url === null) {
        return;
      }

      if (v === "") {
        url.fragment = null;
      } else {
        var input = v[0] === "#" ? v.substring(1) : v;
        url.fragment = "";
        whatwgURL.basicURLParse(input, {
          url: url,
          stateOverride: "fragment"
        });
      }

      updateHref(this);
    }
  }]);

  return HTMLHyperlinkElementUtilsImpl;
}();

function reinitializeURL(hheu) {
  if (hheu.url !== null && hheu.url.scheme === "blob" && hheu.url.cannotBeABaseURL) {
    return;
  }

  setTheURL(hheu);
}

function setTheURL(hheu) {
  var href = hheu.getAttributeNS(null, "href");

  if (href === null) {
    hheu.url = null;
    return;
  }

  var parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);
  hheu.url = parsed === null ? null : parsed;
}

function updateHref(hheu) {
  hheu.setAttributeNS(null, "href", whatwgURL.serializeURL(hheu.url));
}