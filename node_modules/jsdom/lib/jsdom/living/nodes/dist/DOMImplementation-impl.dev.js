"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var validateNames = require("../helpers/validate-names");

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS,
    SVG_NS = _require.SVG_NS;

var _require2 = require("../helpers/create-element"),
    createElement = _require2.createElement,
    internalCreateElementNSSteps = _require2.internalCreateElementNSSteps;

var DocumentType = require("../generated/DocumentType");

var documents = require("../documents.js");

var DOMImplementationImpl =
/*#__PURE__*/
function () {
  function DOMImplementationImpl(globalObject, args, privateData) {
    _classCallCheck(this, DOMImplementationImpl);

    this._globalObject = globalObject;
    this._ownerDocument = privateData.ownerDocument;
  }

  _createClass(DOMImplementationImpl, [{
    key: "hasFeature",
    value: function hasFeature() {
      return true;
    }
  }, {
    key: "createDocumentType",
    value: function createDocumentType(qualifiedName, publicId, systemId) {
      validateNames.qname(this._globalObject, qualifiedName);
      return DocumentType.createImpl(this._globalObject, [], {
        ownerDocument: this._ownerDocument,
        name: qualifiedName,
        publicId: publicId,
        systemId: systemId
      });
    } // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument

  }, {
    key: "createDocument",
    value: function createDocument(namespace, qualifiedName, doctype) {
      var contentType = "application/xml";

      if (namespace === HTML_NS) {
        contentType = "application/xhtml+xml";
      } else if (namespace === SVG_NS) {
        contentType = "image/svg+xml";
      }

      var document = documents.createImpl(this._globalObject, {
        contentType: contentType,
        parsingMode: "xml",
        encoding: "UTF-8"
      });
      var element = null;

      if (qualifiedName !== "") {
        element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});
      }

      if (doctype !== null) {
        document.appendChild(doctype);
      }

      if (element !== null) {
        document.appendChild(element);
      }

      document._origin = this._ownerDocument._origin;
      return document;
    } // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument

  }, {
    key: "createHTMLDocument",
    value: function createHTMLDocument(title) {
      // Let doc be a new document that is an HTML document.
      // Set doc's content type to "text/html".
      var document = documents.createImpl(this._globalObject, {
        parsingMode: "html",
        encoding: "UTF-8"
      }); // Create a doctype, with "html" as its name and with its node document set
      // to doc. Append the newly created node to doc.

      var doctype = DocumentType.createImpl(this._globalObject, [], {
        ownerDocument: document,
        name: "html",
        publicId: "",
        systemId: ""
      });
      document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.

      var htmlElement = createElement(document, "html", HTML_NS);
      document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html
      // element created in the previous step.

      var headElement = createElement(document, "head", HTML_NS);
      htmlElement.appendChild(headElement); // If the title argument is not omitted:

      if (title !== undefined) {
        // Create a title element in the HTML namespace, and append it to the head
        // element created in the previous step.
        var titleElement = createElement(document, "title", HTML_NS);
        headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty
        // string), and append it to the title element created in the previous step.

        titleElement.appendChild(document.createTextNode(title));
      } // Create a body element in the HTML namespace, and append it to the html
      // element created in the earlier step.


      var bodyElement = createElement(document, "body", HTML_NS);
      htmlElement.appendChild(bodyElement); // doc's origin is an alias to the origin of the context object's associated
      // document, and doc's effective script origin is an alias to the effective
      // script origin of the context object's associated document.

      return document;
    }
  }]);

  return DOMImplementationImpl;
}();

module.exports = {
  implementation: DOMImplementationImpl
};