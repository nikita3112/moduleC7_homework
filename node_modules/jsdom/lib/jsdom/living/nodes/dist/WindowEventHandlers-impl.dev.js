"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../helpers/create-event-accessor"),
    createEventAccessor = _require.createEventAccessor;

var events = new Set([// WindowEventHandlers
"afterprint", "beforeprint", "beforeunload", "hashchange", "languagechange", "message", "messageerror", "offline", "online", "pagehide", "pageshow", "popstate", "rejectionhandled", "storage", "unhandledrejection", "unload", // inherited and overridden
"blur", "error", "focus", "load", "resize", "scroll"]); // This class builds on GlobalEventHandlers, which must be mixed in first.

var WindowEventHandlersImpl =
/*#__PURE__*/
function () {
  function WindowEventHandlersImpl() {
    _classCallCheck(this, WindowEventHandlersImpl);
  }

  _createClass(WindowEventHandlersImpl, [{
    key: "_proxyWindowEventsToWindow",
    value: function _proxyWindowEventsToWindow() {
      var _this = this;

      // We're a <body> or <frameset>, so we need to proxy these specific events to the Window (if it exists)
      this._getEventHandlerTarget = function (event) {
        if (events.has(event)) {
          return _this.ownerDocument.defaultView || null;
        }

        return _this;
      };
    }
  }]);

  return WindowEventHandlersImpl;
}();

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var event = _step.value;
    createEventAccessor(WindowEventHandlersImpl.prototype, event);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

module.exports = {
  implementation: WindowEventHandlersImpl
};