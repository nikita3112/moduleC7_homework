"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../generated/utils.js");

var _require = require("../attributes"),
    setAttributeValue = _require.setAttributeValue,
    removeAttributeByName = _require.removeAttributeByName;

var validateName = require("../helpers/validate-names").name;

var DOMException = require("domexception/webidl2js-wrapper");

var dataAttrRe = /^data-([^A-Z]*)$/;

function attrCamelCase(name) {
  return name.replace(/-([a-z])/g, function (match, alpha) {
    return alpha.toUpperCase();
  });
}

function attrSnakeCase(name) {
  return name.replace(/[A-Z]/g, function (match) {
    return "-".concat(match.toLowerCase());
  });
}

exports.implementation =
/*#__PURE__*/
function () {
  function DOMStringMapImpl(globalObject, args, privateData) {
    _classCallCheck(this, DOMStringMapImpl);

    this._globalObject = globalObject;
    this._element = privateData.element;
  }

  _createClass(DOMStringMapImpl, [{
    key: idlUtils.namedGet,
    value: function value(name) {
      var attributes = this._element.attributes;

      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes.item(i);
        var matches = dataAttrRe.exec(attr.localName);

        if (matches && attrCamelCase(matches[1]) === name) {
          return attr.value;
        }
      }

      return undefined;
    }
  }, {
    key: idlUtils.namedSetNew,
    value: function value(name, _value) {
      if (/-[a-z]/.test(name)) {
        throw DOMException.create(this._globalObject, ["'".concat(name, "' is not a valid property name"), "SyntaxError"]);
      }

      name = "data-".concat(attrSnakeCase(name));
      validateName(this._globalObject, name);
      setAttributeValue(this._element, name, _value);
    }
  }, {
    key: idlUtils.namedSetExisting,
    value: function value(name, _value2) {
      this[idlUtils.namedSetNew](name, _value2);
    }
  }, {
    key: idlUtils.namedDelete,
    value: function value(name) {
      name = "data-".concat(attrSnakeCase(name));
      removeAttributeByName(this._element, name);
    }
  }, {
    key: idlUtils.supportedPropertyNames,
    get: function get() {
      var result = new Set();
      var attributes = this._element.attributes;

      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes.item(i);
        var matches = dataAttrRe.exec(attr.localName);

        if (matches) {
          result.add(attrCamelCase(matches[1]));
        }
      }

      return result;
    }
  }]);

  return DOMStringMapImpl;
}();