"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("../../browser/parser"),
    parseFragment = _require.parseFragment;

var _require2 = require("../domparsing/serialization.js"),
    fragmentSerialization = _require2.fragmentSerialization;

var _require3 = require("../helpers/node"),
    nodeRoot = _require3.nodeRoot;

var _require4 = require("../../utils"),
    mixin = _require4.mixin;

var DocumentFragment = require("./DocumentFragment-impl").implementation;

var DocumentOrShadowRootImpl = require("./DocumentOrShadowRoot-impl").implementation;

var ShadowRootImpl =
/*#__PURE__*/
function (_DocumentFragment) {
  _inherits(ShadowRootImpl, _DocumentFragment);

  function ShadowRootImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, ShadowRootImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ShadowRootImpl).call(this, globalObject, args, privateData));
    var mode = privateData.mode;
    _this._mode = mode;
    return _this;
  }

  _createClass(ShadowRootImpl, [{
    key: "_getTheParent",
    value: function _getTheParent(event) {
      if (!event.composed && this === nodeRoot(event._path[0].item)) {
        return null;
      }

      return this._host;
    }
  }, {
    key: "mode",
    get: function get() {
      return this._mode;
    }
  }, {
    key: "host",
    get: function get() {
      return this._host;
    } // https://w3c.github.io/DOM-Parsing/#dfn-innerhtml

  }, {
    key: "innerHTML",
    get: function get() {
      return fragmentSerialization(this, {
        requireWellFormed: true,
        globalObject: this._globalObject
      });
    },
    set: function set(markup) {
      var fragment = parseFragment(markup, this._host);

      this._replaceAll(fragment);
    }
  }]);

  return ShadowRootImpl;
}(DocumentFragment);

mixin(ShadowRootImpl.prototype, DocumentOrShadowRootImpl.prototype);
module.exports = {
  implementation: ShadowRootImpl
};