"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var idlUtils = require("../generated/utils.js");

var ValidityState = require("../generated/ValidityState");

var DefaultConstraintValidationImpl = require("../constraint-validation/DefaultConstraintValidation-impl").implementation;

var _require = require("../../utils"),
    mixin = _require.mixin;

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var NODE_TYPE = require("../node-type");

var HTMLCollection = require("../generated/HTMLCollection");

var HTMLOptionsCollection = require("../generated/HTMLOptionsCollection");

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree;

var _require3 = require("../helpers/form-controls"),
    getLabelsForLabelable = _require3.getLabelsForLabelable,
    formOwner = _require3.formOwner,
    isDisabled = _require3.isDisabled;

var _require4 = require("../helpers/strings"),
    parseNonNegativeInteger = _require4.parseNonNegativeInteger;

var HTMLSelectElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLSelectElementImpl, _HTMLElementImpl);

  function HTMLSelectElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLSelectElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLSelectElementImpl).call(this, globalObject, args, privateData));
    _this._options = HTMLOptionsCollection.createImpl(_this._globalObject, [], {
      element: _assertThisInitialized(_this),
      query: function query() {
        // Customized domSymbolTree.treeToArray() clone.
        var array = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = domSymbolTree.childrenIterator(_assertThisInitialized(_this))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var child = _step.value;

            if (child._localName === "option") {
              array.push(child);
            } else if (child._localName === "optgroup") {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = domSymbolTree.childrenIterator(child)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var childOfGroup = _step2.value;

                  if (childOfGroup._localName === "option") {
                    array.push(childOfGroup);
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return array;
      }
    });
    _this._selectedOptions = null; // lazy

    _this._customValidityErrorMessage = "";
    _this._labels = null;
    return _this;
  }

  _createClass(HTMLSelectElementImpl, [{
    key: "_formReset",
    value: function _formReset() {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var option = _step3.value;
          option._selectedness = option.hasAttributeNS(null, "selected");
          option._dirtyness = false;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this._askedForAReset();
    }
  }, {
    key: "_askedForAReset",
    value: function _askedForAReset() {
      if (this.hasAttributeNS(null, "multiple")) {
        return;
      }

      var selected = this.options.filter(function (opt) {
        return opt._selectedness;
      });
      var size = this._displaySize;

      if (size === 1 && !selected.length) {
        // select the first option that is not disabled
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.options[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var option = _step4.value;
            var disabled = option.hasAttributeNS(null, "disabled");
            var parentNode = domSymbolTree.parent(option);

            if (parentNode && parentNode.nodeName.toUpperCase() === "OPTGROUP" && parentNode.hasAttributeNS(null, "disabled")) {
              disabled = true;
            }

            if (!disabled) {
              // (do not set dirty)
              option._selectedness = true;
              break;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      } else if (selected.length >= 2) {
        // select the last selected option
        selected.forEach(function (option, index) {
          option._selectedness = index === selected.length - 1;
        });
      }
    }
  }, {
    key: "_descendantAdded",
    value: function _descendantAdded(parent, child) {
      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
        this._askedForAReset();
      }

      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), "_descendantAdded", this).apply(this, arguments);
    }
  }, {
    key: "_descendantRemoved",
    value: function _descendantRemoved(parent, child) {
      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
        this._askedForAReset();
      }

      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), "_descendantRemoved", this).apply(this, arguments);
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name) {
      if (name === "multiple" || name === "size") {
        this._askedForAReset();
      }

      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    }
  }, {
    key: "item",
    value: function item(index) {
      return this.options.item(index);
    }
  }, {
    key: "namedItem",
    value: function namedItem(name) {
      return this.options.namedItem(name);
    }
  }, {
    key: idlUtils.indexedSetNew,
    value: function value(index, _value) {
      return this.options[idlUtils.indexedSetNew](index, _value);
    }
  }, {
    key: idlUtils.indexedSetExisting,
    value: function value(index, _value2) {
      return this.options[idlUtils.indexedSetExisting](index, _value2);
    }
  }, {
    key: "add",
    value: function add(opt, before) {
      this.options.add(opt, before);
    }
  }, {
    key: "remove",
    value: function remove(index) {
      if (arguments.length > 0) {
        index = conversions["long"](index, {
          context: "Failed to execute 'remove' on 'HTMLSelectElement': parameter 1"
        });
        this.options.remove(index);
      } else {
        _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), "remove", this).call(this);
      }
    }
  }, {
    key: "_barredFromConstraintValidationSpecialization",
    value: function _barredFromConstraintValidationSpecialization() {
      return this.hasAttributeNS(null, "readonly");
    } // Constraint validation: If the element has its required attribute specified,
    // and either none of the option elements in the select element's list of options
    // have their selectedness set to true, or the only option element in the select
    // element's list of options with its selectedness set to true is the placeholder
    // label option, then the element is suffering from being missing.

  }, {
    key: "_displaySize",
    get: function get() {
      if (this.hasAttributeNS(null, "size")) {
        var size = parseNonNegativeInteger(this.getAttributeNS(null, "size"));

        if (size !== null) {
          return size;
        }
      }

      return this.hasAttributeNS(null, "multiple") ? 4 : 1;
    }
  }, {
    key: "_mutable",
    get: function get() {
      return !isDisabled(this);
    }
  }, {
    key: "options",
    get: function get() {
      return this._options;
    }
  }, {
    key: "selectedOptions",
    get: function get() {
      var _this2 = this;

      return HTMLCollection.createImpl(this._globalObject, [], {
        element: this,
        query: function query() {
          return domSymbolTree.treeToArray(_this2, {
            filter: function filter(node) {
              return node._localName === "option" && node._selectedness === true;
            }
          });
        }
      });
    }
  }, {
    key: "selectedIndex",
    get: function get() {
      for (var i = 0; i < this.options.length; i++) {
        if (this.options.item(i)._selectedness) {
          return i;
        }
      }

      return -1;
    },
    set: function set(index) {
      for (var i = 0; i < this.options.length; i++) {
        this.options.item(i)._selectedness = false;
      }

      var selectedOption = this.options.item(index);

      if (selectedOption) {
        selectedOption._selectedness = true;
        selectedOption._dirtyness = true;
      }
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "value",
    get: function get() {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.options[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var option = _step5.value;

          if (option._selectedness) {
            return option.value;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return "";
    },
    set: function set(val) {
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this.options[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var option = _step6.value;

          if (option.value === val) {
            option._selectedness = true;
            option._dirtyness = true;
          } else {
            option._selectedness = false;
          }

          option._modified();
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "type",
    get: function get() {
      return this.hasAttributeNS(null, "multiple") ? "select-multiple" : "select-one";
    }
  }, {
    key: idlUtils.supportedPropertyIndices,
    get: function get() {
      return this.options[idlUtils.supportedPropertyIndices];
    }
  }, {
    key: "length",
    get: function get() {
      return this.options.length;
    },
    set: function set(value) {
      this.options.length = value;
    }
  }, {
    key: "validity",
    get: function get() {
      var _this3 = this;

      if (!this._validity) {
        var state = {
          valueMissing: function valueMissing() {
            if (!_this3.hasAttributeNS(null, "required")) {
              return false;
            }

            var selectedOptionIndex = _this3.selectedIndex;
            return selectedOptionIndex < 0 || selectedOptionIndex === 0 && _this3._hasPlaceholderOption;
          }
        };
        this._validity = ValidityState.createImpl(this._globalObject, [], {
          element: this,
          state: state
        });
      }

      return this._validity;
    } // If a select element has a required attribute specified, does not have a multiple attribute
    // specified, and has a display size of 1; and if the value of the first option element in the
    // select element's list of options (if any) is the empty string, and that option element's parent
    // node is the select element(and not an optgroup element), then that option is the select
    // element's placeholder label option.
    // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option

  }, {
    key: "_hasPlaceholderOption",
    get: function get() {
      return this.hasAttributeNS(null, "required") && !this.hasAttributeNS(null, "multiple") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === "" && this.options.item(0).parentNode._localName !== "optgroup";
    }
  }]);

  return HTMLSelectElementImpl;
}(HTMLElementImpl);

mixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
module.exports = {
  implementation: HTMLSelectElementImpl
};