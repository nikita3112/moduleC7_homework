"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NODE_TYPE = require("../node-type");

var _require = require("../helpers/node"),
    nodeRoot = _require.nodeRoot;

var _require2 = require("../helpers/shadow-dom"),
    retarget = _require2.retarget;

var DocumentOrShadowRootImpl =
/*#__PURE__*/
function () {
  function DocumentOrShadowRootImpl() {
    _classCallCheck(this, DocumentOrShadowRootImpl);
  }

  _createClass(DocumentOrShadowRootImpl, [{
    key: "activeElement",
    get: function get() {
      var candidate = this._ownerDocument._lastFocusedElement || this._ownerDocument.body;

      if (!candidate) {
        return null;
      }

      candidate = retarget(candidate, this);

      if (nodeRoot(candidate) !== this) {
        return null;
      }

      if (candidate.nodeType !== NODE_TYPE.DOCUMENT_NODE) {
        return candidate;
      }

      if (candidate.body !== null) {
        return candidate.body;
      }

      return candidate.documentElement;
    }
  }]);

  return DocumentOrShadowRootImpl;
}();

module.exports = {
  implementation: DocumentOrShadowRootImpl
};