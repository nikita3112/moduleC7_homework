"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var notImplemented = require("../../browser/not-implemented");

var idlUtils = require("../generated/utils");

var _require = require("../../utils"),
    Canvas = _require.Canvas;

var HTMLCanvasElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLCanvasElementImpl, _HTMLElementImpl);

  function HTMLCanvasElementImpl() {
    _classCallCheck(this, HTMLCanvasElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLCanvasElementImpl).apply(this, arguments));
  }

  _createClass(HTMLCanvasElementImpl, [{
    key: "_attrModified",
    value: function _attrModified(name, value) {
      if (this._canvas && (name === "width" || name === "height")) {
        this._canvas[name] = parseInt(value);
      }

      _get(_getPrototypeOf(HTMLCanvasElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    }
  }, {
    key: "_getCanvas",
    value: function _getCanvas() {
      if (Canvas && !this._canvas) {
        this._canvas = Canvas.createCanvas(this.width, this.height);
      }

      return this._canvas;
    }
  }, {
    key: "getContext",
    value: function getContext(contextId) {
      var canvas = this._getCanvas();

      if (canvas) {
        if (!this._context) {
          this._context = canvas.getContext(contextId) || null;

          if (this._context) {
            // Override the native canvas reference with our wrapper. This is the
            // reason why we need to locally cache _context, since each call to
            // canvas.getContext(contextId) would replace this reference again.
            // Perhaps in the longer term, a better solution would be to create a
            // full wrapper for the Context object as well.
            this._context.canvas = idlUtils.wrapperForImpl(this);
            wrapNodeCanvasMethod(this._context, "createPattern");
            wrapNodeCanvasMethod(this._context, "drawImage");
          }
        }

        return this._context;
      }

      notImplemented("HTMLCanvasElement.prototype.getContext (without installing the canvas npm package)", this._ownerDocument._defaultView);
      return null;
    }
  }, {
    key: "toDataURL",
    value: function toDataURL() {
      var canvas = this._getCanvas();

      if (canvas) {
        return canvas.toDataURL.apply(this._canvas, arguments);
      }

      notImplemented("HTMLCanvasElement.prototype.toDataURL (without installing the canvas npm package)", this._ownerDocument._defaultView);
      return null;
    }
  }, {
    key: "toBlob",
    value: function toBlob(callback, type, qualityArgument) {
      var window = this._ownerDocument._defaultView;

      var canvas = this._getCanvas();

      if (canvas) {
        var options = {};

        switch (type) {
          case "image/jpg":
          case "image/jpeg":
            type = "image/jpeg";
            options.quality = qualityArgument;
            break;

          default:
            type = "image/png";
        }

        canvas.toBuffer(function (err, buff) {
          if (err) {
            throw err;
          }

          callback(new window.Blob([buff], {
            type: type
          }));
        }, type, options);
      } else {
        notImplemented("HTMLCanvasElement.prototype.toBlob (without installing the canvas npm package)", window);
      }
    }
  }, {
    key: "width",
    get: function get() {
      var parsed = parseInt(this.getAttributeNS(null, "width"));
      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 300 : parsed;
    },
    set: function set(v) {
      v = v > 2147483647 ? 300 : v;
      this.setAttributeNS(null, "width", String(v));
    }
  }, {
    key: "height",
    get: function get() {
      var parsed = parseInt(this.getAttributeNS(null, "height"));
      return isNaN(parsed) || parsed < 0 || parsed > 2147483647 ? 150 : parsed;
    },
    set: function set(v) {
      v = v > 2147483647 ? 150 : v;
      this.setAttributeNS(null, "height", String(v));
    }
  }]);

  return HTMLCanvasElementImpl;
}(HTMLElementImpl); // We need to wrap the methods that receive an image or canvas object
// (luckily, always as the first argument), so that these objects can be
// unwrapped an the expected types passed.


function wrapNodeCanvasMethod(ctx, name) {
  var prev = ctx[name];

  ctx[name] = function (image) {
    var impl = idlUtils.implForWrapper(image);

    if (impl) {
      if (impl instanceof HTMLCanvasElementImpl && !impl._canvas) {
        impl._getCanvas();
      }

      arguments[0] = impl._image || impl._canvas;
    }

    return prev.apply(ctx, arguments);
  };
}

module.exports = {
  implementation: HTMLCanvasElementImpl
};