"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/stylesheets"),
    removeStylesheet = _require.removeStylesheet,
    createStylesheet = _require.createStylesheet;

var _require2 = require("../helpers/document-base-url"),
    documentBaseURL = _require2.documentBaseURL;

var _require3 = require("../helpers/text"),
    childTextContent = _require3.childTextContent;

var _require4 = require("../helpers/strings"),
    asciiCaseInsensitiveMatch = _require4.asciiCaseInsensitiveMatch;

var HTMLStyleElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLStyleElementImpl, _HTMLElementImpl);

  function HTMLStyleElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLStyleElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLStyleElementImpl).call(this, globalObject, args, privateData));
    _this.sheet = null;
    _this._isOnStackOfOpenElements = false;
    return _this;
  }

  _createClass(HTMLStyleElementImpl, [{
    key: "_attach",
    value: function _attach() {
      _get(_getPrototypeOf(HTMLStyleElementImpl.prototype), "_attach", this).call(this);

      if (!this._isOnStackOfOpenElements) {
        this._updateAStyleBlock();
      }
    }
  }, {
    key: "_detach",
    value: function _detach() {
      _get(_getPrototypeOf(HTMLStyleElementImpl.prototype), "_detach", this).call(this);

      if (!this._isOnStackOfOpenElements) {
        this._updateAStyleBlock();
      }
    }
  }, {
    key: "_childTextContentChangeSteps",
    value: function _childTextContentChangeSteps() {
      _get(_getPrototypeOf(HTMLStyleElementImpl.prototype), "_childTextContentChangeSteps", this).call(this); // This guard is not required by the spec, but should be unobservable (since you can't run script during the middle
      // of parsing a <style> element) and saves a bunch of unnecessary work.


      if (!this._isOnStackOfOpenElements) {
        this._updateAStyleBlock();
      }
    }
  }, {
    key: "_poppedOffStackOfOpenElements",
    value: function _poppedOffStackOfOpenElements() {
      this._isOnStackOfOpenElements = false;

      this._updateAStyleBlock();
    }
  }, {
    key: "_pushedOnStackOfOpenElements",
    value: function _pushedOnStackOfOpenElements() {
      this._isOnStackOfOpenElements = true;
    }
  }, {
    key: "_updateAStyleBlock",
    value: function _updateAStyleBlock() {
      if (this.sheet) {
        removeStylesheet(this.sheet, this);
      } // Browsing-context connected, per https://github.com/whatwg/html/issues/4547


      if (!this.isConnected || !this._ownerDocument._defaultView) {
        return;
      }

      var type = this.getAttributeNS(null, "type");

      if (type !== null && type !== "" && !asciiCaseInsensitiveMatch(type, "text/css")) {
        return;
      } // Not implemented: CSP


      var content = childTextContent(this); // Not implemented: a bunch of other state, e.g. title/media attributes

      createStylesheet(content, this, documentBaseURL(this._ownerDocument));
    }
  }]);

  return HTMLStyleElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLStyleElementImpl
};