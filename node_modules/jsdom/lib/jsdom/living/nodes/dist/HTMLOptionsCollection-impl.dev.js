"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var idlUtils = require("../generated/utils.js");

var DOMException = require("domexception/webidl2js-wrapper");

var _require = require("../node-document-position"),
    DOCUMENT_POSITION_CONTAINS = _require.DOCUMENT_POSITION_CONTAINS,
    DOCUMENT_POSITION_CONTAINED_BY = _require.DOCUMENT_POSITION_CONTAINED_BY;

var Element = require("../generated/Element");

var Node = require("../generated/Node");

var HTMLCollectionImpl = require("./HTMLCollection-impl").implementation;

exports.implementation =
/*#__PURE__*/
function (_HTMLCollectionImpl) {
  _inherits(HTMLOptionsCollectionImpl, _HTMLCollectionImpl);

  function HTMLOptionsCollectionImpl() {
    _classCallCheck(this, HTMLOptionsCollectionImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLOptionsCollectionImpl).apply(this, arguments));
  }

  _createClass(HTMLOptionsCollectionImpl, [{
    key: idlUtils.indexedSetNew,
    value: function value(index, _value) {
      if (_value === null) {
        this.remove(index);
        return;
      }

      this._update();

      var length = this._list.length;
      var n = index - length;

      if (n > 0) {
        var doc = this._element._ownerDocument;
        var frag = doc.createDocumentFragment(); // Spec says n - 1, but n seems to be the right number here.

        for (var i = 0; i < n; i++) {
          var el = doc.createElement("option");
          frag.appendChild(el);
        }

        this._element._append(frag);
      }

      if (n >= 0) {
        this._element._append(_value);
      } else {
        this._element._replace(_value, this._list[index]);
      }
    }
  }, {
    key: idlUtils.indexedSetExisting,
    value: function value(index, _value2) {
      return this[idlUtils.indexedSetNew](index, _value2);
    }
  }, {
    key: "add",
    value: function add(element, before) {
      if (this._element.compareDocumentPosition(element) & DOCUMENT_POSITION_CONTAINS) {
        throw DOMException.create(this._globalObject, ["The operation would yield an incorrect node tree.", "HierarchyRequestError"]);
      }

      if (Element.isImpl(before) && !(this._element.compareDocumentPosition(before) & DOCUMENT_POSITION_CONTAINED_BY)) {
        throw DOMException.create(this._globalObject, ["The object can not be found here.", "NotFoundError"]);
      }

      if (element === before) {
        return;
      }

      var reference = null;

      if (Node.isImpl(before)) {
        reference = before;
      } else if (typeof before === "number") {
        this._update();

        reference = this._list[before] || null;
      }

      var parent = reference !== null ? reference.parentNode : this._element;

      parent._preInsert(element, reference);
    }
  }, {
    key: "remove",
    value: function remove(index) {
      this._update();

      if (this._list.length === 0) {
        return;
      }

      if (index < 0 || index >= this._list.length) {
        return;
      }

      var element = this._list[index];

      element.parentNode._remove(element);
    }
  }, {
    key: "length",
    // inherits supported property indices
    get: function get() {
      this._update();

      return this._list.length;
    },
    set: function set(value) {
      this._update();

      if (value > this._list.length) {
        var doc = this._element._ownerDocument;

        for (var i = this._list.length; i < value; i++) {
          var el = doc.createElement("option");

          this._element.appendChild(el);
        }
      } else if (value < this._list.length) {
        for (var _i = this._list.length - 1; _i >= value; _i--) {
          var _el = this._list[_i];

          this._element.removeChild(_el);
        }
      }
    }
  }, {
    key: idlUtils.supportedPropertyNames,
    get: function get() {
      this._update();

      var result = new Set();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var element = _step.value;
          result.add(element.getAttributeNS(null, "id"));
          result.add(element.getAttributeNS(null, "name"));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }, {
    key: "selectedIndex",
    get: function get() {
      return this._element.selectedIndex;
    },
    set: function set(value) {
      this._element.selectedIndex = value;
    }
  }]);

  return HTMLOptionsCollectionImpl;
}(HTMLCollectionImpl);