"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../generated/utils");

var NodeList = require("../generated/NodeList");

var HTMLCollection = require("../generated/HTMLCollection");

var _require = require("../helpers/selectors"),
    addNwsapi = _require.addNwsapi;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree;

var NODE_TYPE = require("../node-type");

var _require3 = require("../node"),
    convertNodesIntoNode = _require3.convertNodesIntoNode;

var ParentNodeImpl =
/*#__PURE__*/
function () {
  function ParentNodeImpl() {
    _classCallCheck(this, ParentNodeImpl);
  }

  _createClass(ParentNodeImpl, [{
    key: "prepend",
    value: function prepend() {
      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {
        nodes[_key] = arguments[_key];
      }

      this._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), this.firstChild);
    }
  }, {
    key: "append",
    value: function append() {
      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        nodes[_key2] = arguments[_key2];
      }

      this._append(convertNodesIntoNode(this._ownerDocument, nodes));
    }
  }, {
    key: "querySelector",
    value: function querySelector(selectors) {
      if (shouldAlwaysSelectNothing(this)) {
        return null;
      }

      var matcher = addNwsapi(this);
      return idlUtils.implForWrapper(matcher.first(selectors, idlUtils.wrapperForImpl(this)));
    } // Warning for internal users: this returns a NodeList containing IDL wrappers instead of impls

  }, {
    key: "querySelectorAll",
    value: function querySelectorAll(selectors) {
      if (shouldAlwaysSelectNothing(this)) {
        return NodeList.create(this._globalObject, [], {
          nodes: []
        });
      }

      var matcher = addNwsapi(this);
      var list = matcher.select(selectors, idlUtils.wrapperForImpl(this));
      return NodeList.create(this._globalObject, [], {
        nodes: list.map(function (n) {
          return idlUtils.tryImplForWrapper(n);
        })
      });
    }
  }, {
    key: "children",
    get: function get() {
      var _this = this;

      if (!this._childrenList) {
        this._childrenList = HTMLCollection.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            return domSymbolTree.childrenToArray(_this, {
              filter: function filter(node) {
                return node.nodeType === NODE_TYPE.ELEMENT_NODE;
              }
            });
          }
        });
      } else {
        this._childrenList._update();
      }

      return this._childrenList;
    }
  }, {
    key: "firstElementChild",
    get: function get() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;

          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
            return child;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: "lastElementChild",
    get: function get() {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = domSymbolTree.childrenIterator(this, {
          reverse: true
        })[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var child = _step2.value;

          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {
            return child;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return null;
    }
  }, {
    key: "childElementCount",
    get: function get() {
      return this.children.length;
    }
  }]);

  return ParentNodeImpl;
}();

function shouldAlwaysSelectNothing(elImpl) {
  // This is true during initialization.
  return elImpl === elImpl._ownerDocument && !elImpl.documentElement;
}

module.exports = {
  implementation: ParentNodeImpl
};