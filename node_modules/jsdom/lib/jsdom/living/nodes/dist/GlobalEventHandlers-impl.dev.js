"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../helpers/create-event-accessor"),
    appendHandler = _require.appendHandler,
    createEventAccessor = _require.createEventAccessor;

var events = new Set(["abort", "autocomplete", "autocompleteerror", "blur", "cancel", "canplay", "canplaythrough", "change", "click", "close", "contextmenu", "cuechange", "dblclick", "drag", "dragend", "dragenter", "dragexit", "dragleave", "dragover", "dragstart", "drop", "durationchange", "emptied", "ended", "error", "focus", "input", "invalid", "keydown", "keypress", "keyup", "load", "loadeddata", "loadedmetadata", "loadstart", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "wheel", "pause", "play", "playing", "progress", "ratechange", "reset", "resize", "scroll", "securitypolicyviolation", "seeked", "seeking", "select", "sort", "stalled", "submit", "suspend", "timeupdate", "toggle", "volumechange", "waiting"]);

var GlobalEventHandlersImpl =
/*#__PURE__*/
function () {
  function GlobalEventHandlersImpl() {
    _classCallCheck(this, GlobalEventHandlersImpl);
  }

  _createClass(GlobalEventHandlersImpl, [{
    key: "_initGlobalEvents",
    value: function _initGlobalEvents() {
      this._registeredHandlers = new Set();
      this._eventHandlers = Object.create(null);
    }
  }, {
    key: "_getEventHandlerTarget",
    value: function _getEventHandlerTarget() {
      return this;
    }
  }, {
    key: "_getEventHandlerFor",
    value: function _getEventHandlerFor(event) {
      var target = this._getEventHandlerTarget(event);

      if (!target) {
        return null;
      }

      return target._eventHandlers[event];
    }
  }, {
    key: "_setEventHandlerFor",
    value: function _setEventHandlerFor(event, handler) {
      var target = this._getEventHandlerTarget(event);

      if (!target) {
        return;
      }

      if (!target._registeredHandlers.has(event) && handler !== null) {
        target._registeredHandlers.add(event);

        appendHandler(target, event);
      }

      target._eventHandlers[event] = handler;
    }
  }, {
    key: "_globalEventChanged",
    value: function _globalEventChanged(event) {
      var propName = "on" + event;

      if (!(propName in this)) {
        return;
      } // Only translate attribute changes into properties when runScripts: "dangerously" is set.
      // Documents without a browsing context (i.e. without a _defaultView) never run scripts.


      var runScripts = "_runScripts" in this ? this._runScripts : (this._ownerDocument._defaultView || {})._runScripts;

      if (runScripts !== "dangerously") {
        return;
      }

      var val = this.getAttributeNS(null, propName);
      var handler = val === null ? null : {
        body: val
      };

      this._setEventHandlerFor(event, handler);
    }
  }]);

  return GlobalEventHandlersImpl;
}();

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var event = _step.value;
    createEventAccessor(GlobalEventHandlersImpl.prototype, event);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

module.exports = {
  implementation: GlobalEventHandlersImpl
};