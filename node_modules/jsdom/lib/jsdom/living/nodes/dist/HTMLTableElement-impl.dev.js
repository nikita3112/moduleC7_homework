"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMException = require("domexception/webidl2js-wrapper");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree;

var _require3 = require("../helpers/traversal"),
    firstChildWithLocalName = _require3.firstChildWithLocalName,
    childrenByLocalName = _require3.childrenByLocalName;

var HTMLCollection = require("../generated/HTMLCollection");

var NODE_TYPE = require("../node-type");

function tHeadInsertionPoint(table) {
  var iterator = domSymbolTree.childrenIterator(table);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;

      if (child.nodeType !== NODE_TYPE.ELEMENT_NODE) {
        continue;
      }

      if (child._namespaceURI !== HTML_NS || child._localName !== "caption" && child._localName !== "colgroup") {
        return child;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

var HTMLTableElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLTableElementImpl, _HTMLElementImpl);

  function HTMLTableElementImpl() {
    _classCallCheck(this, HTMLTableElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableElementImpl).apply(this, arguments));
  }

  _createClass(HTMLTableElementImpl, [{
    key: "createTBody",
    value: function createTBody() {
      var el = this._ownerDocument.createElement("TBODY");

      var tbodies = childrenByLocalName(this, "tbody");
      var insertionPoint = tbodies[tbodies.length - 1];

      if (insertionPoint) {
        this.insertBefore(el, insertionPoint.nextSibling);
      } else {
        this.appendChild(el);
      }

      return el;
    }
  }, {
    key: "createTHead",
    value: function createTHead() {
      var el = this.tHead;

      if (!el) {
        el = this.tHead = this._ownerDocument.createElement("THEAD");
      }

      return el;
    }
  }, {
    key: "deleteTHead",
    value: function deleteTHead() {
      this.tHead = null;
    }
  }, {
    key: "createTFoot",
    value: function createTFoot() {
      var el = this.tFoot;

      if (!el) {
        el = this.tFoot = this._ownerDocument.createElement("TFOOT");
      }

      return el;
    }
  }, {
    key: "deleteTFoot",
    value: function deleteTFoot() {
      this.tFoot = null;
    }
  }, {
    key: "createCaption",
    value: function createCaption() {
      var el = this.caption;

      if (!el) {
        el = this.caption = this._ownerDocument.createElement("CAPTION");
      }

      return el;
    }
  }, {
    key: "deleteCaption",
    value: function deleteCaption() {
      var c = this.caption;

      if (c) {
        c.parentNode.removeChild(c);
      }
    }
  }, {
    key: "insertRow",
    value: function insertRow(index) {
      if (index < -1 || index > this.rows.length) {
        throw DOMException.create(this._globalObject, ["Cannot insert a row at an index that is less than -1 or greater than the number of existing rows", "IndexSizeError"]);
      }

      var tr = this._ownerDocument.createElement("tr");

      if (this.rows.length === 0 && this.tBodies.length === 0) {
        var tBody = this._ownerDocument.createElement("tbody");

        tBody.appendChild(tr);
        this.appendChild(tBody);
      } else if (this.rows.length === 0) {
        var _tBody = this.tBodies.item(this.tBodies.length - 1);

        _tBody.appendChild(tr);
      } else if (index === -1 || index === this.rows.length) {
        var tSection = this.rows.item(this.rows.length - 1).parentNode;
        tSection.appendChild(tr);
      } else {
        var beforeTR = this.rows.item(index);
        var _tSection = beforeTR.parentNode;

        _tSection.insertBefore(tr, beforeTR);
      }

      return tr;
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(index) {
      var rowLength = this.rows.length;

      if (index < -1 || index >= rowLength) {
        throw DOMException.create(this._globalObject, ["Cannot delete a row at index ".concat(index, ", where no row exists"), "IndexSizeError"]);
      }

      if (index === -1) {
        if (rowLength === 0) {
          return;
        }

        index = rowLength - 1;
      }

      var tr = this.rows.item(index);
      tr.parentNode.removeChild(tr);
    }
  }, {
    key: "caption",
    get: function get() {
      return firstChildWithLocalName(this, "caption");
    },
    set: function set(value) {
      var currentCaption = this.caption;

      if (currentCaption !== null) {
        this.removeChild(currentCaption);
      }

      if (value !== null) {
        var insertionPoint = this.firstChild;
        this.insertBefore(value, insertionPoint);
      }

      return value;
    }
  }, {
    key: "tHead",
    get: function get() {
      return firstChildWithLocalName(this, "thead");
    },
    set: function set(value) {
      if (value !== null && value._localName !== "thead") {
        throw DOMException.create(this._globalObject, ["Cannot set a non-thead element as a table header", "HierarchyRequestError"]);
      }

      var currentHead = this.tHead;

      if (currentHead !== null) {
        this.removeChild(currentHead);
      }

      if (value !== null) {
        var insertionPoint = tHeadInsertionPoint(this);
        this.insertBefore(value, insertionPoint);
      }
    }
  }, {
    key: "tFoot",
    get: function get() {
      return firstChildWithLocalName(this, "tfoot");
    },
    set: function set(value) {
      if (value !== null && value._localName !== "tfoot") {
        throw DOMException.create(this._globalObject, ["Cannot set a non-tfoot element as a table footer", "HierarchyRequestError"]);
      }

      var currentFoot = this.tFoot;

      if (currentFoot !== null) {
        this.removeChild(currentFoot);
      }

      if (value !== null) {
        this.appendChild(value);
      }
    }
  }, {
    key: "rows",
    get: function get() {
      var _this = this;

      if (!this._rows) {
        this._rows = HTMLCollection.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            var headerRows = [];
            var bodyRows = [];
            var footerRows = [];
            var iterator = domSymbolTree.childrenIterator(_this);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = iterator[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var child = _step2.value;

                if (child.nodeType !== NODE_TYPE.ELEMENT_NODE || child._namespaceURI !== HTML_NS) {
                  continue;
                }

                if (child._localName === "thead") {
                  headerRows.push.apply(headerRows, _toConsumableArray(childrenByLocalName(child, "tr")));
                } else if (child._localName === "tbody") {
                  bodyRows.push.apply(bodyRows, _toConsumableArray(childrenByLocalName(child, "tr")));
                } else if (child._localName === "tfoot") {
                  footerRows.push.apply(footerRows, _toConsumableArray(childrenByLocalName(child, "tr")));
                } else if (child._localName === "tr") {
                  bodyRows.push(child);
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return [].concat(headerRows, bodyRows, footerRows);
          }
        });
      }

      return this._rows;
    }
  }, {
    key: "tBodies",
    get: function get() {
      var _this2 = this;

      if (!this._tBodies) {
        this._tBodies = HTMLCollection.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            return childrenByLocalName(_this2, "tbody");
          }
        });
      }

      return this._tBodies;
    }
  }]);

  return HTMLTableElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLTableElementImpl
};