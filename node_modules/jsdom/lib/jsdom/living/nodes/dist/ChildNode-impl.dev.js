"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../node"),
    convertNodesIntoNode = _require.convertNodesIntoNode;

var ChildNodeImpl =
/*#__PURE__*/
function () {
  function ChildNodeImpl() {
    _classCallCheck(this, ChildNodeImpl);
  }

  _createClass(ChildNodeImpl, [{
    key: "remove",
    value: function remove() {
      if (!this.parentNode) {
        return;
      }

      this.parentNode._remove(this);
    }
  }, {
    key: "after",
    value: function after() {
      var parent = this.parentNode;

      if (parent) {
        var viableNextSibling = this.nextSibling;

        for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {
          nodes[_key] = arguments[_key];
        }

        var idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;

        while (idx !== -1) {
          viableNextSibling = viableNextSibling.nextSibling;

          if (!viableNextSibling) {
            break;
          }

          idx = nodes.indexOf(viableNextSibling);
        }

        parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);
      }
    }
  }, {
    key: "before",
    value: function before() {
      var parent = this.parentNode;

      if (parent) {
        var viablePreviousSibling = this.previousSibling;

        for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          nodes[_key2] = arguments[_key2];
        }

        var idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;

        while (idx !== -1) {
          viablePreviousSibling = viablePreviousSibling.previousSibling;

          if (!viablePreviousSibling) {
            break;
          }

          idx = nodes.indexOf(viablePreviousSibling);
        }

        parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild);
      }
    }
  }, {
    key: "replaceWith",
    value: function replaceWith() {
      var parent = this.parentNode;

      if (parent) {
        var viableNextSibling = this.nextSibling;

        for (var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          nodes[_key3] = arguments[_key3];
        }

        var idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;

        while (idx !== -1) {
          viableNextSibling = viableNextSibling.nextSibling;

          if (!viableNextSibling) {
            break;
          }

          idx = nodes.indexOf(viableNextSibling);
        }

        var node = convertNodesIntoNode(this._ownerDocument, nodes);

        if (this.parentNode === parent) {
          parent._replace(node, this);
        } else {
          parent._preInsert(node, viableNextSibling);
        }
      }
    }
  }]);

  return ChildNodeImpl;
}();

module.exports = {
  implementation: ChildNodeImpl
};