"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var DOMException = require("domexception/webidl2js-wrapper");

var EventTargetImpl = require("../events/EventTarget-impl").implementation;

var _require = require("../../utils"),
    simultaneousIterators = _require.simultaneousIterators;

var NODE_TYPE = require("../node-type");

var NODE_DOCUMENT_POSITION = require("../node-document-position");

var _require2 = require("../node"),
    clone = _require2.clone,
    locateNamespacePrefix = _require2.locateNamespacePrefix,
    locateNamespace = _require2.locateNamespace;

var _require3 = require("../attributes"),
    setAnExistingAttributeValue = _require3.setAnExistingAttributeValue;

var NodeList = require("../generated/NodeList");

var _require4 = require("../helpers/node"),
    nodeRoot = _require4.nodeRoot,
    nodeLength = _require4.nodeLength;

var _require5 = require("../helpers/internal-constants"),
    domSymbolTree = _require5.domSymbolTree;

var _require6 = require("../helpers/document-base-url"),
    documentBaseURLSerialized = _require6.documentBaseURLSerialized;

var _require7 = require("../helpers/mutation-observers"),
    queueTreeMutationRecord = _require7.queueTreeMutationRecord;

var _require8 = require("../helpers/custom-elements"),
    enqueueCECallbackReaction = _require8.enqueueCECallbackReaction,
    tryUpgradeElement = _require8.tryUpgradeElement;

var _require9 = require("../helpers/shadow-dom"),
    isShadowRoot = _require9.isShadowRoot,
    shadowIncludingRoot = _require9.shadowIncludingRoot,
    assignSlot = _require9.assignSlot,
    assignSlotableForTree = _require9.assignSlotableForTree,
    assignSlotable = _require9.assignSlotable,
    signalSlotChange = _require9.signalSlotChange,
    isSlot = _require9.isSlot,
    shadowIncludingInclusiveDescendantsIterator = _require9.shadowIncludingInclusiveDescendantsIterator,
    shadowIncludingDescendantsIterator = _require9.shadowIncludingDescendantsIterator;

function isObsoleteNodeType(node) {
  return node.nodeType === NODE_TYPE.ENTITY_NODE || node.nodeType === NODE_TYPE.ENTITY_REFERENCE_NODE || node.nodeType === NODE_TYPE.NOTATION_NODE || node.nodeType === NODE_TYPE.CDATA_SECTION_NODE;
}

function nodeEquals(a, b) {
  if (a.nodeType !== b.nodeType) {
    return false;
  }

  switch (a.nodeType) {
    case NODE_TYPE.DOCUMENT_TYPE_NODE:
      if (a.name !== b.name || a.publicId !== b.publicId || a.systemId !== b.systemId) {
        return false;
      }

      break;

    case NODE_TYPE.ELEMENT_NODE:
      if (a._namespaceURI !== b._namespaceURI || a._prefix !== b._prefix || a._localName !== b._localName || a._attributes.length !== b._attributes.length) {
        return false;
      }

      break;

    case NODE_TYPE.ATTRIBUTE_NODE:
      if (a._namespace !== b._namespace || a._localName !== b._localName || a._value !== b._value) {
        return false;
      }

      break;

    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
      if (a._target !== b._target || a._data !== b._data) {
        return false;
      }

      break;

    case NODE_TYPE.TEXT_NODE:
    case NODE_TYPE.COMMENT_NODE:
      if (a._data !== b._data) {
        return false;
      }

      break;
  }

  if (a.nodeType === NODE_TYPE.ELEMENT_NODE && !attributeListsEqual(a, b)) {
    return false;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = simultaneousIterators(domSymbolTree.childrenIterator(a), domSymbolTree.childrenIterator(b))[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var nodes = _step.value;

      if (!nodes[0] || !nodes[1]) {
        // mismatch in the amount of childNodes
        return false;
      }

      if (!nodeEquals(nodes[0], nodes[1])) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
} // Needed by https://dom.spec.whatwg.org/#concept-node-equals


function attributeListsEqual(elementA, elementB) {
  var listA = elementA._attributeList;
  var listB = elementB._attributeList;
  var lengthA = listA.length;
  var lengthB = listB.length;

  if (lengthA !== lengthB) {
    return false;
  }

  var _loop = function _loop(i) {
    var attrA = listA[i];

    if (!listB.some(function (attrB) {
      return nodeEquals(attrA, attrB);
    })) {
      return {
        v: false
      };
    }
  };

  for (var i = 0; i < lengthA; ++i) {
    var _ret = _loop(i);

    if (_typeof(_ret) === "object") return _ret.v;
  }

  return true;
} // https://dom.spec.whatwg.org/#concept-tree-host-including-inclusive-ancestor


function isHostInclusiveAncestor(nodeImplA, nodeImplB) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = domSymbolTree.ancestorsIterator(nodeImplB)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var ancestor = _step2.value;

      if (ancestor === nodeImplA) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var rootImplB = nodeRoot(nodeImplB);

  if (rootImplB._host) {
    return isHostInclusiveAncestor(nodeImplA, rootImplB._host);
  }

  return false;
}

var NodeImpl =
/*#__PURE__*/
function (_EventTargetImpl) {
  _inherits(NodeImpl, _EventTargetImpl);

  function NodeImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, NodeImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeImpl).call(this, globalObject, args, privateData));
    domSymbolTree.initialize(_assertThisInitialized(_this));
    _this._ownerDocument = privateData.ownerDocument;
    _this._childNodesList = null;
    _this._childrenList = null;
    _this._version = 0;
    _this._memoizedQueries = {};
    _this._registeredObserverList = [];
    _this._referencedRanges = new Set();
    return _this;
  }

  _createClass(NodeImpl, [{
    key: "_getTheParent",
    value: function _getTheParent() {
      if (this._assignedSlot) {
        return this._assignedSlot;
      }

      return domSymbolTree.parent(this);
    }
  }, {
    key: "getRootNode",
    value: function getRootNode(options) {
      return options.composed ? shadowIncludingRoot(this) : nodeRoot(this);
    }
  }, {
    key: "_modified",
    value: function _modified() {
      this._version++;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = domSymbolTree.ancestorsIterator(this)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var ancestor = _step3.value;
          ancestor._version++;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (this._childrenList) {
        this._childrenList._update();
      }

      if (this._childNodesList) {
        this._childNodesList._update();
      }

      this._clearMemoizedQueries();
    }
  }, {
    key: "_childTextContentChangeSteps",
    value: function _childTextContentChangeSteps() {// Default: do nothing
    }
  }, {
    key: "_clearMemoizedQueries",
    value: function _clearMemoizedQueries() {
      this._memoizedQueries = {};
      var myParent = domSymbolTree.parent(this);

      if (myParent) {
        myParent._clearMemoizedQueries();
      }
    }
  }, {
    key: "_descendantRemoved",
    value: function _descendantRemoved(parent, child) {
      var myParent = domSymbolTree.parent(this);

      if (myParent) {
        myParent._descendantRemoved(parent, child);
      }
    }
  }, {
    key: "_descendantAdded",
    value: function _descendantAdded(parent, child) {
      var myParent = domSymbolTree.parent(this);

      if (myParent) {
        myParent._descendantAdded(parent, child);
      }
    }
  }, {
    key: "_attach",
    value: function _attach() {
      this._attached = true;
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var child = _step4.value;

          if (child._attach) {
            child._attach();
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }, {
    key: "_detach",
    value: function _detach() {
      this._attached = false;

      if (this._ownerDocument && this._ownerDocument._lastFocusedElement === this) {
        this._ownerDocument._lastFocusedElement = null;
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var child = _step5.value;

          if (child._detach) {
            child._detach();
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }
  }, {
    key: "hasChildNodes",
    value: function hasChildNodes() {
      return domSymbolTree.hasChildren(this);
    } // https://dom.spec.whatwg.org/#dom-node-normalize

  }, {
    key: "normalize",
    value: function normalize() {
      // It is important to use a treeToArray instead of a treeToIterator here, because the
      // treeToIterator doesn't support tree mutation in the middle of the traversal.
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = domSymbolTree.treeToArray(this)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var node = _step6.value;
          var parentNode = domSymbolTree.parent(node);

          if (parentNode === null || node.nodeType !== NODE_TYPE.TEXT_NODE) {
            continue;
          }

          var length = nodeLength(node);

          if (length === 0) {
            parentNode._remove(node);

            continue;
          }

          var continuousExclusiveTextNodes = [];
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = domSymbolTree.previousSiblingsIterator(node)[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var _currentNode = _step7.value;

              if (_currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {
                break;
              }

              continuousExclusiveTextNodes.unshift(_currentNode);
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }

          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = domSymbolTree.nextSiblingsIterator(node)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var _currentNode2 = _step8.value;

              if (_currentNode2.nodeType !== NODE_TYPE.TEXT_NODE) {
                break;
              }

              continuousExclusiveTextNodes.push(_currentNode2);
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          var data = continuousExclusiveTextNodes.reduce(function (d, n) {
            return d + n._data;
          }, "");
          node.replaceData(length, 0, data);
          var currentNode = domSymbolTree.nextSibling(node);

          while (currentNode && currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {
            var currentNodeParent = domSymbolTree.parent(currentNode);
            var currentNodeIndex = domSymbolTree.index(currentNode);
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
              for (var _iterator9 = node._referencedRanges[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var range = _step9.value;
                var _start = range._start,
                    _end = range._end;

                if (_start.node === currentNode) {
                  range._setLiveRangeStart(node, _start.offset + length);
                }

                if (_end.node === currentNode) {
                  range._setLiveRangeEnd(node, _end.offset + length);
                }

                if (_start.node === currentNodeParent && _start.offset === currentNodeIndex) {
                  range._setLiveRangeStart(node, length);
                }

                if (_end.node === currentNodeParent && _end.offset === currentNodeIndex) {
                  range._setLiveRangeStart(node, length);
                }
              }
            } catch (err) {
              _didIteratorError9 = true;
              _iteratorError9 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                  _iterator9["return"]();
                }
              } finally {
                if (_didIteratorError9) {
                  throw _iteratorError9;
                }
              }
            }

            length += nodeLength(currentNode);
            currentNode = domSymbolTree.nextSibling(currentNode);
          }

          for (var _i = 0, _continuousExclusiveT = continuousExclusiveTextNodes; _i < _continuousExclusiveT.length; _i++) {
            var continuousExclusiveTextNode = _continuousExclusiveT[_i];

            parentNode._remove(continuousExclusiveTextNode);
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  }, {
    key: "compareDocumentPosition",
    value: function compareDocumentPosition(other) {
      // Let node1 be other and node2 be the context object.
      var node1 = other;
      var node2 = this;

      if (isObsoleteNodeType(node2) || isObsoleteNodeType(node1)) {
        throw new Error("Obsolete node type");
      }

      var attr1 = null;
      var attr2 = null;

      if (node1.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {
        attr1 = node1;
        node1 = attr1._element;
      }

      if (node2.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {
        attr2 = node2;
        node2 = attr2._element;

        if (attr1 !== null && node1 !== null && node2 === node1) {
          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = node2._attributeList[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var attr = _step10.value;

              if (nodeEquals(attr, attr1)) {
                return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_PRECEDING;
              }

              if (nodeEquals(attr, attr2)) {
                return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;
              }
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }
        }
      }

      var result = domSymbolTree.compareTreePosition(node2, node1); // “If other and reference are not in the same tree, return the result of adding DOCUMENT_POSITION_DISCONNECTED,
      //  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, and either DOCUMENT_POSITION_PRECEDING or
      // DOCUMENT_POSITION_FOLLOWING, with the constraint that this is to be consistent, together.”

      if (result === NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED) {
        // symbol-tree does not add these bits required by the spec:
        return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;
      }

      return result;
    }
  }, {
    key: "lookupPrefix",
    value: function lookupPrefix(namespace) {
      if (namespace === null || namespace === "") {
        return null;
      }

      switch (this.nodeType) {
        case NODE_TYPE.ELEMENT_NODE:
          {
            return locateNamespacePrefix(this, namespace);
          }

        case NODE_TYPE.DOCUMENT_NODE:
          {
            return this.documentElement !== null ? locateNamespacePrefix(this.documentElement, namespace) : null;
          }

        case NODE_TYPE.DOCUMENT_TYPE_NODE:
        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
          {
            return null;
          }

        case NODE_TYPE.ATTRIBUTE_NODE:
          {
            return this._element !== null ? locateNamespacePrefix(this._element, namespace) : null;
          }

        default:
          {
            return this.parentElement !== null ? locateNamespacePrefix(this.parentElement, namespace) : null;
          }
      }
    }
  }, {
    key: "lookupNamespaceURI",
    value: function lookupNamespaceURI(prefix) {
      if (prefix === "") {
        prefix = null;
      }

      return locateNamespace(this, prefix);
    }
  }, {
    key: "isDefaultNamespace",
    value: function isDefaultNamespace(namespace) {
      if (namespace === "") {
        namespace = null;
      }

      var defaultNamespace = locateNamespace(this, null);
      return defaultNamespace === namespace;
    }
  }, {
    key: "contains",
    value: function contains(other) {
      if (other === null) {
        return false;
      } else if (this === other) {
        return true;
      }

      return Boolean(this.compareDocumentPosition(other) & NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_CONTAINED_BY);
    }
  }, {
    key: "isEqualNode",
    value: function isEqualNode(node) {
      if (node === null) {
        return false;
      } // Fast-path, not in the spec


      if (this === node) {
        return true;
      }

      return nodeEquals(this, node);
    }
  }, {
    key: "isSameNode",
    value: function isSameNode(node) {
      if (this === node) {
        return true;
      }

      return false;
    }
  }, {
    key: "cloneNode",
    value: function cloneNode(deep) {
      if (isShadowRoot(this)) {
        throw DOMException.create(this._globalObject, ["ShadowRoot nodes are not clonable.", "NotSupportedError"]);
      }

      deep = Boolean(deep);
      return clone(this, undefined, deep);
    }
  }, {
    key: "insertBefore",
    // https://dom.spec.whatwg.org/#dom-node-insertbefore
    value: function insertBefore(nodeImpl, childImpl) {
      return this._preInsert(nodeImpl, childImpl);
    } // https://dom.spec.whatwg.org/#dom-node-appendchild

  }, {
    key: "appendChild",
    value: function appendChild(nodeImpl) {
      return this._append(nodeImpl);
    } // https://dom.spec.whatwg.org/#dom-node-replacechild

  }, {
    key: "replaceChild",
    value: function replaceChild(nodeImpl, childImpl) {
      return this._replace(nodeImpl, childImpl);
    } // https://dom.spec.whatwg.org/#dom-node-removechild

  }, {
    key: "removeChild",
    value: function removeChild(oldChildImpl) {
      return this._preRemove(oldChildImpl);
    } // https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity

  }, {
    key: "_preInsertValidity",
    value: function _preInsertValidity(nodeImpl, childImpl) {
      var nodeType = nodeImpl.nodeType,
          nodeName = nodeImpl.nodeName;
      var parentType = this.nodeType,
          parentName = this.nodeName;

      if (parentType !== NODE_TYPE.DOCUMENT_NODE && parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && parentType !== NODE_TYPE.ELEMENT_NODE) {
        throw DOMException.create(this._globalObject, ["Node can't be inserted in a ".concat(parentName, " parent."), "HierarchyRequestError"]);
      }

      if (isHostInclusiveAncestor(nodeImpl, this)) {
        throw DOMException.create(this._globalObject, ["The operation would yield an incorrect node tree.", "HierarchyRequestError"]);
      }

      if (childImpl && domSymbolTree.parent(childImpl) !== this) {
        throw DOMException.create(this._globalObject, ["The child can not be found in the parent.", "NotFoundError"]);
      }

      if (nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE && nodeType !== NODE_TYPE.ELEMENT_NODE && nodeType !== NODE_TYPE.TEXT_NODE && nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text
      nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE && nodeType !== NODE_TYPE.COMMENT_NODE) {
        throw DOMException.create(this._globalObject, ["".concat(nodeName, " node can't be inserted in parent node."), "HierarchyRequestError"]);
      }

      if (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE || nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE) {
        throw DOMException.create(this._globalObject, ["".concat(nodeName, " node can't be inserted in ").concat(parentName, " parent."), "HierarchyRequestError"]);
      }

      if (parentType === NODE_TYPE.DOCUMENT_NODE) {
        var nodeChildren = domSymbolTree.childrenToArray(nodeImpl);
        var parentChildren = domSymbolTree.childrenToArray(this);

        switch (nodeType) {
          case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
            {
              var nodeChildrenElements = nodeChildren.filter(function (child) {
                return child.nodeType === NODE_TYPE.ELEMENT_NODE;
              });

              if (nodeChildrenElements.length > 1) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              var hasNodeTextChildren = nodeChildren.some(function (child) {
                return child.nodeType === NODE_TYPE.TEXT_NODE;
              });

              if (hasNodeTextChildren) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              if (nodeChildrenElements.length === 1 && (parentChildren.some(function (child) {
                return child.nodeType === NODE_TYPE.ELEMENT_NODE;
              }) || childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE)) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              break;
            }

          case NODE_TYPE.ELEMENT_NODE:
            if (parentChildren.some(function (child) {
              return child.nodeType === NODE_TYPE.ELEMENT_NODE;
            }) || childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {
              throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
            }

            break;

          case NODE_TYPE.DOCUMENT_TYPE_NODE:
            if (parentChildren.some(function (child) {
              return child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE;
            }) || childImpl && domSymbolTree.previousSibling(childImpl) && domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE || !childImpl && parentChildren.some(function (child) {
              return child.nodeType === NODE_TYPE.ELEMENT_NODE;
            })) {
              throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
            }

            break;
        }
      }
    } // https://dom.spec.whatwg.org/#concept-node-pre-insert

  }, {
    key: "_preInsert",
    value: function _preInsert(nodeImpl, childImpl) {
      this._preInsertValidity(nodeImpl, childImpl);

      var referenceChildImpl = childImpl;

      if (referenceChildImpl === nodeImpl) {
        referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);
      }

      this._ownerDocument._adoptNode(nodeImpl);

      this._insert(nodeImpl, referenceChildImpl);

      return nodeImpl;
    } // https://dom.spec.whatwg.org/#concept-node-insert

  }, {
    key: "_insert",
    value: function _insert(nodeImpl, childImpl, suppressObservers) {
      var count = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenCount(nodeImpl) : 1;

      if (childImpl) {
        var childIndex = domSymbolTree.index(childImpl);
        var _iteratorNormalCompletion11 = true;
        var _didIteratorError11 = false;
        var _iteratorError11 = undefined;

        try {
          for (var _iterator11 = this._referencedRanges[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
            var range = _step11.value;
            var _start = range._start,
                _end = range._end;

            if (_start.offset > childIndex) {
              range._setLiveRangeStart(this, _start.offset + count);
            }

            if (_end.offset > childIndex) {
              range._setLiveRangeEnd(this, _end.offset + count);
            }
          }
        } catch (err) {
          _didIteratorError11 = true;
          _iteratorError11 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
              _iterator11["return"]();
            }
          } finally {
            if (_didIteratorError11) {
              throw _iteratorError11;
            }
          }
        }
      }

      var nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenToArray(nodeImpl) : [nodeImpl];

      if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {
        var grandChildImpl;

        while (grandChildImpl = domSymbolTree.firstChild(nodeImpl)) {
          nodeImpl._remove(grandChildImpl, true);
        }
      }

      if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {
        queueTreeMutationRecord(nodeImpl, [], nodesImpl, null, null);
      }

      var previousChildImpl = childImpl ? domSymbolTree.previousSibling(childImpl) : domSymbolTree.lastChild(this);
      var _iteratorNormalCompletion12 = true;
      var _didIteratorError12 = false;
      var _iteratorError12 = undefined;

      try {
        for (var _iterator12 = nodesImpl[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
          var node = _step12.value;

          if (!childImpl) {
            domSymbolTree.appendChild(this, node);
          } else {
            domSymbolTree.insertBefore(childImpl, node);
          }

          if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this._shadowRoot !== null && (node.nodeType === NODE_TYPE.ELEMENT_NODE || node.nodeType === NODE_TYPE.TEXT_NODE)) {
            assignSlot(node);
          }

          this._modified();

          if (node.nodeType === NODE_TYPE.TEXT_NODE || node.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {
            this._childTextContentChangeSteps();
          }

          if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {
            signalSlotChange(this);
          }

          var root = nodeRoot(node);

          if (isShadowRoot(root)) {
            assignSlotableForTree(root);
          }

          if (this._attached && nodeImpl._attach) {
            node._attach();
          }

          this._descendantAdded(this, node);

          var _iteratorNormalCompletion13 = true;
          var _didIteratorError13 = false;
          var _iteratorError13 = undefined;

          try {
            for (var _iterator13 = shadowIncludingInclusiveDescendantsIterator(node)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
              var inclusiveDescendant = _step13.value;

              if (inclusiveDescendant.isConnected) {
                if (inclusiveDescendant._ceState === "custom") {
                  enqueueCECallbackReaction(inclusiveDescendant, "connectedCallback", []);
                } else {
                  tryUpgradeElement(inclusiveDescendant);
                }
              }
            }
          } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                _iterator13["return"]();
              }
            } finally {
              if (_didIteratorError13) {
                throw _iteratorError13;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError12 = true;
        _iteratorError12 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
            _iterator12["return"]();
          }
        } finally {
          if (_didIteratorError12) {
            throw _iteratorError12;
          }
        }
      }

      if (!suppressObservers) {
        queueTreeMutationRecord(this, nodesImpl, [], previousChildImpl, childImpl);
      }
    } // https://dom.spec.whatwg.org/#concept-node-append

  }, {
    key: "_append",
    value: function _append(nodeImpl) {
      return this._preInsert(nodeImpl, null);
    } // https://dom.spec.whatwg.org/#concept-node-replace

  }, {
    key: "_replace",
    value: function _replace(nodeImpl, childImpl) {
      var nodeType = nodeImpl.nodeType,
          nodeName = nodeImpl.nodeName;
      var parentType = this.nodeType,
          parentName = this.nodeName; // Note: This section differs from the pre-insert validation algorithm.

      if (parentType !== NODE_TYPE.DOCUMENT_NODE && parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && parentType !== NODE_TYPE.ELEMENT_NODE) {
        throw DOMException.create(this._globalObject, ["Node can't be inserted in a ".concat(parentName, " parent."), "HierarchyRequestError"]);
      }

      if (isHostInclusiveAncestor(nodeImpl, this)) {
        throw DOMException.create(this._globalObject, ["The operation would yield an incorrect node tree.", "HierarchyRequestError"]);
      }

      if (childImpl && domSymbolTree.parent(childImpl) !== this) {
        throw DOMException.create(this._globalObject, ["The child can not be found in the parent.", "NotFoundError"]);
      }

      if (nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE && nodeType !== NODE_TYPE.ELEMENT_NODE && nodeType !== NODE_TYPE.TEXT_NODE && nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text
      nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE && nodeType !== NODE_TYPE.COMMENT_NODE) {
        throw DOMException.create(this._globalObject, ["".concat(nodeName, " node can't be inserted in parent node."), "HierarchyRequestError"]);
      }

      if (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE || nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE) {
        throw DOMException.create(this._globalObject, ["".concat(nodeName, " node can't be inserted in ").concat(parentName, " parent."), "HierarchyRequestError"]);
      }

      if (parentType === NODE_TYPE.DOCUMENT_NODE) {
        var nodeChildren = domSymbolTree.childrenToArray(nodeImpl);
        var parentChildren = domSymbolTree.childrenToArray(this);

        switch (nodeType) {
          case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
            {
              var nodeChildrenElements = nodeChildren.filter(function (child) {
                return child.nodeType === NODE_TYPE.ELEMENT_NODE;
              });

              if (nodeChildrenElements.length > 1) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              var hasNodeTextChildren = nodeChildren.some(function (child) {
                return child.nodeType === NODE_TYPE.TEXT_NODE;
              });

              if (hasNodeTextChildren) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              var parentChildElements = parentChildren.filter(function (child) {
                return child.nodeType === NODE_TYPE.ELEMENT_NODE;
              });

              if (nodeChildrenElements.length === 1 && (parentChildElements.length === 1 && parentChildElements[0] !== childImpl || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE)) {
                throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
              }

              break;
            }

          case NODE_TYPE.ELEMENT_NODE:
            if (parentChildren.some(function (child) {
              return child.nodeType === NODE_TYPE.ELEMENT_NODE && child !== childImpl;
            }) || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {
              throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
            }

            break;

          case NODE_TYPE.DOCUMENT_TYPE_NODE:
            if (parentChildren.some(function (child) {
              return child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && child !== childImpl;
            }) || childImpl && domSymbolTree.previousSibling(childImpl) && domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE) {
              throw DOMException.create(this._globalObject, ["Invalid insertion of ".concat(nodeName, " node in ").concat(parentName, " node."), "HierarchyRequestError"]);
            }

            break;
        }
      }

      var referenceChildImpl = domSymbolTree.nextSibling(childImpl);

      if (referenceChildImpl === nodeImpl) {
        referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);
      }

      var previousSiblingImpl = domSymbolTree.previousSibling(childImpl);

      this._ownerDocument._adoptNode(nodeImpl);

      var removedNodesImpl = [];

      if (domSymbolTree.parent(childImpl)) {
        removedNodesImpl = [childImpl];

        this._remove(childImpl, true);
      }

      var nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenToArray(nodeImpl) : [nodeImpl];

      this._insert(nodeImpl, referenceChildImpl, true);

      queueTreeMutationRecord(this, nodesImpl, removedNodesImpl, previousSiblingImpl, referenceChildImpl);
      return childImpl;
    } // https://dom.spec.whatwg.org/#concept-node-replace-all

  }, {
    key: "_replaceAll",
    value: function _replaceAll(nodeImpl) {
      if (nodeImpl !== null) {
        this._ownerDocument._adoptNode(nodeImpl);
      }

      var removedNodesImpl = domSymbolTree.childrenToArray(this);
      var addedNodesImpl;

      if (nodeImpl === null) {
        addedNodesImpl = [];
      } else if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {
        addedNodesImpl = domSymbolTree.childrenToArray(nodeImpl);
      } else {
        addedNodesImpl = [nodeImpl];
      }

      var _iteratorNormalCompletion14 = true;
      var _didIteratorError14 = false;
      var _iteratorError14 = undefined;

      try {
        for (var _iterator14 = domSymbolTree.childrenIterator(this)[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
          var childImpl = _step14.value;

          this._remove(childImpl, true);
        }
      } catch (err) {
        _didIteratorError14 = true;
        _iteratorError14 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
            _iterator14["return"]();
          }
        } finally {
          if (_didIteratorError14) {
            throw _iteratorError14;
          }
        }
      }

      if (nodeImpl !== null) {
        this._insert(nodeImpl, null, true);
      }

      if (addedNodesImpl.length > 0 || removedNodesImpl.length > 0) {
        queueTreeMutationRecord(this, addedNodesImpl, removedNodesImpl, null, null);
      }
    } // https://dom.spec.whatwg.org/#concept-node-pre-remove

  }, {
    key: "_preRemove",
    value: function _preRemove(childImpl) {
      if (domSymbolTree.parent(childImpl) !== this) {
        throw DOMException.create(this._globalObject, ["The node to be removed is not a child of this node.", "NotFoundError"]);
      }

      this._remove(childImpl);

      return childImpl;
    } // https://dom.spec.whatwg.org/#concept-node-remove

  }, {
    key: "_remove",
    value: function _remove(nodeImpl, suppressObservers) {
      var index = domSymbolTree.index(nodeImpl);
      var _iteratorNormalCompletion15 = true;
      var _didIteratorError15 = false;
      var _iteratorError15 = undefined;

      try {
        for (var _iterator15 = domSymbolTree.treeIterator(nodeImpl)[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
          var descendant = _step15.value;
          var _iteratorNormalCompletion19 = true;
          var _didIteratorError19 = false;
          var _iteratorError19 = undefined;

          try {
            for (var _iterator19 = descendant._referencedRanges[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
              var range = _step19.value;
              var _start = range._start,
                  _end = range._end;

              if (_start.node === descendant) {
                range._setLiveRangeStart(this, index);
              }

              if (_end.node === descendant) {
                range._setLiveRangeEnd(this, index);
              }
            }
          } catch (err) {
            _didIteratorError19 = true;
            _iteratorError19 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
                _iterator19["return"]();
              }
            } finally {
              if (_didIteratorError19) {
                throw _iteratorError19;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError15 = true;
        _iteratorError15 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
            _iterator15["return"]();
          }
        } finally {
          if (_didIteratorError15) {
            throw _iteratorError15;
          }
        }
      }

      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = this._referencedRanges[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var _range = _step16.value;
          var _start2 = _range._start,
              _end2 = _range._end;

          if (_start2.node === this && _start2.offset > index) {
            _range._setLiveRangeStart(this, _start2.offset - 1);
          }

          if (_end2.node === this && _end2.offset > index) {
            _range._setLiveRangeEnd(this, _end2.offset - 1);
          }
        }
      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
            _iterator16["return"]();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }

      if (this._ownerDocument) {
        this._ownerDocument._runPreRemovingSteps(nodeImpl);
      }

      var oldPreviousSiblingImpl = domSymbolTree.previousSibling(nodeImpl);
      var oldNextSiblingImpl = domSymbolTree.nextSibling(nodeImpl);
      domSymbolTree.remove(nodeImpl);

      if (nodeImpl._assignedSlot) {
        assignSlotable(nodeImpl._assignedSlot);
      }

      if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {
        signalSlotChange(this);
      }

      var hasSlotDescendant = isSlot(nodeImpl);

      if (!hasSlotDescendant) {
        var _iteratorNormalCompletion17 = true;
        var _didIteratorError17 = false;
        var _iteratorError17 = undefined;

        try {
          for (var _iterator17 = domSymbolTree.treeIterator(nodeImpl)[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var child = _step17.value;

            if (isSlot(child)) {
              hasSlotDescendant = true;
              break;
            }
          }
        } catch (err) {
          _didIteratorError17 = true;
          _iteratorError17 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
              _iterator17["return"]();
            }
          } finally {
            if (_didIteratorError17) {
              throw _iteratorError17;
            }
          }
        }
      }

      if (hasSlotDescendant) {
        assignSlotableForTree(nodeRoot(this));
        assignSlotableForTree(nodeImpl);
      }

      this._modified();

      nodeImpl._detach();

      this._descendantRemoved(this, nodeImpl);

      if (this.isConnected) {
        if (nodeImpl._ceState === "custom") {
          enqueueCECallbackReaction(nodeImpl, "disconnectedCallback", []);
        }

        var _iteratorNormalCompletion18 = true;
        var _didIteratorError18 = false;
        var _iteratorError18 = undefined;

        try {
          for (var _iterator18 = shadowIncludingDescendantsIterator(nodeImpl)[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
            var descendantImpl = _step18.value;

            if (descendantImpl._ceState === "custom") {
              enqueueCECallbackReaction(descendantImpl, "disconnectedCallback", []);
            }
          }
        } catch (err) {
          _didIteratorError18 = true;
          _iteratorError18 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
              _iterator18["return"]();
            }
          } finally {
            if (_didIteratorError18) {
              throw _iteratorError18;
            }
          }
        }
      }

      if (!suppressObservers) {
        queueTreeMutationRecord(this, [], [nodeImpl], oldPreviousSiblingImpl, oldNextSiblingImpl);
      }

      if (nodeImpl.nodeType === NODE_TYPE.TEXT_NODE) {
        this._childTextContentChangeSteps();
      }
    }
  }, {
    key: "parentNode",
    get: function get() {
      return domSymbolTree.parent(this);
    }
  }, {
    key: "nodeName",
    get: function get() {
      switch (this.nodeType) {
        case NODE_TYPE.ELEMENT_NODE:
          return this.tagName;

        case NODE_TYPE.ATTRIBUTE_NODE:
          return this._qualifiedName;

        case NODE_TYPE.TEXT_NODE:
          return "#text";

        case NODE_TYPE.CDATA_SECTION_NODE:
          return "#cdata-section";

        case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
          return this.target;

        case NODE_TYPE.COMMENT_NODE:
          return "#comment";

        case NODE_TYPE.DOCUMENT_NODE:
          return "#document";

        case NODE_TYPE.DOCUMENT_TYPE_NODE:
          return this.name;

        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
          return "#document-fragment";
      } // should never happen


      return null;
    }
  }, {
    key: "firstChild",
    get: function get() {
      return domSymbolTree.firstChild(this);
    } // https://dom.spec.whatwg.org/#connected
    // https://dom.spec.whatwg.org/#dom-node-isconnected

  }, {
    key: "isConnected",
    get: function get() {
      var root = shadowIncludingRoot(this);
      return root && root.nodeType === NODE_TYPE.DOCUMENT_NODE;
    }
  }, {
    key: "ownerDocument",
    get: function get() {
      return this.nodeType === NODE_TYPE.DOCUMENT_NODE ? null : this._ownerDocument;
    }
  }, {
    key: "lastChild",
    get: function get() {
      return domSymbolTree.lastChild(this);
    }
  }, {
    key: "childNodes",
    get: function get() {
      var _this2 = this;

      if (!this._childNodesList) {
        this._childNodesList = NodeList.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            return domSymbolTree.childrenToArray(_this2);
          }
        });
      } else {
        this._childNodesList._update();
      }

      return this._childNodesList;
    }
  }, {
    key: "nextSibling",
    get: function get() {
      return domSymbolTree.nextSibling(this);
    }
  }, {
    key: "previousSibling",
    get: function get() {
      return domSymbolTree.previousSibling(this);
    }
  }, {
    key: "parentElement",
    get: function get() {
      var parentNode = domSymbolTree.parent(this);
      return parentNode !== null && parentNode.nodeType === NODE_TYPE.ELEMENT_NODE ? parentNode : null;
    }
  }, {
    key: "baseURI",
    get: function get() {
      return documentBaseURLSerialized(this._ownerDocument);
    }
  }, {
    key: "nodeValue",
    get: function get() {
      switch (this.nodeType) {
        case NODE_TYPE.ATTRIBUTE_NODE:
          {
            return this._value;
          }

        case NODE_TYPE.TEXT_NODE:
        case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text

        case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
        case NODE_TYPE.COMMENT_NODE:
          {
            return this._data;
          }

        default:
          {
            return null;
          }
      }
    },
    set: function set(value) {
      if (value === null) {
        value = "";
      }

      switch (this.nodeType) {
        case NODE_TYPE.ATTRIBUTE_NODE:
          {
            setAnExistingAttributeValue(this, value);
            break;
          }

        case NODE_TYPE.TEXT_NODE:
        case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text

        case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
        case NODE_TYPE.COMMENT_NODE:
          {
            this.replaceData(0, this.length, value);
            break;
          }
      }
    } // https://dom.spec.whatwg.org/#dom-node-textcontent

  }, {
    key: "textContent",
    get: function get() {
      switch (this.nodeType) {
        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
        case NODE_TYPE.ELEMENT_NODE:
          {
            var text = "";
            var _iteratorNormalCompletion20 = true;
            var _didIteratorError20 = false;
            var _iteratorError20 = undefined;

            try {
              for (var _iterator20 = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                var child = _step20.value;

                if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {
                  text += child.nodeValue;
                }
              }
            } catch (err) {
              _didIteratorError20 = true;
              _iteratorError20 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
                  _iterator20["return"]();
                }
              } finally {
                if (_didIteratorError20) {
                  throw _iteratorError20;
                }
              }
            }

            return text;
          }

        case NODE_TYPE.ATTRIBUTE_NODE:
          {
            return this._value;
          }

        case NODE_TYPE.TEXT_NODE:
        case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text

        case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
        case NODE_TYPE.COMMENT_NODE:
          {
            return this._data;
          }

        default:
          {
            return null;
          }
      }
    },
    set: function set(value) {
      if (value === null) {
        value = "";
      }

      switch (this.nodeType) {
        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:
        case NODE_TYPE.ELEMENT_NODE:
          {
            // https://dom.spec.whatwg.org/#string-replace-all
            var nodeImpl = null;

            if (value !== "") {
              nodeImpl = this._ownerDocument.createTextNode(value);
            }

            this._replaceAll(nodeImpl);

            break;
          }

        case NODE_TYPE.ATTRIBUTE_NODE:
          {
            setAnExistingAttributeValue(this, value);
            break;
          }

        case NODE_TYPE.TEXT_NODE:
        case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text

        case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:
        case NODE_TYPE.COMMENT_NODE:
          {
            this.replaceData(0, this.length, value);
            break;
          }
      }
    }
  }]);

  return NodeImpl;
}(EventTargetImpl);

module.exports = {
  implementation: NodeImpl
};