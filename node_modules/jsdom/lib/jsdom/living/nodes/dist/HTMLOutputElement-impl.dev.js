"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMTokenList = require("../generated/DOMTokenList");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var DefaultConstraintValidationImpl = require("../constraint-validation/DefaultConstraintValidation-impl").implementation;

var _require = require("../../utils"),
    mixin = _require.mixin;

var _require2 = require("../helpers/form-controls"),
    getLabelsForLabelable = _require2.getLabelsForLabelable,
    formOwner = _require2.formOwner;

var HTMLOutputElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLOutputElementImpl, _HTMLElementImpl);

  function HTMLOutputElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLOutputElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLOutputElementImpl).call(this, globalObject, args, privateData));
    _this._labels = null;
    _this._defaultValue = "";
    _this._valueMode = "default";
    _this._customValidityErrorMessage = "";
    return _this;
  }

  _createClass(HTMLOutputElementImpl, [{
    key: "_attrModified",
    value: function _attrModified(name, value, oldValue) {
      _get(_getPrototypeOf(HTMLOutputElementImpl.prototype), "_attrModified", this).call(this, name, value, oldValue);

      if (name === "for" && this._htmlFor !== undefined) {
        this._htmlFor.attrModified();
      }
    }
  }, {
    key: "_barredFromConstraintValidationSpecialization",
    value: function _barredFromConstraintValidationSpecialization() {
      return true;
    }
  }, {
    key: "_formReset",
    value: function _formReset() {
      if (this._valueMode === "value") {
        this.textContent = this._defaultValue;
      }

      this._defaultValue = "";
      this._valueMode = "default";
    }
  }, {
    key: "htmlFor",
    get: function get() {
      if (this._htmlFor === undefined) {
        this._htmlFor = DOMTokenList.createImpl(this._globalObject, [], {
          element: this,
          attributeLocalName: "for"
        });
      }

      return this._htmlFor;
    }
  }, {
    key: "type",
    get: function get() {
      return "output";
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "value",
    get: function get() {
      return this.textContent;
    },
    set: function set(val) {
      this._valueMode = "value";
      this._defaultValue = this.textContent;
      this.textContent = val;
    }
  }, {
    key: "defaultValue",
    get: function get() {
      return this._valueMode === "default" ? this.textContent : this._defaultValue;
    },
    set: function set(val) {
      this._defaultValue = val;

      if (this._valueMode === "default") {
        this.textContent = val;
      }
    }
  }]);

  return HTMLOutputElementImpl;
}(HTMLElementImpl);

mixin(HTMLOutputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
module.exports = {
  implementation: HTMLOutputElementImpl
};