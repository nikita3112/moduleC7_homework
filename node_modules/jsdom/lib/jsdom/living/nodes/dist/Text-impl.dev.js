"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SlotableMixinImpl = require("./Slotable-impl").implementation;

var CharacterDataImpl = require("./CharacterData-impl").implementation;

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var DOMException = require("domexception/webidl2js-wrapper");

var NODE_TYPE = require("../node-type");

var _require2 = require("../../utils"),
    mixin = _require2.mixin; // https://dom.spec.whatwg.org/#text


var TextImpl =
/*#__PURE__*/
function (_CharacterDataImpl) {
  _inherits(TextImpl, _CharacterDataImpl);

  function TextImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, TextImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextImpl).call(this, globalObject, args, _objectSpread({
      data: args[0]
    }, privateData)));

    _this._initSlotableMixin();

    _this.nodeType = NODE_TYPE.TEXT_NODE;
    return _this;
  } // https://dom.spec.whatwg.org/#dom-text-splittext
  // https://dom.spec.whatwg.org/#concept-text-split


  _createClass(TextImpl, [{
    key: "splitText",
    value: function splitText(offset) {
      var length = this.length;

      if (offset > length) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      var count = length - offset;
      var newData = this.substringData(offset, count);

      var newNode = this._ownerDocument.createTextNode(newData);

      var parent = domSymbolTree.parent(this);

      if (parent !== null) {
        parent._insert(newNode, this.nextSibling);

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._referencedRanges[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var range = _step.value;
            var _start = range._start,
                _end = range._end;

            if (_start.node === this && _start.offset > offset) {
              range._setLiveRangeStart(newNode, _start.offset - offset);
            }

            if (_end.node === this && _end.offset > offset) {
              range._setLiveRangeEnd(newNode, _end.offset - offset);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var nodeIndex = domSymbolTree.index(this);
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = parent._referencedRanges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _range = _step2.value;
            var _start2 = _range._start,
                _end2 = _range._end;

            if (_start2.node === parent && _start2.offset === nodeIndex + 1) {
              _range._setLiveRangeStart(parent, _start2.offset + 1);
            }

            if (_end2.node === parent && _end2.offset === nodeIndex + 1) {
              _range._setLiveRangeEnd(parent, _end2.offset + 1);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      this.replaceData(offset, count, "");
      return newNode;
    } // https://dom.spec.whatwg.org/#dom-text-wholetext

  }, {
    key: "wholeText",
    get: function get() {
      var wholeText = this.textContent;
      var next;
      var current = this;

      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText = next.textContent + wholeText;
        current = next;
      }

      current = this;

      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText += next.textContent;
        current = next;
      }

      return wholeText;
    }
  }]);

  return TextImpl;
}(CharacterDataImpl);

mixin(TextImpl.prototype, SlotableMixinImpl.prototype);
module.exports = {
  implementation: TextImpl
};