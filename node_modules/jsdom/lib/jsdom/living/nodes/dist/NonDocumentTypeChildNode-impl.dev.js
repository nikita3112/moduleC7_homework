"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var NODE_TYPE = require("../node-type");

var NonDocumentTypeChildNodeImpl =
/*#__PURE__*/
function () {
  function NonDocumentTypeChildNodeImpl() {
    _classCallCheck(this, NonDocumentTypeChildNodeImpl);
  }

  _createClass(NonDocumentTypeChildNodeImpl, [{
    key: "nextElementSibling",
    get: function get() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = domSymbolTree.nextSiblingsIterator(this)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var sibling = _step.value;

          if (sibling.nodeType === NODE_TYPE.ELEMENT_NODE) {
            return sibling;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    }
  }, {
    key: "previousElementSibling",
    get: function get() {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = domSymbolTree.previousSiblingsIterator(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var sibling = _step2.value;

          if (sibling.nodeType === NODE_TYPE.ELEMENT_NODE) {
            return sibling;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return null;
    }
  }]);

  return NonDocumentTypeChildNodeImpl;
}();

module.exports = {
  implementation: NonDocumentTypeChildNodeImpl
};