"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var _require = require("../helpers/details"),
    isSummaryForParentDetails = _require.isSummaryForParentDetails;

var focusing = require("../helpers/focusing");

var _require2 = require("../helpers/namespaces"),
    HTML_NS = _require2.HTML_NS,
    SVG_NS = _require2.SVG_NS;

var DOMStringMap = require("../generated/DOMStringMap");

var tabIndexReflectAllowedHTMLElements = new Set(["a", "area", "button", "frame", "iframe", "input", "object", "select", "textarea"]);

var HTMLOrSVGElementImpl =
/*#__PURE__*/
function () {
  function HTMLOrSVGElementImpl() {
    _classCallCheck(this, HTMLOrSVGElementImpl);
  }

  _createClass(HTMLOrSVGElementImpl, [{
    key: "_initHTMLOrSVGElement",
    value: function _initHTMLOrSVGElement() {
      this._tabIndex = 0;
      this._dataset = DOMStringMap.createImpl(this._globalObject, [], {
        element: this
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!focusing.isFocusableAreaElement(this)) {
        return;
      }

      var ownerDocument = this._ownerDocument;
      var previous = ownerDocument._lastFocusedElement;

      if (previous === this) {
        return;
      }

      ownerDocument._lastFocusedElement = null;

      if (previous) {
        focusing.fireFocusEventWithTargetAdjustment("blur", previous, this);
        focusing.fireFocusEventWithTargetAdjustment("focusout", previous, this, {
          bubbles: true
        });
      } else {
        var frameElement = ownerDocument._defaultView._frameElement;

        if (frameElement) {
          var frameLastFocusedElement = frameElement.ownerDocument._lastFocusedElement;
          frameElement.ownerDocument._lastFocusedElement = null;
          focusing.fireFocusEventWithTargetAdjustment("blur", frameLastFocusedElement, null);
          focusing.fireFocusEventWithTargetAdjustment("focusout", frameLastFocusedElement, null, {
            bubbles: true
          });
          frameElement.ownerDocument._lastFocusedElement = frameElement;
        }
      }

      ownerDocument._lastFocusedElement = this;
      focusing.fireFocusEventWithTargetAdjustment("focus", this, previous);
      focusing.fireFocusEventWithTargetAdjustment("focusin", this, previous, {
        bubbles: true
      });
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {
        return;
      }

      this._ownerDocument._lastFocusedElement = null;
      focusing.fireFocusEventWithTargetAdjustment("blur", this, this._ownerDocument);
      focusing.fireFocusEventWithTargetAdjustment("focusout", this, this._ownerDocument, {
        bubbles: true
      });
      focusing.fireFocusEventWithTargetAdjustment("focus", this._ownerDocument, this);
      focusing.fireFocusEventWithTargetAdjustment("focusin", this._ownerDocument, this, {
        bubbles: true
      });
    }
  }, {
    key: "dataset",
    get: function get() {
      return this._dataset;
    } // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]

  }, {
    key: "tabIndex",
    get: function get() {
      if (!this.hasAttributeNS(null, "tabindex")) {
        if (this.namespaceURI === HTML_NS && (tabIndexReflectAllowedHTMLElements.has(this._localName) || this._localName === "summary" && isSummaryForParentDetails(this)) || this.namespaceURI === SVG_NS && this._localName === "a") {
          return 0;
        }

        return -1;
      }

      return conversions["long"](this.getAttributeNS(null, "tabindex"));
    },
    set: function set(value) {
      this.setAttributeNS(null, "tabindex", String(value));
    }
  }]);

  return HTMLOrSVGElementImpl;
}();

exports.implementation = HTMLOrSVGElementImpl;