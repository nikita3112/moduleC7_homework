"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/strings"),
    parseFloatingPointNumber = _require.parseFloatingPointNumber;

var _require2 = require("../helpers/form-controls"),
    getLabelsForLabelable = _require2.getLabelsForLabelable;

var HTMLMeterElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLMeterElementImpl, _HTMLElementImpl);

  function HTMLMeterElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLMeterElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLMeterElementImpl).call(this, globalObject, args, privateData));
    _this._labels = null;
    return _this;
  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum


  _createClass(HTMLMeterElementImpl, [{
    key: "_minimumValue",
    get: function get() {
      var min = this.getAttributeNS(null, "min");

      if (min !== null) {
        var parsed = parseFloatingPointNumber(min);

        if (parsed !== null) {
          return parsed;
        }
      }

      return 0;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum

  }, {
    key: "_maximumValue",
    get: function get() {
      var candidate = 1.0;
      var max = this.getAttributeNS(null, "max");

      if (max !== null) {
        var parsed = parseFloatingPointNumber(max);

        if (parsed !== null) {
          candidate = parsed;
        }
      }

      var minimumValue = this._minimumValue;
      return candidate >= minimumValue ? candidate : minimumValue;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual

  }, {
    key: "_actualValue",
    get: function get() {
      var candidate = 0;
      var value = this.getAttributeNS(null, "value");

      if (value !== null) {
        var parsed = parseFloatingPointNumber(value);

        if (parsed !== null) {
          candidate = parsed;
        }
      }

      var minimumValue = this._minimumValue;

      if (candidate < minimumValue) {
        return minimumValue;
      }

      var maximumValue = this._maximumValue;
      return candidate > maximumValue ? maximumValue : candidate;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low

  }, {
    key: "_lowBoundary",
    get: function get() {
      var minimumValue = this._minimumValue;
      var candidate = minimumValue;
      var low = this.getAttributeNS(null, "low");

      if (low !== null) {
        var parsed = parseFloatingPointNumber(low);

        if (parsed !== null) {
          candidate = parsed;
        }
      }

      if (candidate < minimumValue) {
        return minimumValue;
      }

      var maximumValue = this._maximumValue;
      return candidate > maximumValue ? maximumValue : candidate;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high

  }, {
    key: "_highBoundary",
    get: function get() {
      var maximumValue = this._maximumValue;
      var candidate = maximumValue;
      var high = this.getAttributeNS(null, "high");

      if (high !== null) {
        var parsed = parseFloatingPointNumber(high);

        if (parsed !== null) {
          candidate = parsed;
        }
      }

      var lowBoundary = this._lowBoundary;

      if (candidate < lowBoundary) {
        return lowBoundary;
      }

      return candidate > maximumValue ? maximumValue : candidate;
    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum

  }, {
    key: "_optimumPoint",
    get: function get() {
      var minimumValue = this._minimumValue;
      var maximumValue = this._maximumValue;
      var candidate = (minimumValue + maximumValue) / 2;
      var optimum = this.getAttributeNS(null, "optimum");

      if (optimum !== null) {
        var parsed = parseFloatingPointNumber(optimum);

        if (parsed !== null) {
          candidate = parsed;
        }
      }

      if (candidate < minimumValue) {
        return minimumValue;
      }

      return candidate > maximumValue ? maximumValue : candidate;
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "value",
    get: function get() {
      return this._actualValue;
    },
    set: function set(val) {
      this.setAttributeNS(null, "value", String(val));
    }
  }, {
    key: "min",
    get: function get() {
      return this._minimumValue;
    },
    set: function set(val) {
      this.setAttributeNS(null, "min", String(val));
    }
  }, {
    key: "max",
    get: function get() {
      return this._maximumValue;
    },
    set: function set(val) {
      this.setAttributeNS(null, "max", String(val));
    }
  }, {
    key: "low",
    get: function get() {
      return this._lowBoundary;
    },
    set: function set(val) {
      this.setAttributeNS(null, "low", String(val));
    }
  }, {
    key: "high",
    get: function get() {
      return this._highBoundary;
    },
    set: function set(val) {
      this.setAttributeNS(null, "high", String(val));
    }
  }, {
    key: "optimum",
    get: function get() {
      return this._optimumPoint;
    },
    set: function set(val) {
      this.setAttributeNS(null, "optimum", String(val));
    }
  }]);

  return HTMLMeterElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLMeterElementImpl
};