"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var _require = require("whatwg-url"),
    serializeURL = _require.serializeURL;

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require2 = require("../../utils"),
    Canvas = _require2.Canvas;

var _require3 = require("../helpers/document-base-url"),
    parseURLToResultingURLRecord = _require3.parseURLToResultingURLRecord;

var HTMLImageElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLImageElementImpl, _HTMLElementImpl);

  function HTMLImageElementImpl() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, HTMLImageElementImpl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HTMLImageElementImpl)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this._currentRequestState = "unavailable";
    return _this;
  }

  _createClass(HTMLImageElementImpl, [{
    key: "_attrModified",
    value: function _attrModified(name, value, oldVal) {
      // TODO: handle crossorigin
      if (name === "src" || (name === "srcset" || name === "width" || name === "sizes") && value !== oldVal) {
        this._updateTheImageData();
      }

      _get(_getPrototypeOf(HTMLImageElementImpl.prototype), "_attrModified", this).call(this, name, value, oldVal);
    }
  }, {
    key: "_updateTheImageData",
    // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data
    value: function _updateTheImageData() {
      var _this2 = this;

      var document = this._ownerDocument;

      if (!document._defaultView) {
        return;
      }

      if (!Canvas) {
        return;
      }

      if (!this._image) {
        this._image = new Canvas.Image();
      }

      this._currentSrc = null;
      this._currentRequestState = "unavailable";
      var srcAttributeValue = this.getAttributeNS(null, "src");
      var urlString = null;

      if (srcAttributeValue !== null && srcAttributeValue !== "") {
        var urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);

        if (urlRecord === null) {
          return;
        }

        urlString = serializeURL(urlRecord);
      }

      if (urlString !== null) {
        var resourceLoader = document._resourceLoader;
        var request;

        var onLoadImage = function onLoadImage(data) {
          var _request = request,
              response = _request.response;

          if (response && response.statusCode !== undefined && response.statusCode !== 200) {
            throw new Error("Status code: " + response.statusCode);
          }

          var error = null;

          _this2._image.onerror = function (err) {
            error = err;
          };

          _this2._image.src = data;

          if (error) {
            throw new Error(error);
          }

          _this2._currentSrc = srcAttributeValue;
          _this2._currentRequestState = "completely available";
        };

        request = resourceLoader.fetch(urlString, {
          element: this,
          onLoad: onLoadImage,
          onError: function onError() {
            _this2._currentRequestState = "broken";
          }
        });
      } else {
        this._image.src = "";
      }
    }
  }, {
    key: "_accept",
    get: function get() {
      return "image/png,image/*;q=0.8,*/*;q=0.5";
    }
  }, {
    key: "height",
    get: function get() {
      // Just like on browsers, if no width / height is defined, we fall back on the
      // dimensions of the internal image data.
      return this.hasAttributeNS(null, "height") ? conversions["unsigned long"](this.getAttributeNS(null, "height")) : this.naturalHeight;
    },
    set: function set(V) {
      this.setAttributeNS(null, "height", String(V));
    }
  }, {
    key: "width",
    get: function get() {
      return this.hasAttributeNS(null, "width") ? conversions["unsigned long"](this.getAttributeNS(null, "width")) : this.naturalWidth;
    },
    set: function set(V) {
      this.setAttributeNS(null, "width", String(V));
    }
  }, {
    key: "naturalHeight",
    get: function get() {
      return this._image ? this._image.naturalHeight : 0;
    }
  }, {
    key: "naturalWidth",
    get: function get() {
      return this._image ? this._image.naturalWidth : 0;
    }
  }, {
    key: "complete",
    get: function get() {
      var srcAttributeValue = this.getAttributeNS(null, "src");
      return srcAttributeValue === null || srcAttributeValue === "" || this._currentRequestState === "broken" || this._currentRequestState === "completely available";
    }
  }, {
    key: "currentSrc",
    get: function get() {
      return this._currentSrc || "";
    }
  }]);

  return HTMLImageElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLImageElementImpl
};