"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMException = require("domexception/webidl2js-wrapper");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var HTMLCollection = require("../generated/HTMLCollection");

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS;

var _require2 = require("../helpers/traversal"),
    childrenByLocalNames = _require2.childrenByLocalNames;

var _require3 = require("../helpers/internal-constants"),
    domSymbolTree = _require3.domSymbolTree;

var cellLocalNames = new Set(["td", "th"]);

var HTMLTableRowElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLTableRowElementImpl, _HTMLElementImpl);

  function HTMLTableRowElementImpl() {
    _classCallCheck(this, HTMLTableRowElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableRowElementImpl).apply(this, arguments));
  }

  _createClass(HTMLTableRowElementImpl, [{
    key: "insertCell",
    value: function insertCell(index) {
      var td = this._ownerDocument.createElement("TD");

      var cells = this.cells;

      if (index < -1 || index > cells.length) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      if (index === -1 || index === cells.length) {
        this._append(td);
      } else {
        var ref = cells.item(index);

        this._insert(td, ref);
      }

      return td;
    }
  }, {
    key: "deleteCell",
    value: function deleteCell(index) {
      var cells = this.cells;

      if (index < -1 || index >= cells.length) {
        throw DOMException.create(this._globalObject, ["The index is not in the allowed range.", "IndexSizeError"]);
      }

      if (index === -1) {
        if (cells.length === 0) {
          return;
        }

        index = cells.length - 1;
      }

      var td = cells.item(index);

      this._remove(td);
    }
  }, {
    key: "cells",
    get: function get() {
      var _this = this;

      if (!this._cells) {
        this._cells = HTMLCollection.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            return childrenByLocalNames(_this, cellLocalNames);
          }
        });
      }

      return this._cells;
    }
  }, {
    key: "rowIndex",
    get: function get() {
      var parent = this.parentElement;

      if (parent === null || parent.namespaceURI !== HTML_NS) {
        return -1;
      }

      var tableElement = parent;

      if (parent.localName === "thead" || parent.localName === "tbody" || parent.localName === "tfoot") {
        tableElement = parent.parentElement;
      }

      if (tableElement === null || tableElement.namespaceURI !== HTML_NS || tableElement.localName !== "table") {
        return -1;
      }

      return tableElement.rows.indexOf(this);
    }
  }, {
    key: "sectionRowIndex",
    get: function get() {
      var parent = domSymbolTree.parent(this);

      if (parent === null) {
        return -1;
      }

      var rows = parent.rows;

      if (!rows) {
        return -1;
      }

      return rows.indexOf(this);
    }
  }]);

  return HTMLTableRowElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLTableRowElementImpl
};