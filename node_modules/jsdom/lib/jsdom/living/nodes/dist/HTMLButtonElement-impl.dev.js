"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var DefaultConstraintValidationImpl = require("../constraint-validation/DefaultConstraintValidation-impl").implementation;

var _require = require("../../utils"),
    mixin = _require.mixin;

var _require2 = require("../helpers/form-controls"),
    isDisabled = _require2.isDisabled,
    formOwner = _require2.formOwner,
    getLabelsForLabelable = _require2.getLabelsForLabelable;

var _require3 = require("../helpers/strings"),
    asciiLowercase = _require3.asciiLowercase;

var HTMLButtonElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLButtonElementImpl, _HTMLElementImpl);

  function HTMLButtonElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLButtonElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLButtonElementImpl).call(this, globalObject, args, privateData));
    _this._customValidityErrorMessage = "";
    _this._labels = null;
    _this._hasActivationBehavior = true;
    return _this;
  }

  _createClass(HTMLButtonElementImpl, [{
    key: "_activationBehavior",
    value: function _activationBehavior() {
      var form = this.form;

      if (form && !isDisabled(this)) {
        if (this.type === "submit") {
          form._doSubmit();
        }

        if (this.type === "reset") {
          form._doReset();
        }
      }
    }
  }, {
    key: "_getValue",
    value: function _getValue() {
      var valueAttr = this.getAttributeNS(null, "value");
      return valueAttr === null ? "" : valueAttr;
    }
  }, {
    key: "_barredFromConstraintValidationSpecialization",
    value: function _barredFromConstraintValidationSpecialization() {
      return this.type === "reset" || this.type === "button";
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "type",
    get: function get() {
      var typeAttr = asciiLowercase(this.getAttributeNS(null, "type") || "");

      switch (typeAttr) {
        case "submit":
        case "reset":
        case "button":
          return typeAttr;

        default:
          return "submit";
      }
    },
    set: function set(v) {
      v = asciiLowercase(String(v));

      switch (v) {
        case "submit":
        case "reset":
        case "button":
          this.setAttributeNS(null, "type", v);
          break;

        default:
          this.setAttributeNS(null, "type", "submit");
          break;
      }
    }
  }]);

  return HTMLButtonElementImpl;
}(HTMLElementImpl);

mixin(HTMLButtonElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
module.exports = {
  implementation: HTMLButtonElementImpl
};