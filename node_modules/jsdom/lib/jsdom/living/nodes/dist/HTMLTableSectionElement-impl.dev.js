"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var _require = require("../helpers/traversal"),
    childrenByLocalName = _require.childrenByLocalName;

var HTMLCollection = require("../generated/HTMLCollection");

var DOMException = require("domexception/webidl2js-wrapper");

var HTMLTableSectionElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLTableSectionElementImpl, _HTMLElementImpl);

  function HTMLTableSectionElementImpl() {
    _classCallCheck(this, HTMLTableSectionElementImpl);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLTableSectionElementImpl).apply(this, arguments));
  }

  _createClass(HTMLTableSectionElementImpl, [{
    key: "insertRow",
    value: function insertRow(index) {
      if (index < -1 || index > this.rows.length) {
        throw DOMException.create(this._globalObject, ["Cannot insert a row at an index that is less than -1 or greater than the number of existing rows", "IndexSizeError"]);
      }

      var tr = this._ownerDocument.createElement("tr");

      if (index === -1 || index === this.rows.length) {
        this._append(tr);
      } else {
        var beforeTR = this.rows.item(index);

        this._insert(tr, beforeTR);
      }

      return tr;
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(index) {
      if (index < -1 || index >= this.rows.length) {
        throw DOMException.create(this._globalObject, ["Cannot delete a row at index ".concat(index, ", where no row exists"), "IndexSizeError"]);
      }

      if (index === -1) {
        if (this.rows.length > 0) {
          var tr = this.rows.item(this.rows.length - 1);

          this._remove(tr);
        }
      } else {
        var _tr = this.rows.item(index);

        this._remove(_tr);
      }
    }
  }, {
    key: "rows",
    get: function get() {
      var _this = this;

      if (!this._rows) {
        this._rows = HTMLCollection.createImpl(this._globalObject, [], {
          element: this,
          query: function query() {
            return childrenByLocalName(_this, "tr");
          }
        });
      }

      return this._rows;
    }
  }]);

  return HTMLTableSectionElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLTableSectionElementImpl
};