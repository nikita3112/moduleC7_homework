"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("../../utils"),
    mixin = _require.mixin;

var ElementImpl = require("./Element-impl").implementation;

var MouseEvent = require("../generated/MouseEvent");

var ElementCSSInlineStyleImpl = require("./ElementCSSInlineStyle-impl").implementation;

var GlobalEventHandlersImpl = require("./GlobalEventHandlers-impl").implementation;

var HTMLOrSVGElementImpl = require("./HTMLOrSVGElement-impl").implementation;

var _require2 = require("../helpers/traversal"),
    firstChildWithLocalName = _require2.firstChildWithLocalName;

var _require3 = require("../helpers/form-controls"),
    isDisabled = _require3.isDisabled;

var _require4 = require("../helpers/events"),
    fireAnEvent = _require4.fireAnEvent;

var _require5 = require("../helpers/strings"),
    asciiLowercase = _require5.asciiLowercase;

var HTMLElementImpl =
/*#__PURE__*/
function (_ElementImpl) {
  _inherits(HTMLElementImpl, _ElementImpl);

  function HTMLElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLElementImpl).call(this, globalObject, args, privateData));

    _this._initHTMLOrSVGElement();

    _this._initElementCSSInlineStyle();

    _this._initGlobalEvents();

    _this._clickInProgress = false; // <summary> uses HTMLElement and has activation behavior

    _this._hasActivationBehavior = _this._localName === "summary";
    return _this;
  }

  _createClass(HTMLElementImpl, [{
    key: "_activationBehavior",
    value: function _activationBehavior() {
      var parent = this.parentNode;

      if (parent && parent._localName === "details" && this === firstChildWithLocalName(parent, "summary")) {
        if (parent.hasAttributeNS(null, "open")) {
          parent.removeAttributeNS(null, "open");
        } else {
          parent.setAttributeNS(null, "open", "");
        }
      }
    } // https://html.spec.whatwg.org/multipage/dom.html#the-translate-attribute

  }, {
    key: "click",
    value: function click() {
      // https://html.spec.whatwg.org/multipage/interaction.html#dom-click
      // https://html.spec.whatwg.org/multipage/webappapis.html#fire-a-synthetic-mouse-event
      if (isDisabled(this)) {
        return;
      }

      if (this._clickInProgress) {
        return;
      }

      this._clickInProgress = true; // https://github.com/whatwg/html/issues/4451
      // https://github.com/whatwg/html/issues/4452

      fireAnEvent("click", this, MouseEvent, {
        bubbles: true,
        cancelable: true,
        composed: true,
        isTrusted: false,
        view: this.ownerDocument.defaultView
      });
      this._clickInProgress = false;
    }
  }, {
    key: "_attrModified",
    // Keep in sync with SVGElement. https://github.com/jsdom/jsdom/issues/2599
    value: function _attrModified(name, value, oldValue) {
      if (name === "style" && value !== oldValue && !this._settingCssText) {
        this._settingCssText = true;
        this._style.cssText = value;
        this._settingCssText = false;
      } else if (name.startsWith("on")) {
        this._globalEventChanged(name.substring(2));
      }

      _get(_getPrototypeOf(HTMLElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    }
  }, {
    key: "translate",
    get: function get() {
      var translateAttr = this.getAttributeNS(null, "translate");
      var translateAttrString = asciiLowercase(translateAttr || "");

      if (translateAttrString === "yes" || translateAttr && translateAttrString === "") {
        return true;
      } else if (translateAttrString === "no") {
        return false;
      }

      if (this === this.ownerDocument.documentElement) {
        return true;
      }

      return this.parentElement && this.parentElement.translate;
    },
    set: function set(value) {
      if (value === true) {
        this.setAttributeNS(null, "translate", "yes");
      } else {
        this.setAttributeNS(null, "translate", "no");
      }
    }
  }, {
    key: "draggable",
    get: function get() {
      var attributeValue = asciiLowercase(this.getAttributeNS(null, "draggable") || "");

      if (attributeValue === "true") {
        return true;
      } else if (attributeValue === "false") {
        return false;
      }

      return this._localName === "img" || this._localName === "a" && this.hasAttributeNS(null, "href");
    },
    set: function set(value) {
      this.setAttributeNS(null, "draggable", String(value));
    }
  }, {
    key: "dir",
    get: function get() {
      var dirValue = this.getAttributeNS(null, "dir");

      if (dirValue !== null) {
        dirValue = dirValue.toLowerCase();

        if (["ltr", "rtl", "auto"].includes(dirValue)) {
          return dirValue;
        }
      }

      return "";
    },
    set: function set(value) {
      this.setAttributeNS(null, "dir", value);
    }
  }, {
    key: "offsetParent",
    get: function get() {
      return null;
    }
  }, {
    key: "offsetTop",
    get: function get() {
      return 0;
    }
  }, {
    key: "offsetLeft",
    get: function get() {
      return 0;
    }
  }, {
    key: "offsetWidth",
    get: function get() {
      return 0;
    }
  }, {
    key: "offsetHeight",
    get: function get() {
      return 0;
    }
  }]);

  return HTMLElementImpl;
}(ElementImpl);

mixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);
mixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);
mixin(HTMLElementImpl.prototype, HTMLOrSVGElementImpl.prototype);
module.exports = {
  implementation: HTMLElementImpl
};