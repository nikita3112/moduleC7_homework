"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var vm = require("vm");

var whatwgEncoding = require("whatwg-encoding");

var MIMEType = require("whatwg-mimetype");

var _require = require("whatwg-url"),
    serializeURL = _require.serializeURL;

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var reportException = require("../helpers/runtime-script-errors");

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree,
    cloningSteps = _require2.cloningSteps;

var _require3 = require("../helpers/strings"),
    asciiLowercase = _require3.asciiLowercase;

var _require4 = require("../helpers/text"),
    childTextContent = _require4.childTextContent;

var _require5 = require("../helpers/events"),
    fireAnEvent = _require5.fireAnEvent;

var _require6 = require("../helpers/document-base-url"),
    parseURLToResultingURLRecord = _require6.parseURLToResultingURLRecord;

var nodeTypes = require("../node-type");

var jsMIMETypes = new Set(["application/ecmascript", "application/javascript", "application/x-ecmascript", "application/x-javascript", "text/ecmascript", "text/javascript", "text/javascript1.0", "text/javascript1.1", "text/javascript1.2", "text/javascript1.3", "text/javascript1.4", "text/javascript1.5", "text/jscript", "text/livescript", "text/x-ecmascript", "text/x-javascript"]);

var HTMLScriptElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLScriptElementImpl, _HTMLElementImpl);

  function HTMLScriptElementImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, HTMLScriptElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLScriptElementImpl).call(this, globalObject, args, privateData));
    _this._alreadyStarted = false;
    _this._parserInserted = false; // set by the parser

    return _this;
  }

  _createClass(HTMLScriptElementImpl, [{
    key: "_attach",
    value: function _attach() {
      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), "_attach", this).call(this); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main
      // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached
      // then. Instead, we'll let it eval here.


      if (!this._parserInserted || this._isMovingDueToDocumentWrite) {
        this._eval();
      }
    }
  }, {
    key: "_canRunScript",
    value: function _canRunScript() {
      var document = this._ownerDocument; // Equivalent to the spec's "scripting is disabled" check.

      if (!document._defaultView || document._defaultView._runScripts !== "dangerously" || document._scriptingDisabled) {
        return false;
      }

      return true;
    }
  }, {
    key: "_fetchExternalScript",
    value: function _fetchExternalScript() {
      var _this2 = this;

      var document = this._ownerDocument;
      var resourceLoader = document._resourceLoader;

      var defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, "charset")) || document._encoding;

      var request;

      if (!this._canRunScript()) {
        return;
      }

      var src = this.getAttributeNS(null, "src");
      var url = parseURLToResultingURLRecord(src, this._ownerDocument);

      if (url === null) {
        return;
      }

      var urlString = serializeURL(url);

      var onLoadExternalScript = function onLoadExternalScript(data) {
        var _request = request,
            response = _request.response;
        var contentType;

        if (response && response.statusCode !== undefined && response.statusCode >= 400) {
          throw new Error("Status code: " + response.statusCode);
        }

        if (response) {
          contentType = MIMEType.parse(response.headers["content-type"]) || new MIMEType("text/plain");
        }

        var encoding = whatwgEncoding.getBOMEncoding(data) || contentType && whatwgEncoding.labelToName(contentType.parameters.get("charset")) || defaultEncoding;
        var script = whatwgEncoding.decode(data, encoding);

        _this2._innerEval(script, urlString);
      };

      request = resourceLoader.fetch(urlString, {
        element: this,
        onLoad: onLoadExternalScript
      });
    }
  }, {
    key: "_fetchInternalScript",
    value: function _fetchInternalScript() {
      var _this3 = this;

      var document = this._ownerDocument;

      if (!this._canRunScript()) {
        return;
      }

      document._queue.push(null, function () {
        _this3._innerEval(_this3.text, document.URL);

        fireAnEvent("load", _this3);
      }, null, false, this);
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name, value, oldValue) {
      _get(_getPrototypeOf(HTMLScriptElementImpl.prototype), "_attrModified", this).call(this, name, value, oldValue);

      if (this._attached && !this._startedEval && name === "src" && oldValue === null && value !== null) {
        this._fetchExternalScript();
      }
    }
  }, {
    key: "_poppedOffStackOfOpenElements",
    value: function _poppedOffStackOfOpenElements() {
      // This seems to roughly correspond to
      // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly
      // don't implement the full semantics.
      this._eval();
    } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way
    // to go before it's aligned.

  }, {
    key: "_eval",
    value: function _eval() {
      if (this._alreadyStarted) {
        return;
      } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with
      // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419


      if (!this.hasAttributeNS(null, "src") && this.text.length === 0) {
        return;
      }

      if (!this._attached) {
        return;
      }

      var scriptBlocksTypeString = this._getTypeString();

      var type = getType(scriptBlocksTypeString);

      if (type !== "classic") {
        // TODO: implement modules, and then change the check to `type === null`.
        return;
      }

      this._alreadyStarted = true; // TODO: implement nomodule here, **but only after we support modules**.
      // At this point we completely depart from the spec.

      if (this.hasAttributeNS(null, "src")) {
        this._fetchExternalScript();
      } else {
        this._fetchInternalScript();
      }
    }
  }, {
    key: "_innerEval",
    value: function _innerEval(text, filename) {
      this._ownerDocument._writeAfterElement = this;
      processJavaScript(this, text, filename);
      delete this._ownerDocument._writeAfterElement;
    }
  }, {
    key: "_getTypeString",
    value: function _getTypeString() {
      var typeAttr = this.getAttributeNS(null, "type");
      var langAttr = this.getAttributeNS(null, "language");

      if (typeAttr === "") {
        return "text/javascript";
      }

      if (typeAttr === null && langAttr === "") {
        return "text/javascript";
      }

      if (typeAttr === null && langAttr === null) {
        return "text/javascript";
      }

      if (typeAttr !== null) {
        return typeAttr.trim();
      }

      if (langAttr !== null) {
        return "text/" + langAttr;
      }

      return null;
    }
  }, {
    key: cloningSteps,
    // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model
    value: function value(copy, node) {
      copy._alreadyStarted = node._alreadyStarted;
    }
  }, {
    key: "text",
    get: function get() {
      return childTextContent(this);
    },
    set: function set(text) {
      this.textContent = text;
    }
  }]);

  return HTMLScriptElementImpl;
}(HTMLElementImpl);

function processJavaScript(element, code, filename) {
  var document = element.ownerDocument;
  var window = document && document._global;

  if (window) {
    document._currentScript = element;
    var lineOffset = 0;

    if (!element.hasAttributeNS(null, "src")) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = domSymbolTree.childrenIterator(element)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;

          if (child.nodeType === nodeTypes.TEXT_NODE) {
            if (child.sourceCodeLocation) {
              lineOffset = child.sourceCodeLocation.startLine - 1;
            }

            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    try {
      vm.runInContext(code, window, {
        filename: filename,
        lineOffset: lineOffset,
        displayErrors: false
      });
    } catch (e) {
      reportException(window, e, filename);
    } finally {
      document._currentScript = null;
    }
  }
}

function getType(typeString) {
  var lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.
  // That is, the type="" attribute is not really related to MIME types at all.

  if (jsMIMETypes.has(lowercased)) {
    return "classic";
  }

  if (lowercased === "module") {
    return "module";
  }

  return null;
}

module.exports = {
  implementation: HTMLScriptElementImpl
};