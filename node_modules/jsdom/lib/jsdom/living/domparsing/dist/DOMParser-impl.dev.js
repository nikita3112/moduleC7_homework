"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("../../browser/parser"),
    parseIntoDocument = _require.parseIntoDocument;

var Document = require("../generated/Document");

exports.implementation =
/*#__PURE__*/
function () {
  function DOMParserImpl(globalObject) {
    _classCallCheck(this, DOMParserImpl);

    this._globalObject = globalObject;
  }

  _createClass(DOMParserImpl, [{
    key: "parseFromString",
    value: function parseFromString(string, contentType) {
      switch (String(contentType)) {
        case "text/html":
          {
            return this.createScriptingDisabledDocument("html", contentType, string);
          }

        case "text/xml":
        case "application/xml":
        case "application/xhtml+xml":
        case "image/svg+xml":
          {
            try {
              return this.createScriptingDisabledDocument("xml", contentType, string);
            } catch (error) {
              var document = this.createScriptingDisabledDocument("xml", contentType);
              var element = document.createElementNS("http://www.mozilla.org/newlayout/xml/parsererror.xml", "parsererror");
              element.textContent = error.message;
              document.appendChild(element);
              return document;
            }
          }

        default:
          throw new TypeError("Invalid contentType");
      }
    }
  }, {
    key: "createScriptingDisabledDocument",
    value: function createScriptingDisabledDocument(parsingMode, contentType, string) {
      var document = Document.createImpl(this._globalObject, [], {
        options: {
          parsingMode: parsingMode,
          encoding: "UTF-8",
          contentType: contentType,
          readyState: "complete",
          scriptingDisabled: true // TODO: somehow set URL to active document's URL

        }
      });

      if (string !== undefined) {
        parseIntoDocument(string, document);
      }

      return document;
    }
  }]);

  return DOMParserImpl;
}();