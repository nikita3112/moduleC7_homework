"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var idlUtils = require("../generated/utils");

var UIEventInit = require("../generated/UIEventInit");

var EventImpl = require("./Event-impl").implementation; // Until webidl2js gains support for checking for Window, this would have to do.


function isWindow(val) {
  if (_typeof(val) !== "object") {
    return false;
  }

  var wrapper = idlUtils.wrapperForImpl(val);

  if (_typeof(wrapper) === "object") {
    return wrapper === wrapper._globalProxy;
  } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global
  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,
  // some internal usage call this constructor with the actual global proxy.


  return isWindow(idlUtils.implForWrapper(val));
}

var UIEventImpl =
/*#__PURE__*/
function (_EventImpl) {
  _inherits(UIEventImpl, _EventImpl);

  function UIEventImpl(globalObject, args, privateData) {
    _classCallCheck(this, UIEventImpl);

    var eventInitDict = args[1]; // undefined check included so that we can omit the property in internal usage.

    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {
      if (!isWindow(eventInitDict.view)) {
        throw new TypeError("Failed to construct '".concat((this instanceof UIEventImpl ? this.constructor : void 0).name.replace(/Impl$/, ""), "': member view is not of ") + "type Window.");
      }
    }

    return _possibleConstructorReturn(this, _getPrototypeOf(UIEventImpl).call(this, globalObject, args, privateData));
  }

  _createClass(UIEventImpl, [{
    key: "initUIEvent",
    value: function initUIEvent(type, bubbles, cancelable, view, detail) {
      if (view !== null) {
        if (!isWindow(view)) {
          throw new TypeError("Failed to execute 'initUIEvent' on '".concat(this.constructor.name.replace(/Impl$/, ""), "': ") + "parameter 4 is not of type 'Window'.");
        }
      }

      if (this._dispatchFlag) {
        return;
      }

      this.initEvent(type, bubbles, cancelable);
      this.view = view;
      this.detail = detail;
    }
  }]);

  return UIEventImpl;
}(EventImpl);

UIEventImpl.defaultInit = UIEventInit.convert(undefined);
module.exports = {
  implementation: UIEventImpl
};