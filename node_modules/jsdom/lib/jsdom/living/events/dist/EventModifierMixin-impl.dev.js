"use strict"; // This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the
// same way, its implementation is shared here.

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EventModifierMixinImpl =
/*#__PURE__*/
function () {
  function EventModifierMixinImpl() {
    _classCallCheck(this, EventModifierMixinImpl);
  }

  _createClass(EventModifierMixinImpl, [{
    key: "getModifierState",
    // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.
    // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll
    // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones
    // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since
    // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do
    // extra checking for validity.
    value: function getModifierState(keyArg) {
      return Boolean(this["modifier".concat(keyArg)]);
    }
  }]);

  return EventModifierMixinImpl;
}();

exports.implementation = EventModifierMixinImpl;