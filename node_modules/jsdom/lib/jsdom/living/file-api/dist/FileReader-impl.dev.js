"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var whatwgEncoding = require("whatwg-encoding");

var MIMEType = require("whatwg-mimetype");

var DOMException = require("domexception/webidl2js-wrapper");

var EventTargetImpl = require("../events/EventTarget-impl").implementation;

var ProgressEvent = require("../generated/ProgressEvent");

var _require = require("../helpers/create-event-accessor"),
    setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;

var _require2 = require("../helpers/events"),
    fireAnEvent = _require2.fireAnEvent;

var _require3 = require("../helpers/binary-data"),
    copyToArrayBufferInNewRealm = _require3.copyToArrayBufferInNewRealm;

var READY_STATES = Object.freeze({
  EMPTY: 0,
  LOADING: 1,
  DONE: 2
});
var events = ["loadstart", "progress", "load", "abort", "error", "loadend"];

var FileReaderImpl =
/*#__PURE__*/
function (_EventTargetImpl) {
  _inherits(FileReaderImpl, _EventTargetImpl);

  function FileReaderImpl(globalObject, args, privateData) {
    var _this;

    _classCallCheck(this, FileReaderImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileReaderImpl).call(this, globalObject, args, privateData));
    _this.error = null;
    _this.readyState = READY_STATES.EMPTY;
    _this.result = null;
    _this._globalObject = globalObject;
    _this._ownerDocument = globalObject.document;
    _this._terminated = false;
    return _this;
  }

  _createClass(FileReaderImpl, [{
    key: "readAsArrayBuffer",
    value: function readAsArrayBuffer(file) {
      this._readFile(file, "buffer");
    }
  }, {
    key: "readAsBinaryString",
    value: function readAsBinaryString(file) {
      this._readFile(file, "binaryString");
    }
  }, {
    key: "readAsDataURL",
    value: function readAsDataURL(file) {
      this._readFile(file, "dataURL");
    }
  }, {
    key: "readAsText",
    value: function readAsText(file, encoding) {
      this._readFile(file, "text", whatwgEncoding.labelToName(encoding) || "UTF-8");
    }
  }, {
    key: "abort",
    value: function abort() {
      if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {
        this.result = null;
        return;
      }

      if (this.readyState === READY_STATES.LOADING) {
        this.readyState = READY_STATES.DONE;
        this.result = null;
      }

      this._terminated = true;

      this._fireProgressEvent("abort");

      this._fireProgressEvent("loadend");
    }
  }, {
    key: "_fireProgressEvent",
    value: function _fireProgressEvent(name, props) {
      fireAnEvent(name, this, ProgressEvent, props);
    }
  }, {
    key: "_readFile",
    value: function _readFile(file, format, encoding) {
      var _this2 = this;

      if (this.readyState === READY_STATES.LOADING) {
        throw DOMException.create(this._globalObject, ["The object is in an invalid state.", "InvalidStateError"]);
      }

      this.readyState = READY_STATES.LOADING;
      setImmediate(function () {
        if (_this2._terminated) {
          _this2._terminated = false;
          return;
        }

        _this2._fireProgressEvent("loadstart");

        var data = file._buffer;

        if (!data) {
          data = Buffer.alloc(0);
        }

        _this2._fireProgressEvent("progress", {
          lengthComputable: !isNaN(file.size),
          total: file.size,
          loaded: data.length
        });

        setImmediate(function () {
          if (_this2._terminated) {
            _this2._terminated = false;
            return;
          }

          switch (format) {
            default:
            case "buffer":
              {
                _this2.result = copyToArrayBufferInNewRealm(data, _this2._globalObject);
                break;
              }

            case "binaryString":
              {
                _this2.result = data.toString("binary");
                break;
              }

            case "dataURL":
              {
                // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.
                var contentType = MIMEType.parse(file.type) || "application/octet-stream";
                _this2.result = "data:".concat(contentType, ";base64,").concat(data.toString("base64"));
                break;
              }

            case "text":
              {
                _this2.result = whatwgEncoding.decode(data, encoding);
                break;
              }
          }

          _this2.readyState = READY_STATES.DONE;

          _this2._fireProgressEvent("load");

          _this2._fireProgressEvent("loadend");
        });
      });
    }
  }]);

  return FileReaderImpl;
}(EventTargetImpl);

setupForSimpleEventAccessors(FileReaderImpl.prototype, events);
exports.implementation = FileReaderImpl;