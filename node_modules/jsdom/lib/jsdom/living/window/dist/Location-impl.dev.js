"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var whatwgURL = require("whatwg-url");

var DOMException = require("domexception/webidl2js-wrapper");

var _require = require("../helpers/document-base-url"),
    documentBaseURL = _require.documentBaseURL,
    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;

var _require2 = require("./navigation"),
    navigate = _require2.navigate; // Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just
// use the document base URL. The difference matters in the case of cross-frame calls.


exports.implementation =
/*#__PURE__*/
function () {
  function LocationImpl(globalObject, args, privateData) {
    _classCallCheck(this, LocationImpl);

    this._relevantDocument = privateData.relevantDocument;
    this.url = null;
    this._globalObject = globalObject;
  }

  _createClass(LocationImpl, [{
    key: "_locationObjectSetterNavigate",
    value: function _locationObjectSetterNavigate(url) {
      // Not implemented: extra steps here to determine replacement flag.
      return this._locationObjectNavigate(url);
    }
  }, {
    key: "_locationObjectNavigate",
    value: function _locationObjectNavigate(url) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$replacement = _ref.replacement,
          replacement = _ref$replacement === void 0 ? false : _ref$replacement;

      // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.
      navigate(this._relevantDocument._defaultView, url, {
        replacement: replacement,
        exceptionsEnabled: true
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.href;
    }
  }, {
    key: "assign",
    value: function assign(url) {
      // Should be entry settings object; oh well
      var parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);

      if (parsedURL === null) {
        throw DOMException.create(this._globalObject, ["Could not resolve the given string \"".concat(url, "\" relative to the base URL \"").concat(this._relevantDocument.URL, "\""), "SyntaxError"]);
      }

      this._locationObjectNavigate(parsedURL);
    }
  }, {
    key: "replace",
    value: function replace(url) {
      // Should be entry settings object; oh well
      var parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);

      if (parsedURL === null) {
        throw DOMException.create(this._globalObject, ["Could not resolve the given string \"".concat(url, "\" relative to the base URL \"").concat(this._relevantDocument.URL, "\""), "SyntaxError"]);
      }

      this._locationObjectNavigate(parsedURL, {
        replacement: true
      });
    }
  }, {
    key: "reload",
    value: function reload() {
      var flags = {
        replace: true,
        reloadTriggered: true,
        exceptionsEnabled: true
      };
      navigate(this._relevantDocument._defaultView, this._url, flags);
    }
  }, {
    key: "_url",
    get: function get() {
      return this._relevantDocument._URL;
    }
  }, {
    key: "href",
    get: function get() {
      return whatwgURL.serializeURL(this._url);
    },
    set: function set(v) {
      var newURL = whatwgURL.parseURL(v, {
        baseURL: documentBaseURL(this._relevantDocument)
      });

      if (newURL === null) {
        throw new TypeError("Could not parse \"".concat(v, "\" as a URL"));
      }

      this._locationObjectSetterNavigate(newURL);
    }
  }, {
    key: "origin",
    get: function get() {
      return whatwgURL.serializeURLOrigin(this._url);
    }
  }, {
    key: "protocol",
    get: function get() {
      return this._url.scheme + ":";
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);
      var possibleFailure = whatwgURL.basicURLParse(v + ":", {
        url: copyURL,
        stateOverride: "scheme start"
      });

      if (possibleFailure === null) {
        throw new TypeError("Could not parse the URL after setting the procol to \"".concat(v, "\""));
      }

      if (copyURL.scheme !== "http" && copyURL.scheme !== "https") {
        return;
      }

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "host",
    get: function get() {
      var url = this._url;

      if (url.host === null) {
        return "";
      }

      if (url.port === null) {
        return whatwgURL.serializeHost(url.host);
      }

      return whatwgURL.serializeHost(url.host) + ":" + whatwgURL.serializeInteger(url.port);
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (copyURL.cannotBeABaseURL) {
        return;
      }

      whatwgURL.basicURLParse(v, {
        url: copyURL,
        stateOverride: "host"
      });

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "hostname",
    get: function get() {
      if (this._url.host === null) {
        return "";
      }

      return whatwgURL.serializeHost(this._url.host);
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (copyURL.cannotBeABaseURL) {
        return;
      }

      whatwgURL.basicURLParse(v, {
        url: copyURL,
        stateOverride: "hostname"
      });

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "port",
    get: function get() {
      if (this._url.port === null) {
        return "";
      }

      return whatwgURL.serializeInteger(this._url.port);
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === "file") {
        return;
      }

      whatwgURL.basicURLParse(v, {
        url: copyURL,
        stateOverride: "port"
      });

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "pathname",
    get: function get() {
      var url = this._url;

      if (url.cannotBeABaseURL) {
        return url.path[0];
      }

      return "/" + url.path.join("/");
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (copyURL.cannotBeABaseURL) {
        return;
      }

      copyURL.path = [];
      whatwgURL.basicURLParse(v, {
        url: copyURL,
        stateOverride: "path start"
      });

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "search",
    get: function get() {
      if (this._url.query === null || this._url.query === "") {
        return "";
      }

      return "?" + this._url.query;
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (v === "") {
        copyURL.query = null;
      } else {
        var input = v[0] === "?" ? v.substring(1) : v;
        copyURL.query = "";
        whatwgURL.basicURLParse(input, {
          url: copyURL,
          stateOverride: "query",
          encodingOverride: this._relevantDocument.charset
        });
      }

      this._locationObjectSetterNavigate(copyURL);
    }
  }, {
    key: "hash",
    get: function get() {
      if (this._url.fragment === null || this._url.fragment === "") {
        return "";
      }

      return "#" + this._url.fragment;
    },
    set: function set(v) {
      var copyURL = Object.assign({}, this._url);

      if (copyURL.scheme === "javascript") {
        return;
      }

      if (v === "") {
        copyURL.fragment = null;
      } else {
        var input = v[0] === "#" ? v.substring(1) : v;
        copyURL.fragment = "";
        whatwgURL.basicURLParse(input, {
          url: copyURL,
          stateOverride: "fragment"
        });
      }

      this._locationObjectSetterNavigate(copyURL);
    }
  }]);

  return LocationImpl;
}();