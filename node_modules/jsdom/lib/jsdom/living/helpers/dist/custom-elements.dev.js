"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DOMException = require("domexception/webidl2js-wrapper");

var isPotentialCustomElementName = require("is-potential-custom-element-name");

var NODE_TYPE = require("../node-type");

var _require = require("./namespaces"),
    HTML_NS = _require.HTML_NS;

var _require2 = require("./shadow-dom"),
    shadowIncludingRoot = _require2.shadowIncludingRoot;

var reportException = require("./runtime-script-errors");

var _require3 = require("../generated/utils"),
    implForWrapper = _require3.implForWrapper,
    wrapperForImpl = _require3.wrapperForImpl; // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element-reactions-stack


var CEReactionsStack =
/*#__PURE__*/
function () {
  function CEReactionsStack() {
    _classCallCheck(this, CEReactionsStack);

    this._stack = []; // https://html.spec.whatwg.org/multipage/custom-elements.html#backup-element-queue

    this.backupElementQueue = []; // https://html.spec.whatwg.org/multipage/custom-elements.html#processing-the-backup-element-queue

    this.processingBackupElementQueue = false;
  }

  _createClass(CEReactionsStack, [{
    key: "push",
    value: function push(elementQueue) {
      this._stack.push(elementQueue);
    }
  }, {
    key: "pop",
    value: function pop() {
      return this._stack.pop();
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this._stack.length === 0;
    }
  }, {
    key: "currentElementQueue",
    get: function get() {
      var _stack = this._stack;
      return _stack[_stack.length - 1];
    }
  }]);

  return CEReactionsStack;
}(); // In theory separate cross-origin Windows created by separate JSDOM instances could have separate stacks. But, we would
// need to implement the whole agent architecture. Which is kind of questionable given that we don't run our Windows in
// their own separate threads, which is what agents are meant to represent.


var customElementReactionsStack = new CEReactionsStack(); // https://html.spec.whatwg.org/multipage/custom-elements.html#cereactions

function ceReactionsPreSteps() {
  customElementReactionsStack.push([]);
}

function ceReactionsPostSteps() {
  var queue = customElementReactionsStack.pop();
  invokeCEReactions(queue);
}

var RESTRICTED_CUSTOM_ELEMENT_NAME = new Set(["annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph"]); // https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name

function isValidCustomElementName(name) {
  if (RESTRICTED_CUSTOM_ELEMENT_NAME.has(name)) {
    return false;
  }

  return isPotentialCustomElementName(name);
} // https://html.spec.whatwg.org/multipage/custom-elements.html#concept-upgrade-an-element


function upgradeElement(definition, element) {
  if (element._ceState !== "undefined" || element._ceState === "uncustomized") {
    return;
  }

  element._ceDefinition = definition;
  element._ceState = "failed";
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = element._attributeList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var attribute = _step.value;
      var _localName = attribute._localName,
          _namespace = attribute._namespace,
          _value = attribute._value;
      enqueueCECallbackReaction(element, "attributeChangedCallback", [_localName, null, _value, _namespace]);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (shadowIncludingRoot(element).nodeType === NODE_TYPE.DOCUMENT_NODE) {
    enqueueCECallbackReaction(element, "connectedCallback", []);
  }

  definition.constructionStack.push(element);
  var constructionStack = definition.constructionStack,
      C = definition.ctor;
  var constructionError;

  try {
    if (definition.disableShadow === true && element._shadowRoot !== null) {
      throw DOMException.create(element._globalObject, ["Can't upgrade a custom element with a shadow root if shadow is disabled", "NotSupportedError"]);
    }

    var constructionResult = new C();
    var constructionResultImpl = implForWrapper(constructionResult);

    if (constructionResultImpl !== element) {
      throw new TypeError("Invalid custom element constructor return value");
    }
  } catch (error) {
    constructionError = error;
  }

  constructionStack.pop();

  if (constructionError !== undefined) {
    element._ceDefinition = null;
    element._ceReactionQueue = [];
    throw constructionError;
  }

  element._ceState = "custom";
} // https://html.spec.whatwg.org/#concept-try-upgrade


function tryUpgradeElement(element) {
  var _ownerDocument = element._ownerDocument,
      _namespaceURI = element._namespaceURI,
      _localName = element._localName,
      _isValue = element._isValue;
  var definition = lookupCEDefinition(_ownerDocument, _namespaceURI, _localName, _isValue);

  if (definition !== null) {
    enqueueCEUpgradeReaction(element, definition);
  }
} // https://html.spec.whatwg.org/#look-up-a-custom-element-definition


function lookupCEDefinition(document, namespace, localName, isValue) {
  var definition = null;

  if (namespace !== HTML_NS) {
    return definition;
  }

  if (!document._defaultView) {
    return definition;
  }

  var registry = implForWrapper(document._globalObject.customElements);

  var definitionByName = registry._customElementDefinitions.find(function (def) {
    return def.name === def.localName && def.localName === localName;
  });

  if (definitionByName !== undefined) {
    return definitionByName;
  }

  var definitionByIs = registry._customElementDefinitions.find(function (def) {
    return def.name === isValue && def.localName === localName;
  });

  if (definitionByIs !== undefined) {
    return definitionByIs;
  }

  return definition;
} // https://html.spec.whatwg.org/multipage/custom-elements.html#invoke-custom-element-reactions


function invokeCEReactions(elementQueue) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = elementQueue[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var element = _step2.value;
      var reactions = element._ceReactionQueue;

      try {
        while (reactions.length > 0) {
          var reaction = reactions.shift();

          switch (reaction.type) {
            case "upgrade":
              upgradeElement(reaction.definition, element);
              break;

            case "callback":
              reaction.callback.apply(wrapperForImpl(element), reaction.args);
              break;
          }
        }
      } catch (error) {
        reportException(element._globalObject, error);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
} // https://html.spec.whatwg.org/multipage/custom-elements.html#enqueue-an-element-on-the-appropriate-element-queue


function enqueueElementOnAppropriateElementQueue(element) {
  if (customElementReactionsStack.isEmpty()) {
    customElementReactionsStack.backupElementQueue.push(element);

    if (customElementReactionsStack.processingBackupElementQueue) {
      return;
    }

    customElementReactionsStack.processingBackupElementQueue = true;
    Promise.resolve().then(function () {
      var elementQueue = customElementReactionsStack.backupElementQueue;
      invokeCEReactions(elementQueue);
      customElementReactionsStack.processingBackupElementQueue = false;
    });
  } else {
    customElementReactionsStack.currentElementQueue.push(element);
  }
} // https://html.spec.whatwg.org/multipage/custom-elements.html#enqueue-a-custom-element-callback-reaction


function enqueueCECallbackReaction(element, callbackName, args) {
  var _element$_ceDefinitio = element._ceDefinition,
      lifecycleCallbacks = _element$_ceDefinitio.lifecycleCallbacks,
      observedAttributes = _element$_ceDefinitio.observedAttributes;
  var callback = lifecycleCallbacks[callbackName];

  if (callback === null) {
    return;
  }

  if (callbackName === "attributeChangedCallback") {
    var attributeName = args[0];

    if (!observedAttributes.includes(attributeName)) {
      return;
    }
  }

  element._ceReactionQueue.push({
    type: "callback",
    callback: callback,
    args: args
  });

  enqueueElementOnAppropriateElementQueue(element);
} // https://html.spec.whatwg.org/#enqueue-a-custom-element-upgrade-reaction


function enqueueCEUpgradeReaction(element, definition) {
  element._ceReactionQueue.push({
    type: "upgrade",
    definition: definition
  });

  enqueueElementOnAppropriateElementQueue(element);
}

module.exports = {
  customElementReactionsStack: customElementReactionsStack,
  ceReactionsPreSteps: ceReactionsPreSteps,
  ceReactionsPostSteps: ceReactionsPostSteps,
  isValidCustomElementName: isValidCustomElementName,
  upgradeElement: upgradeElement,
  tryUpgradeElement: tryUpgradeElement,
  lookupCEDefinition: lookupCEDefinition,
  enqueueCEUpgradeReaction: enqueueCEUpgradeReaction,
  enqueueCECallbackReaction: enqueueCECallbackReaction,
  invokeCEReactions: invokeCEReactions
};