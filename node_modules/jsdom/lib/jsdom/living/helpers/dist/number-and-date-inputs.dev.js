"use strict";

var _require = require("./strings"),
    parseFloatingPointNumber = _require.parseFloatingPointNumber;

var _require2 = require("./dates-and-times"),
    parseDateString = _require2.parseDateString,
    parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,
    parseMonthString = _require2.parseMonthString,
    parseTimeString = _require2.parseTimeString,
    parseWeekString = _require2.parseWeekString,
    serializeDate = _require2.serializeDate,
    serializeMonth = _require2.serializeMonth,
    serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime,
    serializeTime = _require2.serializeTime,
    serializeWeek = _require2.serializeWeek,
    parseDateAsWeek = _require2.parseDateAsWeek; // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].


function getUTCMs(year) {
  var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

  if (year > 99 || year < 0) {
    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);
  }

  var d = new Date(0);
  d.setUTCFullYear(year);
  d.setUTCMonth(month - 1);
  d.setUTCDate(day);
  d.setUTCHours(hour);
  d.setUTCMinutes(minute);
  d.setUTCSeconds(second, millisecond);
  return d.valueOf();
}

var dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];
exports.convertStringToNumberByType = {
  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number
  date: function date(input) {
    var date = parseDateString(input);

    if (date === null) {
      return null;
    }

    return getUTCMs(date.year, date.month, date.day);
  },
  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number
  month: function month(input) {
    var date = parseMonthString(input);

    if (date === null) {
      return null;
    }

    return (date.year - 1970) * 12 + (date.month - 1);
  },
  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number
  week: function week(input) {
    var date = parseWeekString(input);

    if (date === null) {
      return null;
    }

    var dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.

    var dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];
    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);
  },
  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number
  time: function time(input) {
    var time = parseTimeString(input);

    if (time === null) {
      return null;
    }

    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;
  },
  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number
  "datetime-local": function datetimeLocal(input) {
    var dateAndTime = parseLocalDateAndTimeString(input);

    if (dateAndTime === null) {
      return null;
    }

    var _dateAndTime$date = dateAndTime.date,
        year = _dateAndTime$date.year,
        month = _dateAndTime$date.month,
        day = _dateAndTime$date.day,
        _dateAndTime$time = dateAndTime.time,
        hour = _dateAndTime$time.hour,
        minute = _dateAndTime$time.minute,
        second = _dateAndTime$time.second,
        millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.

    return getUTCMs(year, month, day, hour, minute, second, millisecond);
  },
  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number
  number: parseFloatingPointNumber,
  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number
  range: parseFloatingPointNumber
};
exports.convertStringToDateByType = {
  date: function date(input) {
    var parsedInput = exports.convertStringToNumberByType.date(input);
    return parsedInput === null ? null : new Date(parsedInput);
  },
  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number
  month: function month(input) {
    var parsedMonthString = parseMonthString(input);

    if (parsedMonthString === null) {
      return null;
    }

    var date = new Date(0);
    date.setUTCFullYear(parsedMonthString.year);
    date.setUTCMonth(parsedMonthString.month - 1);
    return date;
  },
  week: function week(input) {
    var parsedInput = exports.convertStringToNumberByType.week(input);
    return parsedInput === null ? null : new Date(parsedInput);
  },
  time: function time(input) {
    var parsedInput = exports.convertStringToNumberByType.time(input);
    return parsedInput === null ? null : new Date(parsedInput);
  },
  "datetime-local": function datetimeLocal(input) {
    var parsedInput = exports.convertStringToNumberByType["datetime-local"](input);
    return parsedInput === null ? null : new Date(parsedInput);
  }
};
exports.serializeDateByType = {
  date: function date(input) {
    return serializeDate({
      year: input.getUTCFullYear(),
      month: input.getUTCMonth() + 1,
      day: input.getUTCDate()
    });
  },
  month: function month(input) {
    return serializeMonth({
      year: input.getUTCFullYear(),
      month: input.getUTCMonth() + 1
    });
  },
  week: function week(input) {
    return serializeWeek(parseDateAsWeek(input));
  },
  time: function time(input) {
    return serializeTime({
      hour: input.getUTCHours(),
      minute: input.getUTCMinutes(),
      second: input.getUTCSeconds(),
      millisecond: input.getUTCMilliseconds()
    });
  },
  "datetime-local": function datetimeLocal(input) {
    return serializeNormalizedDateAndTime({
      date: {
        year: input.getUTCFullYear(),
        month: input.getUTCMonth() + 1,
        day: input.getUTCDate()
      },
      time: {
        hour: input.getUTCHours(),
        minute: input.getUTCMinutes(),
        second: input.getUTCSeconds(),
        millisecond: input.getUTCMilliseconds()
      }
    });
  }
};
exports.convertNumberToStringByType = {
  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number
  date: function date(input) {
    return exports.serializeDateByType.date(new Date(input));
  },
  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date
  month: function month(input) {
    var year = 1970 + Math.floor(input / 12);
    var month = input % 12;
    var date = new Date(0);
    date.setUTCFullYear(year);
    date.setUTCMonth(month);
    return exports.serializeDateByType.month(date);
  },
  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date
  week: function week(input) {
    return exports.serializeDateByType.week(new Date(input));
  },
  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date
  time: function time(input) {
    return exports.serializeDateByType.time(new Date(input));
  },
  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string
  "datetime-local": function datetimeLocal(input) {
    return exports.serializeDateByType["datetime-local"](new Date(input));
  },
  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string
  number: function number(input) {
    return input.toString();
  },
  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string
  range: function range(input) {
    return input.toString();
  }
};