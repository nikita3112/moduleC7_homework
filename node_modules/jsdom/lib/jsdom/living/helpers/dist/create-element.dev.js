"use strict";

var _INTERFACE_TAG_MAPPIN;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DOMException = require("domexception/webidl2js-wrapper");

var interfaces = require("../interfaces");

var _require = require("../generated/utils"),
    implForWrapper = _require.implForWrapper;

var _require2 = require("./namespaces"),
    HTML_NS = _require2.HTML_NS,
    SVG_NS = _require2.SVG_NS;

var _require3 = require("./internal-constants"),
    domSymbolTree = _require3.domSymbolTree;

var _require4 = require("./validate-names"),
    validateAndExtract = _require4.validateAndExtract;

var reportException = require("./runtime-script-errors");

var _require5 = require("./custom-elements"),
    isValidCustomElementName = _require5.isValidCustomElementName,
    upgradeElement = _require5.upgradeElement,
    lookupCEDefinition = _require5.lookupCEDefinition,
    enqueueCEUpgradeReaction = _require5.enqueueCEUpgradeReaction;

var INTERFACE_TAG_MAPPING = (_INTERFACE_TAG_MAPPIN = {}, _defineProperty(_INTERFACE_TAG_MAPPIN, HTML_NS, {
  HTMLElement: ["abbr", "address", "article", "aside", "b", "bdi", "bdo", "cite", "code", "dd", "dfn", "dt", "em", "figcaption", "figure", "footer", "header", "hgroup", "i", "kbd", "main", "mark", "nav", "noscript", "rp", "rt", "ruby", "s", "samp", "section", "small", "strong", "sub", "summary", "sup", "u", "var", "wbr"],
  HTMLAnchorElement: ["a"],
  HTMLAreaElement: ["area"],
  HTMLAudioElement: ["audio"],
  HTMLBaseElement: ["base"],
  HTMLBodyElement: ["body"],
  HTMLBRElement: ["br"],
  HTMLButtonElement: ["button"],
  HTMLCanvasElement: ["canvas"],
  HTMLDataElement: ["data"],
  HTMLDataListElement: ["datalist"],
  HTMLDetailsElement: ["details"],
  HTMLDialogElement: ["dialog"],
  HTMLDirectoryElement: ["dir"],
  HTMLDivElement: ["div"],
  HTMLDListElement: ["dl"],
  HTMLEmbedElement: ["embed"],
  HTMLFieldSetElement: ["fieldset"],
  HTMLFontElement: ["font"],
  HTMLFormElement: ["form"],
  HTMLFrameElement: ["frame"],
  HTMLFrameSetElement: ["frameset"],
  HTMLHeadingElement: ["h1", "h2", "h3", "h4", "h5", "h6"],
  HTMLHeadElement: ["head"],
  HTMLHRElement: ["hr"],
  HTMLHtmlElement: ["html"],
  HTMLIFrameElement: ["iframe"],
  HTMLImageElement: ["img"],
  HTMLInputElement: ["input"],
  HTMLLabelElement: ["label"],
  HTMLLegendElement: ["legend"],
  HTMLLIElement: ["li"],
  HTMLLinkElement: ["link"],
  HTMLMapElement: ["map"],
  HTMLMarqueeElement: ["marquee"],
  HTMLMediaElement: [],
  HTMLMenuElement: ["menu"],
  HTMLMetaElement: ["meta"],
  HTMLMeterElement: ["meter"],
  HTMLModElement: ["del", "ins"],
  HTMLObjectElement: ["object"],
  HTMLOListElement: ["ol"],
  HTMLOptGroupElement: ["optgroup"],
  HTMLOptionElement: ["option"],
  HTMLOutputElement: ["output"],
  HTMLParagraphElement: ["p"],
  HTMLParamElement: ["param"],
  HTMLPictureElement: ["picture"],
  HTMLPreElement: ["listing", "pre", "xmp"],
  HTMLProgressElement: ["progress"],
  HTMLQuoteElement: ["blockquote", "q"],
  HTMLScriptElement: ["script"],
  HTMLSelectElement: ["select"],
  HTMLSlotElement: ["slot"],
  HTMLSourceElement: ["source"],
  HTMLSpanElement: ["span"],
  HTMLStyleElement: ["style"],
  HTMLTableCaptionElement: ["caption"],
  HTMLTableCellElement: ["th", "td"],
  HTMLTableColElement: ["col", "colgroup"],
  HTMLTableElement: ["table"],
  HTMLTimeElement: ["time"],
  HTMLTitleElement: ["title"],
  HTMLTableRowElement: ["tr"],
  HTMLTableSectionElement: ["thead", "tbody", "tfoot"],
  HTMLTemplateElement: ["template"],
  HTMLTextAreaElement: ["textarea"],
  HTMLTrackElement: ["track"],
  HTMLUListElement: ["ul"],
  HTMLUnknownElement: [],
  HTMLVideoElement: ["video"]
}), _defineProperty(_INTERFACE_TAG_MAPPIN, SVG_NS, {
  SVGElement: [],
  SVGGraphicsElement: [],
  SVGSVGElement: ["svg"],
  SVGTitleElement: ["title"]
}), _INTERFACE_TAG_MAPPIN);
var TAG_INTERFACE_LOOKUP = {};

for (var _i = 0, _arr = [HTML_NS, SVG_NS]; _i < _arr.length; _i++) {
  var namespace = _arr[_i];
  TAG_INTERFACE_LOOKUP[namespace] = {};
  var interfaceNames = Object.keys(INTERFACE_TAG_MAPPING[namespace]);

  for (var _i2 = 0, _interfaceNames = interfaceNames; _i2 < _interfaceNames.length; _i2++) {
    var interfaceName = _interfaceNames[_i2];
    var tagNames = INTERFACE_TAG_MAPPING[namespace][interfaceName];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = tagNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tagName = _step.value;
        TAG_INTERFACE_LOOKUP[namespace][tagName] = interfaceName;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
}

var UNKNOWN_HTML_ELEMENTS_NAMES = ["applet", "bgsound", "blink", "isindex", "keygen", "multicol", "nextid", "spacer"];
var HTML_ELEMENTS_NAMES = ["acronym", "basefont", "big", "center", "nobr", "noembed", "noframes", "plaintext", "rb", "rtc", "strike", "tt"]; // https://html.spec.whatwg.org/multipage/dom.html#elements-in-the-dom:element-interface

function getHTMLElementInterface(name) {
  if (UNKNOWN_HTML_ELEMENTS_NAMES.includes(name)) {
    return interfaces.getInterfaceWrapper("HTMLUnknownElement");
  }

  if (HTML_ELEMENTS_NAMES.includes(name)) {
    return interfaces.getInterfaceWrapper("HTMLElement");
  }

  var specDefinedInterface = TAG_INTERFACE_LOOKUP[HTML_NS][name];

  if (specDefinedInterface !== undefined) {
    return interfaces.getInterfaceWrapper(specDefinedInterface);
  }

  if (isValidCustomElementName(name)) {
    return interfaces.getInterfaceWrapper("HTMLElement");
  }

  return interfaces.getInterfaceWrapper("HTMLUnknownElement");
} // https://svgwg.org/svg2-draft/types.html#ElementsInTheSVGDOM


function getSVGInterface(name) {
  var specDefinedInterface = TAG_INTERFACE_LOOKUP[SVG_NS][name];

  if (specDefinedInterface !== undefined) {
    return interfaces.getInterfaceWrapper(specDefinedInterface);
  }

  return interfaces.getInterfaceWrapper("SVGElement");
} // Returns the list of valid tag names that can bo associated with a element given its namespace and name.


function getValidTagNames(namespace, name) {
  if (INTERFACE_TAG_MAPPING[namespace] && INTERFACE_TAG_MAPPING[namespace][name]) {
    return INTERFACE_TAG_MAPPING[namespace][name];
  }

  return [];
} // https://dom.spec.whatwg.org/#concept-create-element


function createElement(document, localName, namespace) {
  var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var isValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var synchronousCE = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var result = null;
  var _globalObject = document._globalObject;
  var definition = lookupCEDefinition(document, namespace, localName, isValue);

  if (definition !== null && definition.name !== localName) {
    var elementInterface = getHTMLElementInterface(localName);
    result = elementInterface.createImpl(_globalObject, [], {
      ownerDocument: document,
      localName: localName,
      namespace: HTML_NS,
      prefix: prefix,
      ceState: "undefined",
      ceDefinition: null,
      isValue: isValue
    });

    if (synchronousCE) {
      upgradeElement(definition, result);
    } else {
      enqueueCEUpgradeReaction(result, definition);
    }
  } else if (definition !== null) {
    if (synchronousCE) {
      try {
        var C = definition.ctor;
        var resultWrapper = new C();
        result = implForWrapper(resultWrapper);

        if (!result._ceState || !result._ceDefinition || result._namespaceURI !== HTML_NS) {
          throw new TypeError("Internal error: Invalid custom element.");
        }

        if (result._attributeList.length !== 0) {
          throw DOMException.create(_globalObject, ["Unexpected attributes.", "NotSupportedError"]);
        }

        if (domSymbolTree.hasChildren(result)) {
          throw DOMException.create(_globalObject, ["Unexpected child nodes.", "NotSupportedError"]);
        }

        if (domSymbolTree.parent(result)) {
          throw DOMException.create(_globalObject, ["Unexpected element parent.", "NotSupportedError"]);
        }

        if (result._ownerDocument !== document) {
          throw DOMException.create(_globalObject, ["Unexpected element owner document.", "NotSupportedError"]);
        }

        if (result._namespaceURI !== namespace) {
          throw DOMException.create(_globalObject, ["Unexpected element namespace URI.", "NotSupportedError"]);
        }

        if (result._localName !== localName) {
          throw DOMException.create(_globalObject, ["Unexpected element local name.", "NotSupportedError"]);
        }

        result._prefix = prefix;
        result._isValue = isValue;
      } catch (error) {
        reportException(document._defaultView, error);
        var interfaceWrapper = interfaces.getInterfaceWrapper("HTMLUnknownElement");
        result = interfaceWrapper.createImpl(_globalObject, [], {
          ownerDocument: document,
          localName: localName,
          namespace: HTML_NS,
          prefix: prefix,
          ceState: "failed",
          ceDefinition: null,
          isValue: null
        });
      }
    } else {
      var _interfaceWrapper = interfaces.getInterfaceWrapper("HTMLElement");

      result = _interfaceWrapper.createImpl(_globalObject, [], {
        ownerDocument: document,
        localName: localName,
        namespace: HTML_NS,
        prefix: prefix,
        ceState: "undefined",
        ceDefinition: null,
        isValue: null
      });
      enqueueCEUpgradeReaction(result, definition);
    }
  } else {
    var _elementInterface;

    switch (namespace) {
      case HTML_NS:
        _elementInterface = getHTMLElementInterface(localName);
        break;

      case SVG_NS:
        _elementInterface = getSVGInterface(localName);
        break;

      default:
        _elementInterface = interfaces.getInterfaceWrapper("Element");
        break;
    }

    result = _elementInterface.createImpl(_globalObject, [], {
      ownerDocument: document,
      localName: localName,
      namespace: namespace,
      prefix: prefix,
      ceState: "uncustomized",
      ceDefinition: null,
      isValue: isValue
    });

    if (namespace === HTML_NS && (isValidCustomElementName(localName) || isValue !== null)) {
      result._ceState = "undefined";
    }
  }

  return result;
} // https://dom.spec.whatwg.org/#internal-createelementns-steps


function internalCreateElementNSSteps(document, namespace, qualifiedName, options) {
  var extracted = validateAndExtract(document._globalObject, namespace, qualifiedName);
  var isValue = null;

  if (options && options.is !== undefined) {
    isValue = options.is;
  }

  return createElement(document, extracted.localName, extracted.namespace, extracted.prefix, isValue, true);
}

module.exports = {
  createElement: createElement,
  internalCreateElementNSSteps: internalCreateElementNSSteps,
  getValidTagNames: getValidTagNames,
  getHTMLElementInterface: getHTMLElementInterface
};