"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require("./internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var reportException = require("./runtime-script-errors");

var Event = require("../generated/Event");

var idlUtils = require("../generated/utils");

var MutationRecord = require("../generated/MutationRecord");

var MUTATION_TYPE = {
  ATTRIBUTES: "attributes",
  CHARACTER_DATA: "characterData",
  CHILD_LIST: "childList"
}; // Note:
// Since jsdom doesn't currently implement the concept of "unit of related similar-origin browsing contexts"
// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)
// we will approximate that the following properties are global for now.
// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag

var mutationObserverMicrotaskQueueFlag = false; // Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for
// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty
// before notifying the mutation observers.

var activeMutationObservers = new Set(); // https://dom.spec.whatwg.org/#signal-slot-list

var signalSlotList = []; // https://dom.spec.whatwg.org/#queue-a-mutation-record

function queueMutationRecord(type, target, name, namespace, oldValue, addedNodes, removedNodes, previousSibling, nextSibling) {
  var interestedObservers = new Map();
  var nodes = domSymbolTree.ancestorsToArray(target);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var node = _step.value;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = node._registeredObserverList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var registered = _step3.value;
          var options = registered.options,
              mo = registered.observer;

          if (!(node !== target && options.subtree === false) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter && !options.attributeFilter.some(function (value) {
            return value === name || value === namespace;
          })) && !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) && !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)) {
            if (!interestedObservers.has(mo)) {
              interestedObservers.set(mo, null);
            }

            if (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true || type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true) {
              interestedObservers.set(mo, oldValue);
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = interestedObservers.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          observer = _step2$value[0],
          mappedOldValue = _step2$value[1];

      var record = MutationRecord.createImpl(target._globalObject, [], {
        type: type,
        target: target,
        attributeName: name,
        attributeNamespace: namespace,
        oldValue: mappedOldValue,
        addedNodes: addedNodes,
        removedNodes: removedNodes,
        previousSibling: previousSibling,
        nextSibling: nextSibling
      });

      observer._recordQueue.push(record);

      activeMutationObservers.add(observer);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  queueMutationObserverMicrotask();
} // https://dom.spec.whatwg.org/#queue-a-tree-mutation-record


function queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {
  queueMutationRecord(MUTATION_TYPE.CHILD_LIST, target, null, null, null, addedNodes, removedNodes, previousSibling, nextSibling);
} // https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record


function queueAttributeMutationRecord(target, name, namespace, oldValue) {
  queueMutationRecord(MUTATION_TYPE.ATTRIBUTES, target, name, namespace, oldValue, [], [], null, null);
} // https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask


function queueMutationObserverMicrotask() {
  if (mutationObserverMicrotaskQueueFlag) {
    return;
  }

  mutationObserverMicrotaskQueueFlag = true;
  Promise.resolve().then(function () {
    notifyMutationObservers();
  });
} // https://dom.spec.whatwg.org/#notify-mutation-observers


function notifyMutationObservers() {
  mutationObserverMicrotaskQueueFlag = false;

  var notifyList = _toConsumableArray(activeMutationObservers).sort(function (a, b) {
    return a._id - b._id;
  });

  activeMutationObservers.clear();
  var signalList = [].concat(signalSlotList);
  signalSlotList.splice(0, signalSlotList.length);
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    var _loop = function _loop() {
      var mo = _step4.value;

      var records = _toConsumableArray(mo._recordQueue);

      mo._recordQueue = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = mo._nodeList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var node = _step6.value;
          node._registeredObserverList = node._registeredObserverList.filter(function (registeredObserver) {
            return registeredObserver.source !== mo;
          });

          if (records.length) {
            try {
              mo._callback(records.map(idlUtils.wrapperForImpl), idlUtils.wrapperForImpl(mo));
            } catch (e) {
              var target = records[0].target;
              var window = target._ownerDocument._defaultView;
              reportException(window, e);
            }
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    };

    for (var _iterator4 = notifyList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = signalList[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var slot = _step5.value;
      var slotChangeEvent = Event.createImpl(slot._globalObject, ["slotchange", {
        bubbles: true
      }], {
        isTrusted: true
      });

      slot._dispatch(slotChangeEvent);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }
}

module.exports = {
  MUTATION_TYPE: MUTATION_TYPE,
  queueMutationRecord: queueMutationRecord,
  queueTreeMutationRecord: queueTreeMutationRecord,
  queueAttributeMutationRecord: queueAttributeMutationRecord,
  queueMutationObserverMicrotask: queueMutationObserverMicrotask,
  signalSlotList: signalSlotList
};