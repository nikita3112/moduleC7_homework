"use strict";

var _require = require("./internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var _require2 = require("./namespaces"),
    HTML_NS = _require2.HTML_NS; // All these operate on and return impls, not wrappers!


exports.closest = function (e, localName) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;

  while (e) {
    if (e.localName === localName && e.namespaceURI === namespace) {
      return e;
    }

    e = domSymbolTree.parent(e);
  }

  return null;
};

exports.childrenByLocalName = function (parent, localName) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  return domSymbolTree.childrenToArray(parent, {
    filter: function filter(node) {
      return node._localName === localName && node._namespaceURI === namespace;
    }
  });
};

exports.descendantsByLocalName = function (parent, localName) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  return domSymbolTree.treeToArray(parent, {
    filter: function filter(node) {
      return node._localName === localName && node._namespaceURI === namespace && node !== parent;
    }
  });
};

exports.childrenByLocalNames = function (parent, localNamesSet) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  return domSymbolTree.childrenToArray(parent, {
    filter: function filter(node) {
      return localNamesSet.has(node._localName) && node._namespaceURI === namespace;
    }
  });
};

exports.descendantsByLocalNames = function (parent, localNamesSet) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  return domSymbolTree.treeToArray(parent, {
    filter: function filter(node) {
      return localNamesSet.has(node._localName) && node._namespaceURI === namespace && node !== parent;
    }
  });
};

exports.firstChildWithLocalName = function (parent, localName) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  var iterator = domSymbolTree.childrenIterator(parent);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var child = _step.value;

      if (child._localName === localName && child._namespaceURI === namespace) {
        return child;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
};

exports.firstChildWithLocalNames = function (parent, localNamesSet) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  var iterator = domSymbolTree.childrenIterator(parent);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = iterator[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var child = _step2.value;

      if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {
        return child;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return null;
};

exports.firstDescendantWithLocalName = function (parent, localName) {
  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;
  var iterator = domSymbolTree.treeIterator(parent);
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = iterator[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var descendant = _step3.value;

      if (descendant._localName === localName && descendant._namespaceURI === namespace) {
        return descendant;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return null;
};