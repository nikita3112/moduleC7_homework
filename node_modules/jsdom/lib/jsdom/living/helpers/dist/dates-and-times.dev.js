"use strict";

function isLeapYear(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#number-of-days-in-month-month-of-year-year


var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function numberOfDaysInMonthOfYear(month, year) {
  if (month === 2 && isLeapYear(year)) {
    return 29;
  }

  return daysInMonth[month - 1];
}

var monthRe = /^([0-9]{4,})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-month-string

function parseMonthString(str) {
  var matches = monthRe.exec(str);

  if (!matches) {
    return null;
  }

  var year = Number(matches[1]);

  if (year <= 0) {
    return null;
  }

  var month = Number(matches[2]);

  if (month < 1 || month > 12) {
    return null;
  }

  return {
    year: year,
    month: month
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-month-string


function isValidMonthString(str) {
  return parseMonthString(str) !== null;
}

function serializeMonth(_ref) {
  var year = _ref.year,
      month = _ref.month;
  var yearStr = "".concat(year).padStart(4, "0");
  var monthStr = "".concat(month).padStart(2, "0");
  return "".concat(yearStr, "-").concat(monthStr);
}

var dateRe = /^([0-9]{4,})-([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-date-string

function parseDateString(str) {
  var matches = dateRe.exec(str);

  if (!matches) {
    return null;
  }

  var year = Number(matches[1]);

  if (year <= 0) {
    return null;
  }

  var month = Number(matches[2]);

  if (month < 1 || month > 12) {
    return null;
  }

  var day = Number(matches[3]);

  if (day < 1 || day > numberOfDaysInMonthOfYear(month, year)) {
    return null;
  }

  return {
    year: year,
    month: month,
    day: day
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-date-string


function isValidDateString(str) {
  return parseDateString(str) !== null;
}

function serializeDate(date) {
  var dayStr = "".concat(date.day).padStart(2, "0");
  return "".concat(serializeMonth(date), "-").concat(dayStr);
}

var yearlessDateRe = /^(?:--)?([0-9]{2})-([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-yearless-date-string

function parseYearlessDateString(str) {
  var matches = yearlessDateRe.exec(str);

  if (!matches) {
    return null;
  }

  var month = Number(matches[1]);

  if (month < 1 || month > 12) {
    return null;
  }

  var day = Number(matches[2]);

  if (day < 1 || day > numberOfDaysInMonthOfYear(month, 4)) {
    return null;
  }

  return {
    month: month,
    day: day
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-yearless-date-string


function isValidYearlessDateString(str) {
  return parseYearlessDateString(str) !== null;
}

function serializeYearlessDate(_ref2) {
  var month = _ref2.month,
      day = _ref2.day;
  var monthStr = "".concat(month).padStart(2, "0");
  var dayStr = "".concat(day).padStart(2, "0");
  return "".concat(monthStr, "-").concat(dayStr);
}

var timeRe = /^([0-9]{2}):([0-9]{2})(?::([0-9]{2}(?:\.([0-9]{1,3}))?))?$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-time-string

function parseTimeString(str) {
  var matches = timeRe.exec(str);

  if (!matches) {
    return null;
  }

  var hour = Number(matches[1]);

  if (hour < 0 || hour > 23) {
    return null;
  }

  var minute = Number(matches[2]);

  if (minute < 0 || minute > 59) {
    return null;
  }

  var second = matches[3] !== undefined ? Math.trunc(Number(matches[3])) : 0;

  if (second < 0 || second >= 60) {
    return null;
  }

  var millisecond = matches[4] !== undefined ? Number(matches[4]) : 0;
  return {
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-time-string


function isValidTimeString(str) {
  return parseTimeString(str) !== null;
}

function serializeTime(_ref3) {
  var hour = _ref3.hour,
      minute = _ref3.minute,
      second = _ref3.second,
      millisecond = _ref3.millisecond;
  var hourStr = "".concat(hour).padStart(2, "0");
  var minuteStr = "".concat(minute).padStart(2, "0");

  if (second === 0 && millisecond === 0) {
    return "".concat(hourStr, ":").concat(minuteStr);
  }

  var secondStr = "".concat(second).padStart(2, "0");
  var millisecondStr = "".concat(millisecond).padStart(3, "0");
  return "".concat(hourStr, ":").concat(minuteStr, ":").concat(secondStr, ".").concat(millisecondStr);
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-local-date-and-time-string


function parseLocalDateAndTimeString(str) {
  var normalized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var separatorIdx = str.indexOf("T");

  if (separatorIdx < 0 && !normalized) {
    separatorIdx = str.indexOf(" ");
  }

  if (separatorIdx < 0) {
    return null;
  }

  var date = parseDateString(str.slice(0, separatorIdx));

  if (date === null) {
    return null;
  }

  var time = parseTimeString(str.slice(separatorIdx + 1));

  if (time === null) {
    return null;
  }

  return {
    date: date,
    time: time
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-local-date-and-time-string


function isValidLocalDateAndTimeString(str) {
  return parseLocalDateAndTimeString(str) !== null;
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-normalised-local-date-and-time-string


function isValidNormalizedLocalDateAndTimeString(str) {
  return parseLocalDateAndTimeString(str, true) !== null;
}

function serializeNormalizedDateAndTime(_ref4) {
  var date = _ref4.date,
      time = _ref4.time;
  return "".concat(serializeDate(date), "T").concat(serializeTime(time));
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#week-number-of-the-last-day
// https://stackoverflow.com/a/18538272/1937836


function weekNumberOfLastDay(year) {
  var jan1 = new Date(year, 0);
  return jan1.getDay() === 4 || isLeapYear(year) && jan1.getDay() === 3 ? 53 : 52;
}

var weekRe = /^([0-9]{4,5})-W([0-9]{2})$/; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#parse-a-week-string

function parseWeekString(str) {
  var matches = weekRe.exec(str);

  if (!matches) {
    return null;
  }

  var year = Number(matches[1]);

  if (year <= 0) {
    return null;
  }

  var week = Number(matches[2]);

  if (week < 1 || week > weekNumberOfLastDay(year)) {
    return null;
  }

  return {
    year: year,
    week: week
  };
} // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string


function isValidWeekString(str) {
  return parseWeekString(str) !== null;
}

function serializeWeek(_ref5) {
  var year = _ref5.year,
      week = _ref5.week;
  var yearStr = "".concat(year).padStart(4, "0");
  var weekStr = "".concat(week).padStart(2, "0");
  return "".concat(yearStr, "-W").concat(weekStr);
} // https://stackoverflow.com/a/6117889


function parseDateAsWeek(originalDate) {
  var dayInSeconds = 86400000; // Copy date so don't modify original

  var date = new Date(Date.UTC(originalDate.getUTCFullYear(), originalDate.getUTCMonth(), originalDate.getUTCDate())); // Set to nearest Thursday: current date + 4 - current day number
  // Make Sunday's day number 7

  date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7)); // Get first day of year

  var yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1)); // Calculate full weeks to nearest Thursday

  var week = Math.ceil(((date - yearStart) / dayInSeconds + 1) / 7);
  return {
    year: date.getUTCFullYear(),
    week: week
  };
}

function isDate(obj) {
  try {
    Date.prototype.valueOf.call(obj);
    return true;
  } catch (_unused) {
    return false;
  }
}

module.exports = {
  isDate: isDate,
  numberOfDaysInMonthOfYear: numberOfDaysInMonthOfYear,
  parseMonthString: parseMonthString,
  isValidMonthString: isValidMonthString,
  serializeMonth: serializeMonth,
  parseDateString: parseDateString,
  isValidDateString: isValidDateString,
  serializeDate: serializeDate,
  parseYearlessDateString: parseYearlessDateString,
  isValidYearlessDateString: isValidYearlessDateString,
  serializeYearlessDate: serializeYearlessDate,
  parseTimeString: parseTimeString,
  isValidTimeString: isValidTimeString,
  serializeTime: serializeTime,
  parseLocalDateAndTimeString: parseLocalDateAndTimeString,
  isValidLocalDateAndTimeString: isValidLocalDateAndTimeString,
  isValidNormalizedLocalDateAndTimeString: isValidNormalizedLocalDateAndTimeString,
  serializeNormalizedDateAndTime: serializeNormalizedDateAndTime,
  parseDateAsWeek: parseDateAsWeek,
  weekNumberOfLastDay: weekNumberOfLastDay,
  parseWeekString: parseWeekString,
  isValidWeekString: isValidWeekString,
  serializeWeek: serializeWeek
};