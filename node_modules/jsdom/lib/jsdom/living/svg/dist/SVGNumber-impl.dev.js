"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DOMException = require("domexception/webidl2js-wrapper");

var SVGNumberImpl =
/*#__PURE__*/
function () {
  function SVGNumberImpl(globalObject, args, privateData) {
    _classCallCheck(this, SVGNumberImpl);

    // Delegate to parent List object for (almost) everything related to reflection.
    this._parentList = privateData.parentList;
    this._value = 0;
  }

  _createClass(SVGNumberImpl, [{
    key: "_synchronize",
    value: function _synchronize() {
      if (this._parentList !== undefined) {
        this._parentList._synchronize();
      }
    }
  }, {
    key: "_reserialize",
    value: function _reserialize() {
      if (this._parentList !== undefined) {
        this._parentList._reserialize();
      }
    }
  }, {
    key: "_readOnly",
    get: function get() {
      if (this._parentList !== undefined) {
        return this._parentList._readOnly;
      }

      return false;
    }
  }, {
    key: "value",
    get: function get() {
      this._synchronize();

      return this._value;
    },
    set: function set(value) {
      if (this._readOnly) {
        throw DOMException.create(this._globalObject, ["Attempting to modify a read-only SVGNumber", "NoModificationAllowedError"]);
      }

      this._value = value;

      this._reserialize();
    }
  }]);

  return SVGNumberImpl;
}();

exports.implementation = SVGNumberImpl;