"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SVGAnimatedStringImpl =
/*#__PURE__*/
function () {
  function SVGAnimatedStringImpl(globalObject, args, privateData) {
    _classCallCheck(this, SVGAnimatedStringImpl);

    this._element = privateData.element;
    this._attribute = privateData.attribute;
    this._attributeDeprecated = privateData.attributeDeprecated; // can be undefined

    this._initialValue = privateData.initialValue; // can be undefined
  }

  _createClass(SVGAnimatedStringImpl, [{
    key: "baseVal",
    get: function get() {
      if (!this._element.hasAttributeNS(null, this._attribute)) {
        if (this._attributeDeprecated !== undefined && this._element.hasAttributeNS(null, this._attributeDeprecated)) {
          return this._element.getAttributeNS(null, this._attributeDeprecated);
        } else if (this._initialValue !== undefined) {
          return this._initialValue;
        }

        return "";
      }

      return this._element.getAttributeNS(null, this._attribute);
    },
    set: function set(base) {
      if (!this._element.hasAttributeNS(null, this._attribute) && this._attributeDeprecated !== undefined && this._element.hasAttributeNS(null, this._attributeDeprecated)) {
        this._element.setAttributeNS(null, this._attributeDeprecated, base);
      } else {
        this._element.setAttributeNS(null, this._attribute, base);
      }
    }
  }, {
    key: "animVal",
    get: function get() {
      return this.baseVal;
    }
  }]);

  return SVGAnimatedStringImpl;
}();

exports.implementation = SVGAnimatedStringImpl;