"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var webIDLConversions = require("webidl-conversions");

var DOMException = require("domexception/webidl2js-wrapper");

var NODE_TYPE = require("../node-type");

var _require = require("../helpers/namespaces"),
    HTML_NS = _require.HTML_NS;

var _require2 = require("../helpers/create-element"),
    getHTMLElementInterface = _require2.getHTMLElementInterface;

var _require3 = require("../helpers/shadow-dom"),
    shadowIncludingInclusiveDescendantsIterator = _require3.shadowIncludingInclusiveDescendantsIterator;

var _require4 = require("../helpers/custom-elements"),
    isValidCustomElementName = _require4.isValidCustomElementName,
    tryUpgradeElement = _require4.tryUpgradeElement,
    enqueueCEUpgradeReaction = _require4.enqueueCEUpgradeReaction;

var idlUtils = require("../generated/utils");

var HTMLUnknownElement = require("../generated/HTMLUnknownElement");

var LIFECYCLE_CALLBACKS = ["connectedCallback", "disconnectedCallback", "adoptedCallback", "attributeChangedCallback"];

function convertToSequenceDOMString(obj) {
  if (!obj || !obj[Symbol.iterator]) {
    throw new TypeError("Invalid Sequence");
  }

  return Array.from(obj).map(webIDLConversions.DOMString);
} // Returns true is the passed value is a valid constructor.
// Borrowed from: https://stackoverflow.com/a/39336206/3832710


function isConstructor(value) {
  if (typeof value !== "function") {
    return false;
  }

  try {
    var P = new Proxy(value, {
      construct: function construct() {
        return {};
      }
    }); // eslint-disable-next-line no-new

    new P();
    return true;
  } catch (_unused) {
    return false;
  }
} // https://html.spec.whatwg.org/#customelementregistry


var CustomElementRegistryImpl =
/*#__PURE__*/
function () {
  function CustomElementRegistryImpl(globalObject) {
    _classCallCheck(this, CustomElementRegistryImpl);

    this._customElementDefinitions = [];
    this._elementDefinitionIsRunning = false;
    this._whenDefinedPromiseMap = Object.create(null);
    this._globalObject = globalObject;
  } // https://html.spec.whatwg.org/#dom-customelementregistry-define


  _createClass(CustomElementRegistryImpl, [{
    key: "define",
    value: function define(name, ctor, options) {
      var _globalObject = this._globalObject;

      if (!isConstructor(ctor)) {
        throw new TypeError("Constructor argument is not a constructor.");
      }

      if (!isValidCustomElementName(name)) {
        throw DOMException.create(_globalObject, ["Name argument is not a valid custom element name.", "SyntaxError"]);
      }

      var nameAlreadyRegistered = this._customElementDefinitions.some(function (entry) {
        return entry.name === name;
      });

      if (nameAlreadyRegistered) {
        throw DOMException.create(_globalObject, ["This name has already been registered in the registry.", "NotSupportedError"]);
      }

      var ctorAlreadyRegistered = this._customElementDefinitions.some(function (entry) {
        return entry.ctor === ctor;
      });

      if (ctorAlreadyRegistered) {
        throw DOMException.create(_globalObject, ["This constructor has already been registered in the registry.", "NotSupportedError"]);
      }

      var localName = name;
      var extendsOption = null;

      if (options !== undefined && options["extends"]) {
        extendsOption = options["extends"];
      }

      if (extendsOption !== null) {
        if (isValidCustomElementName(extendsOption)) {
          throw DOMException.create(_globalObject, ["Option extends value can't be a valid custom element name.", "NotSupportedError"]);
        }

        var extendsInterface = getHTMLElementInterface(extendsOption);

        if (extendsInterface === HTMLUnknownElement) {
          throw DOMException.create(_globalObject, ["".concat(extendsOption, " is an HTMLUnknownElement."), "NotSupportedError"]);
        }

        localName = extendsOption;
      }

      if (this._elementDefinitionIsRunning) {
        throw DOMException.create(_globalObject, ["Invalid nested custom element definition.", "NotSupportedError"]);
      }

      this._elementDefinitionIsRunning = true;
      var disableShadow = false;
      var observedAttributes = [];
      var lifecycleCallbacks = {
        connectedCallback: null,
        disconnectedCallback: null,
        adoptedCallback: null,
        attributeChangedCallback: null
      };
      var caughtError;

      try {
        var prototype = ctor.prototype;

        if (_typeof(prototype) !== "object") {
          throw new TypeError("Invalid constructor prototype.");
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = LIFECYCLE_CALLBACKS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var callbackName = _step.value;
            var callbackValue = prototype[callbackName];

            if (callbackValue !== undefined) {
              lifecycleCallbacks[callbackName] = webIDLConversions.Function(callbackValue);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (lifecycleCallbacks.attributeChangedCallback !== null) {
          var observedAttributesIterable = ctor.observedAttributes;

          if (observedAttributesIterable !== undefined) {
            observedAttributes = convertToSequenceDOMString(observedAttributesIterable);
          }
        }

        var disabledFeatures = [];
        var disabledFeaturesIterable = ctor.disabledFeatures;

        if (disabledFeaturesIterable) {
          disabledFeatures = convertToSequenceDOMString(disabledFeaturesIterable);
        }

        disableShadow = disabledFeatures.includes("shadow");
      } catch (err) {
        caughtError = err;
      } finally {
        this._elementDefinitionIsRunning = false;
      }

      if (caughtError !== undefined) {
        throw caughtError;
      }

      var definition = {
        name: name,
        localName: localName,
        ctor: ctor,
        observedAttributes: observedAttributes,
        lifecycleCallbacks: lifecycleCallbacks,
        disableShadow: disableShadow,
        constructionStack: []
      };

      this._customElementDefinitions.push(definition);

      var document = idlUtils.implForWrapper(this._globalObject._document);
      var upgradeCandidates = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = shadowIncludingInclusiveDescendantsIterator(document)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var candidate = _step2.value;

          if (candidate._namespaceURI === HTML_NS && candidate._localName === localName && (extendsOption === null || candidate._isValue === name)) {
            upgradeCandidates.push(candidate);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      for (var _i = 0, _upgradeCandidates = upgradeCandidates; _i < _upgradeCandidates.length; _i++) {
        var upgradeCandidate = _upgradeCandidates[_i];
        enqueueCEUpgradeReaction(upgradeCandidate, definition);
      }

      if (this._whenDefinedPromiseMap[name] !== undefined) {
        this._whenDefinedPromiseMap[name].resolve(undefined);

        delete this._whenDefinedPromiseMap[name];
      }
    } // https://html.spec.whatwg.org/#dom-customelementregistry-get

  }, {
    key: "get",
    value: function get(name) {
      var definition = this._customElementDefinitions.find(function (entry) {
        return entry.name === name;
      });

      return definition && definition.ctor;
    } // https://html.spec.whatwg.org/#dom-customelementregistry-whendefined

  }, {
    key: "whenDefined",
    value: function whenDefined(name) {
      if (!isValidCustomElementName(name)) {
        return Promise.reject(DOMException.create(this._globalObject, ["Name argument is not a valid custom element name.", "SyntaxError"]));
      }

      var alreadyRegistered = this._customElementDefinitions.some(function (entry) {
        return entry.name === name;
      });

      if (alreadyRegistered) {
        return Promise.resolve();
      }

      if (this._whenDefinedPromiseMap[name] === undefined) {
        var resolve;
        var promise = new Promise(function (r) {
          resolve = r;
        }); // Store the pending Promise along with the extracted resolve callback to actually resolve the returned Promise,
        // once the custom element is registered.

        this._whenDefinedPromiseMap[name] = {
          promise: promise,
          resolve: resolve
        };
      }

      return this._whenDefinedPromiseMap[name].promise;
    } // https://html.spec.whatwg.org/#dom-customelementregistry-upgrade

  }, {
    key: "upgrade",
    value: function upgrade(root) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = shadowIncludingInclusiveDescendantsIterator(root)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var candidate = _step3.value;

          if (candidate.nodeType === NODE_TYPE.ELEMENT_NODE) {
            tryUpgradeElement(candidate);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }]);

  return CustomElementRegistryImpl;
}();

module.exports = {
  implementation: CustomElementRegistryImpl
};