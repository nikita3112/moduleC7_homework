"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("events"),
    EventEmitter = _require.EventEmitter;

module.exports =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(VirtualConsole, _EventEmitter);

  function VirtualConsole() {
    var _this;

    _classCallCheck(this, VirtualConsole);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualConsole).call(this));

    _this.on("error", function () {// If "error" event has no listeners,
      // EventEmitter throws an exception
    });

    return _this;
  }

  _createClass(VirtualConsole, [{
    key: "sendTo",
    value: function sendTo(anyConsole, options) {
      var _this2 = this;

      if (options === undefined) {
        options = {};
      }

      var _loop = function _loop() {
        var method = _Object$keys[_i];

        if (typeof anyConsole[method] === "function") {
          var onMethodCall = function onMethodCall() {
            anyConsole[method].apply(anyConsole, arguments);
          };

          _this2.on(method, onMethodCall);
        }
      };

      for (var _i = 0, _Object$keys = Object.keys(anyConsole); _i < _Object$keys.length; _i++) {
        _loop();
      }

      if (!options.omitJSDOMErrors) {
        this.on("jsdomError", function (e) {
          return anyConsole.error(e.stack, e.detail);
        });
      }

      return this;
    }
  }]);

  return VirtualConsole;
}(EventEmitter);