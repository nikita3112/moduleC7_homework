"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var path = require("path");

var fs = require("fs").promises;

var vm = require("vm");

var toughCookie = require("tough-cookie");

var sniffHTMLEncoding = require("html-encoding-sniffer");

var whatwgURL = require("whatwg-url");

var whatwgEncoding = require("whatwg-encoding");

var _require = require("whatwg-url"),
    URL = _require.URL;

var MIMEType = require("whatwg-mimetype");

var idlUtils = require("./jsdom/living/generated/utils.js");

var VirtualConsole = require("./jsdom/virtual-console.js");

var _require2 = require("./jsdom/browser/Window.js"),
    createWindow = _require2.createWindow;

var _require3 = require("./jsdom/browser/parser"),
    parseIntoDocument = _require3.parseIntoDocument;

var _require4 = require("./jsdom/living/domparsing/serialization.js"),
    fragmentSerialization = _require4.fragmentSerialization;

var ResourceLoader = require("./jsdom/browser/resources/resource-loader.js");

var NoOpResourceLoader = require("./jsdom/browser/resources/no-op-resource-loader.js");

var CookieJar =
/*#__PURE__*/
function (_toughCookie$CookieJa) {
  _inherits(CookieJar, _toughCookie$CookieJa);

  function CookieJar(store, options) {
    _classCallCheck(this, CookieJar);

    // jsdom cookie jars must be loose by default
    return _possibleConstructorReturn(this, _getPrototypeOf(CookieJar).call(this, store, Object.assign({
      looseMode: true
    }, options)));
  }

  return CookieJar;
}(toughCookie.CookieJar);

var window = Symbol("window");
var sharedFragmentDocument = null;

var JSDOM =
/*#__PURE__*/
function () {
  function JSDOM(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, JSDOM);

    var mimeType = new MIMEType(options.contentType === undefined ? "text/html" : options.contentType);

    var _normalizeHTML = normalizeHTML(input, mimeType),
        html = _normalizeHTML.html,
        encoding = _normalizeHTML.encoding;

    options = transformOptions(options, encoding, mimeType);
    this[window] = createWindow(options.windowOptions);
    var documentImpl = idlUtils.implForWrapper(this[window]._document);
    options.beforeParse(this[window]._globalProxy);
    parseIntoDocument(html, documentImpl);
    documentImpl.close();
  }

  _createClass(JSDOM, [{
    key: "serialize",
    value: function serialize() {
      return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {
        requireWellFormed: false
      });
    }
  }, {
    key: "nodeLocation",
    value: function nodeLocation(node) {
      if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {
        throw new Error("Location information was not saved for this jsdom. Use includeNodeLocations during creation.");
      }

      return idlUtils.implForWrapper(node).sourceCodeLocation;
    }
  }, {
    key: "getInternalVMContext",
    value: function getInternalVMContext() {
      if (!vm.isContext(this[window])) {
        throw new TypeError("This jsdom was not configured to allow script running. " + "Use the runScripts option during creation.");
      }

      return this[window];
    }
  }, {
    key: "reconfigure",
    value: function reconfigure(settings) {
      if ("windowTop" in settings) {
        this[window]._top = settings.windowTop;
      }

      if ("url" in settings) {
        var document = idlUtils.implForWrapper(this[window]._document);
        var url = whatwgURL.parseURL(settings.url);

        if (url === null) {
          throw new TypeError("Could not parse \"".concat(settings.url, "\" as a URL"));
        }

        document._URL = url;
        document._origin = whatwgURL.serializeURLOrigin(document._URL);
      }
    }
  }, {
    key: "window",
    get: function get() {
      // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise
      // things like `window.eval` don't exist.
      return this[window]._globalProxy;
    }
  }, {
    key: "virtualConsole",
    get: function get() {
      return this[window]._virtualConsole;
    }
  }, {
    key: "cookieJar",
    get: function get() {
      // TODO NEWAPI move _cookieJar to window probably
      return idlUtils.implForWrapper(this[window]._document)._cookieJar;
    }
  }], [{
    key: "fragment",
    value: function fragment() {
      var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      if (!sharedFragmentDocument) {
        sharedFragmentDocument = new JSDOM().window.document;
      }

      var template = sharedFragmentDocument.createElement("template");
      template.innerHTML = string;
      return template.content;
    }
  }, {
    key: "fromURL",
    value: function fromURL(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Promise.resolve().then(function () {
        // Remove the hash while sending this through the research loader fetch().
        // It gets added back a few lines down when constructing the JSDOM object.
        var parsedURL = new URL(url);
        var originalHash = parsedURL.hash;
        parsedURL.hash = "";
        url = parsedURL.href;
        options = normalizeFromURLOptions(options);
        var resourceLoader = resourcesToResourceLoader(options.resources);
        var resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;
        var req = resourceLoaderForInitialRequest.fetch(url, {
          accept: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
          cookieJar: options.cookieJar,
          referrer: options.referrer
        });
        return req.then(function (body) {
          var res = req.response;
          options = Object.assign(options, {
            url: req.href + originalHash,
            contentType: res.headers["content-type"],
            referrer: req.getHeader("referer")
          });
          return new JSDOM(body, options);
        });
      });
    }
  }, {
    key: "fromFile",
    value: function fromFile(filename) {
      var options,
          buffer,
          _args = arguments;
      return regeneratorRuntime.async(function fromFile$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
              options = normalizeFromFileOptions(filename, options);
              _context.next = 4;
              return regeneratorRuntime.awrap(fs.readFile(filename));

            case 4:
              buffer = _context.sent;
              return _context.abrupt("return", new JSDOM(buffer, options));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      });
    }
  }]);

  return JSDOM;
}();

function normalizeFromURLOptions(options) {
  // Checks on options that are invalid for `fromURL`
  if (options.url !== undefined) {
    throw new TypeError("Cannot supply a url option when using fromURL");
  }

  if (options.contentType !== undefined) {
    throw new TypeError("Cannot supply a contentType option when using fromURL");
  } // Normalization of options which must be done before the rest of the fromURL code can use them, because they are
  // given to request()


  var normalized = Object.assign({}, options);

  if (options.referrer !== undefined) {
    normalized.referrer = new URL(options.referrer).href;
  }

  if (options.cookieJar === undefined) {
    normalized.cookieJar = new CookieJar();
  }

  return normalized; // All other options don't need to be processed yet, and can be taken care of in the normal course of things when
  // `fromURL` calls `new JSDOM(html, options)`.
}

function normalizeFromFileOptions(filename, options) {
  var normalized = Object.assign({}, options);

  if (normalized.contentType === undefined) {
    var extname = path.extname(filename);

    if (extname === ".xhtml" || extname === ".xht" || extname === ".xml") {
      normalized.contentType = "application/xhtml+xml";
    }
  }

  if (normalized.url === undefined) {
    normalized.url = new URL("file:" + path.resolve(filename));
  }

  return normalized;
}

function transformOptions(options, encoding, mimeType) {
  var transformed = {
    windowOptions: {
      // Defaults
      url: "about:blank",
      referrer: "",
      contentType: "text/html",
      parsingMode: "html",
      parseOptions: {
        sourceCodeLocationInfo: false,
        scriptingEnabled: false
      },
      runScripts: undefined,
      encoding: encoding,
      pretendToBeVisual: false,
      storageQuota: 5000000,
      // Defaults filled in later
      resourceLoader: undefined,
      virtualConsole: undefined,
      cookieJar: undefined
    },
    // Defaults
    beforeParse: function beforeParse() {}
  }; // options.contentType was parsed into mimeType by the caller.

  if (!mimeType.isHTML() && !mimeType.isXML()) {
    throw new RangeError("The given content type of \"".concat(options.contentType, "\" was not a HTML or XML content type"));
  }

  transformed.windowOptions.contentType = mimeType.essence;
  transformed.windowOptions.parsingMode = mimeType.isHTML() ? "html" : "xml";

  if (options.url !== undefined) {
    transformed.windowOptions.url = new URL(options.url).href;
  }

  if (options.referrer !== undefined) {
    transformed.windowOptions.referrer = new URL(options.referrer).href;
  }

  if (options.includeNodeLocations) {
    if (transformed.windowOptions.parsingMode === "xml") {
      throw new TypeError("Cannot set includeNodeLocations to true with an XML content type");
    }

    transformed.windowOptions.parseOptions = {
      sourceCodeLocationInfo: true
    };
  }

  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;
  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;

  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {
    throw new TypeError("virtualConsole must be an instance of VirtualConsole");
  }

  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);

  if (options.runScripts !== undefined) {
    transformed.windowOptions.runScripts = String(options.runScripts);

    if (transformed.windowOptions.runScripts === "dangerously") {
      transformed.windowOptions.parseOptions.scriptingEnabled = true;
    } else if (transformed.windowOptions.runScripts !== "outside-only") {
      throw new RangeError("runScripts must be undefined, \"dangerously\", or \"outside-only\"");
    }
  }

  if (options.beforeParse !== undefined) {
    transformed.beforeParse = options.beforeParse;
  }

  if (options.pretendToBeVisual !== undefined) {
    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);
  }

  if (options.storageQuota !== undefined) {
    transformed.windowOptions.storageQuota = Number(options.storageQuota);
  } // concurrentNodeIterators??


  return transformed;
}

function normalizeHTML() {
  var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var mimeType = arguments.length > 1 ? arguments[1] : undefined;
  var encoding = "UTF-8";

  if (ArrayBuffer.isView(html)) {
    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);
  } else if (html instanceof ArrayBuffer) {
    html = Buffer.from(html);
  }

  if (Buffer.isBuffer(html)) {
    encoding = sniffHTMLEncoding(html, {
      defaultEncoding: mimeType.isXML() ? "UTF-8" : "windows-1252",
      transportLayerEncodingLabel: mimeType.parameters.get("charset")
    });
    html = whatwgEncoding.decode(html, encoding);
  } else {
    html = String(html);
  }

  return {
    html: html,
    encoding: encoding
  };
}

function resourcesToResourceLoader(resources) {
  switch (resources) {
    case undefined:
      {
        return new NoOpResourceLoader();
      }

    case "usable":
      {
        return new ResourceLoader();
      }

    default:
      {
        if (!(resources instanceof ResourceLoader)) {
          throw new TypeError("resources must be an instance of ResourceLoader");
        }

        return resources;
      }
  }
}

exports.JSDOM = JSDOM;
exports.VirtualConsole = VirtualConsole;
exports.CookieJar = CookieJar;
exports.ResourceLoader = ResourceLoader;
exports.toughCookie = toughCookie;