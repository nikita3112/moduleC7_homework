'use strict';

var parsers = require('./parsers');

describe('valueType', function () {
  it('returns color for red', function () {
    var input = 'red';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for #nnnnnn', function () {
    var input = '#fefefe';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgb(n, n, n)', function () {
    var input = 'rgb(10, 10, 10)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgb(p, p, p)', function () {
    var input = 'rgb(10%, 10%, 10%)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgba(n, n, n, n)', function () {
    var input = 'rgba(10, 10, 10, 1)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgba(n, n, n, n) with decimal alpha', function () {
    var input = 'rgba(10, 10, 10, 0.5)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgba(p, p, p, n)', function () {
    var input = 'rgba(10%, 10%, 10%, 1)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns color for rgba(p, p, p, n) with decimal alpha', function () {
    var input = 'rgba(10%, 10%, 10%, 0.5)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.COLOR);
  });
  it('returns length for 100ch', function () {
    var input = '100ch';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.LENGTH);
  });
  it('returns calc from calc(100px * 2)', function () {
    var input = 'calc(100px * 2)';
    var output = parsers.valueType(input);
    expect(output).toEqual(parsers.TYPES.CALC);
  });
});
describe('parseInteger', function () {
  it.todo('test');
});
describe('parseNumber', function () {
  it.todo('test');
});
describe('parseLength', function () {
  it.todo('test');
});
describe('parsePercent', function () {
  it.todo('test');
});
describe('parseMeasurement', function () {
  it.todo('test');
});
describe('parseUrl', function () {
  it.todo('test');
});
describe('parseString', function () {
  it.todo('test');
});
describe('parseColor', function () {
  it('should convert hsl to rgb values', function () {
    var input = 'hsla(0, 1%, 2%)';
    var output = parsers.parseColor(input);
    expect(output).toEqual('rgb(5, 5, 5)');
  });
  it('should convert hsla to rgba values', function () {
    var input = 'hsla(0, 1%, 2%, 0.5)';
    var output = parsers.parseColor(input);
    expect(output).toEqual('rgba(5, 5, 5, 0.5)');
  });
  it.todo('Add more tests');
});
describe('parseAngle', function () {
  it.todo('test');
});
describe('parseKeyword', function () {
  it.todo('test');
});
describe('dashedToCamelCase', function () {
  it.todo('test');
});
describe('shorthandParser', function () {
  it.todo('test');
});
describe('shorthandSetter', function () {
  it.todo('test');
});
describe('shorthandGetter', function () {
  it.todo('test');
});
describe('implicitSetter', function () {
  it.todo('test');
});
describe('subImplicitSetter', function () {
  it.todo('test');
});
describe('camelToDashed', function () {
  it.todo('test');
});