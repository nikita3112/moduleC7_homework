'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.run = run;

function _os() {
  var data = require('os');

  _os = function _os() {
    return data;
  };

  return data;
}

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _yargs() {
  var data = _interopRequireDefault(require('yargs'));

  _yargs = function _yargs() {
    return data;
  };

  return data;
}

function _console() {
  var data = require('@jest/console');

  _console = function _console() {
    return data;
  };

  return data;
}

function _jestConfig() {
  var data = require('jest-config');

  _jestConfig = function _jestConfig() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _jestValidate() {
  var data = require('jest-validate');

  _jestValidate = function _jestValidate() {
    return data;
  };

  return data;
}

function _version() {
  var data = require('../version');

  _version = function _version() {
    return data;
  };

  return data;
}

var args = _interopRequireWildcard(require('./args'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


function run(cliArgv, cliInfo) {
  var argv, root, filePath, info, options, globalConfig, config, Runtime, _runtime$unstable_sho2, hasteMap, Environment, environment, runtime, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _path, _runtime$unstable_sho, _esm, esm;

  return regeneratorRuntime.async(function run$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (cliArgv) {
            argv = cliArgv;
          } else {
            argv = _yargs()["default"].usage(args.usage).help(false).version(false).options(args.options).argv;
            (0, _jestValidate().validateCLIOptions)(argv, _objectSpread({}, args.options, {
              deprecationEntries: _jestConfig().deprecationEntries
            }));
          }

          if (!argv.help) {
            _context.next = 5;
            break;
          }

          _yargs()["default"].showHelp();

          process.on('exit', function () {
            return process.exitCode = 1;
          });
          return _context.abrupt("return");

        case 5:
          if (!argv.version) {
            _context.next = 8;
            break;
          }

          console.log("v".concat(_version().VERSION, "\n"));
          return _context.abrupt("return");

        case 8:
          if (argv._.length) {
            _context.next = 12;
            break;
          }

          console.log('Please provide a path to a script. (See --help for details)');
          process.on('exit', function () {
            return process.exitCode = 1;
          });
          return _context.abrupt("return");

        case 12:
          root = (0, _jestUtil().tryRealpath)(process.cwd());
          filePath = path().resolve(root, argv._[0]);

          if (argv.debug) {
            info = cliInfo ? ', ' + cliInfo.join(', ') : '';
            console.log("Using Jest Runtime v".concat(_version().VERSION).concat(info));
          }

          _context.next = 17;
          return regeneratorRuntime.awrap((0, _jestConfig().readConfig)(argv, root));

        case 17:
          options = _context.sent;
          globalConfig = options.globalConfig; // Always disable automocking in scripts.

          config = _objectSpread({}, options.projectConfig, {
            automock: false
          });
          Runtime = require('..');
          _context.prev = 21;
          _context.next = 24;
          return regeneratorRuntime.awrap(Runtime.createContext(config, {
            maxWorkers: Math.max((0, _os().cpus)().length - 1, 1),
            watchman: globalConfig.watchman
          }));

        case 24:
          hasteMap = _context.sent;
          Environment = require(config.testEnvironment);
          environment = new Environment(config);
          (0, _jestUtil().setGlobal)(environment.global, 'console', new (_console().CustomConsole)(process.stdout, process.stderr));
          (0, _jestUtil().setGlobal)(environment.global, 'jestProjectConfig', config);
          (0, _jestUtil().setGlobal)(environment.global, 'jestGlobalConfig', globalConfig);
          runtime = new Runtime(config, environment, hasteMap.resolver, undefined, undefined, filePath);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 34;
          _iterator = config.setupFiles[Symbol.iterator]();

        case 36:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 48;
            break;
          }

          _path = _step.value;
          // TODO: remove ? in Jest 26
          _esm = (_runtime$unstable_sho = runtime.unstable_shouldLoadAsEsm) === null || _runtime$unstable_sho === void 0 ? void 0 : _runtime$unstable_sho.call(runtime, _path);

          if (!_esm) {
            _context.next = 44;
            break;
          }

          _context.next = 42;
          return regeneratorRuntime.awrap(runtime.unstable_importModule(_path));

        case 42:
          _context.next = 45;
          break;

        case 44:
          runtime.requireModule(_path);

        case 45:
          _iteratorNormalCompletion = true;
          _context.next = 36;
          break;

        case 48:
          _context.next = 54;
          break;

        case 50:
          _context.prev = 50;
          _context.t0 = _context["catch"](34);
          _didIteratorError = true;
          _iteratorError = _context.t0;

        case 54:
          _context.prev = 54;
          _context.prev = 55;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 57:
          _context.prev = 57;

          if (!_didIteratorError) {
            _context.next = 60;
            break;
          }

          throw _iteratorError;

        case 60:
          return _context.finish(57);

        case 61:
          return _context.finish(54);

        case 62:
          // TODO: remove ? in Jest 26
          esm = (_runtime$unstable_sho2 = runtime.unstable_shouldLoadAsEsm) === null || _runtime$unstable_sho2 === void 0 ? void 0 : _runtime$unstable_sho2.call(runtime, filePath);

          if (!esm) {
            _context.next = 68;
            break;
          }

          _context.next = 66;
          return regeneratorRuntime.awrap(runtime.unstable_importModule(filePath));

        case 66:
          _context.next = 69;
          break;

        case 68:
          runtime.requireModule(filePath);

        case 69:
          _context.next = 75;
          break;

        case 71:
          _context.prev = 71;
          _context.t1 = _context["catch"](21);
          console.error(_chalk()["default"].red(_context.t1.stack || _context.t1));
          process.on('exit', function () {
            return process.exitCode = 1;
          });

        case 75:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[21, 71], [34, 50, 54, 62], [55,, 57, 61]]);
}