'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.findSiblingsWithFileExtension = exports.decodePossibleOutsideJestVmPath = exports.createOutsideJestVmPath = void 0;

function path() {
  var data = _interopRequireWildcard(require('path'));

  path = function path() {
    return data;
  };

  return data;
}

function _glob() {
  var data = _interopRequireDefault(require('glob'));

  _glob = function _glob() {
    return data;
  };

  return data;
}

function _slash() {
  var data = _interopRequireDefault(require('slash'));

  _slash = function _slash() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== 'object' && typeof obj !== 'function') {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var OUTSIDE_JEST_VM_PROTOCOL = 'jest-main:'; // String manipulation is easier here, fileURLToPath is only in newer Nodes,
// plus setting non-standard protocols on URL objects is difficult.

var createOutsideJestVmPath = function createOutsideJestVmPath(path) {
  return OUTSIDE_JEST_VM_PROTOCOL + '//' + encodeURIComponent(path);
};

exports.createOutsideJestVmPath = createOutsideJestVmPath;

var decodePossibleOutsideJestVmPath = function decodePossibleOutsideJestVmPath(outsideJestVmPath) {
  if (outsideJestVmPath.startsWith(OUTSIDE_JEST_VM_PROTOCOL)) {
    return decodeURIComponent(outsideJestVmPath.replace(new RegExp('^' + OUTSIDE_JEST_VM_PROTOCOL + '//'), ''));
  }

  return undefined;
};

exports.decodePossibleOutsideJestVmPath = decodePossibleOutsideJestVmPath;

var findSiblingsWithFileExtension = function findSiblingsWithFileExtension(moduleFileExtensions, from, moduleName) {
  if (!path().isAbsolute(moduleName) && path().extname(moduleName) === '') {
    var dirname = path().dirname(from);
    var pathToModule = path().resolve(dirname, moduleName);

    try {
      var slashedDirname = (0, _slash()["default"])(dirname);

      var matches = _glob()["default"].sync("".concat(pathToModule, ".*")).map(function (match) {
        return (0, _slash()["default"])(match);
      }).map(function (match) {
        var relativePath = path().posix.relative(slashedDirname, match);
        return path().posix.dirname(match) === slashedDirname ? "./".concat(relativePath) : relativePath;
      }).map(function (match) {
        return "\t'".concat(match, "'");
      }).join('\n');

      if (matches) {
        var foundMessage = "\n\nHowever, Jest was able to find:\n".concat(matches);
        var mappedModuleFileExtensions = moduleFileExtensions.map(function (ext) {
          return "'".concat(ext, "'");
        }).join(', ');
        return foundMessage + "\n\nYou might want to include a file extension in your import, or update your 'moduleFileExtensions', which is currently " + "[".concat(mappedModuleFileExtensions, "].\n\nSee https://jestjs.io/docs/en/configuration#modulefileextensions-arraystring");
      }
    } catch (_unused) {}
  }

  return '';
};

exports.findSiblingsWithFileExtension = findSiblingsWithFileExtension;