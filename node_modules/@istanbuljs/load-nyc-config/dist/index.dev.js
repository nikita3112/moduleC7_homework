'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var fs = require('fs');

var path = require('path');

var _require = require('util'),
    promisify = _require.promisify;

var camelcase = require('camelcase');

var findUp = require('find-up');

var resolveFrom = require('resolve-from');

var getPackageType = require('get-package-type');

var readFile = promisify(fs.readFile);
var loadActive = false;

function isLoading() {
  return loadActive;
}

var standardConfigFiles = ['.nycrc', '.nycrc.json', '.nycrc.yml', '.nycrc.yaml', 'nyc.config.js', 'nyc.config.cjs', 'nyc.config.mjs'];

function camelcasedConfig(config) {
  var results = {};

  for (var _i = 0, _Object$entries = Object.entries(config); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        field = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    results[camelcase(field)] = value;
  }

  return results;
}

function findPackage(options) {
  var cwd, pkgPath, pkgConfig;
  return regeneratorRuntime.async(function findPackage$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          cwd = options.cwd || process.env.NYC_CWD || process.cwd();
          _context.next = 3;
          return regeneratorRuntime.awrap(findUp('package.json', {
            cwd: cwd
          }));

        case 3:
          pkgPath = _context.sent;

          if (!pkgPath) {
            _context.next = 15;
            break;
          }

          _context.t1 = JSON;
          _context.next = 8;
          return regeneratorRuntime.awrap(readFile(pkgPath, 'utf8'));

        case 8:
          _context.t2 = _context.sent;
          _context.t0 = _context.t1.parse.call(_context.t1, _context.t2).nyc;

          if (_context.t0) {
            _context.next = 12;
            break;
          }

          _context.t0 = {};

        case 12:
          pkgConfig = _context.t0;

          if ('cwd' in pkgConfig) {
            pkgConfig.cwd = path.resolve(path.dirname(pkgPath), pkgConfig.cwd);
          }

          return _context.abrupt("return", {
            cwd: path.dirname(pkgPath),
            pkgConfig: pkgConfig
          });

        case 15:
          return _context.abrupt("return", {
            cwd: cwd,
            pkgConfig: {}
          });

        case 16:
        case "end":
          return _context.stop();
      }
    }
  });
}

function actualLoad(configFile) {
  var configExt;
  return regeneratorRuntime.async(function actualLoad$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (configFile) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return", {});

        case 2:
          configExt = path.extname(configFile).toLowerCase();
          _context2.t0 = configExt;
          _context2.next = _context2.t0 === '.js' ? 6 : _context2.t0 === '.cjs' ? 11 : _context2.t0 === '.mjs' ? 12 : _context2.t0 === '.yml' ? 13 : _context2.t0 === '.yaml' ? 13 : 18;
          break;

        case 6:
          _context2.next = 8;
          return regeneratorRuntime.awrap(getPackageType(configFile));

        case 8:
          _context2.t1 = _context2.sent;

          if (!(_context2.t1 === 'module')) {
            _context2.next = 11;
            break;
          }

          return _context2.abrupt("return", require('./load-esm')(configFile));

        case 11:
          return _context2.abrupt("return", require(configFile));

        case 12:
          return _context2.abrupt("return", require('./load-esm')(configFile));

        case 13:
          _context2.t2 = require('js-yaml');
          _context2.next = 16;
          return regeneratorRuntime.awrap(readFile(configFile, 'utf8'));

        case 16:
          _context2.t3 = _context2.sent;
          return _context2.abrupt("return", _context2.t2.load.call(_context2.t2, _context2.t3));

        case 18:
          _context2.t4 = JSON;
          _context2.next = 21;
          return regeneratorRuntime.awrap(readFile(configFile, 'utf8'));

        case 21:
          _context2.t5 = _context2.sent;
          return _context2.abrupt("return", _context2.t4.parse.call(_context2.t4, _context2.t5));

        case 23:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function loadFile(configFile) {
  return regeneratorRuntime.async(function loadFile$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          /* This lets @istanbuljs/esm-loader-hook avoid circular initialization when loading
           * configuration.  This should generally only happen when the loader hook is active
           * on the main nyc process. */
          loadActive = true;
          _context3.prev = 1;
          _context3.next = 4;
          return regeneratorRuntime.awrap(actualLoad(configFile));

        case 4:
          return _context3.abrupt("return", _context3.sent);

        case 5:
          _context3.prev = 5;
          loadActive = false;
          return _context3.finish(5);

        case 8:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[1,, 5, 8]]);
}

function applyExtends(config, filename) {
  var loopCheck,
      extConfigs,
      filePath,
      _iteratorNormalCompletion,
      _didIteratorError,
      _iteratorError,
      _iterator,
      _step,
      extConfig,
      configFile,
      configLoaded,
      _args4 = arguments;

  return regeneratorRuntime.async(function applyExtends$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          loopCheck = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : new Set();
          config = camelcasedConfig(config);

          if (!('extends' in config)) {
            _context4.next = 48;
            break;
          }

          extConfigs = [].concat(config["extends"]);

          if (!extConfigs.some(function (e) {
            return typeof e !== 'string';
          })) {
            _context4.next = 6;
            break;
          }

          throw new TypeError("".concat(filename, " contains an invalid 'extends' option"));

        case 6:
          delete config["extends"];
          filePath = path.dirname(filename);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context4.prev = 11;
          _iterator = extConfigs[Symbol.iterator]();

        case 13:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context4.next = 34;
            break;
          }

          extConfig = _step.value;
          configFile = resolveFrom.silent(filePath, extConfig) || resolveFrom.silent(filePath, './' + extConfig);

          if (configFile) {
            _context4.next = 18;
            break;
          }

          throw new Error("Could not resolve configuration file ".concat(extConfig, " from ").concat(path.dirname(filename), "."));

        case 18:
          if (!loopCheck.has(configFile)) {
            _context4.next = 20;
            break;
          }

          throw new Error("Circular extended configurations: '".concat(configFile, "'."));

        case 20:
          loopCheck.add(configFile); // eslint-disable-next-line no-await-in-loop

          _context4.next = 23;
          return regeneratorRuntime.awrap(loadFile(configFile));

        case 23:
          configLoaded = _context4.sent;

          if ('cwd' in configLoaded) {
            configLoaded.cwd = path.resolve(path.dirname(configFile), configLoaded.cwd);
          }

          _context4.t0 = Object;
          _context4.t1 = config;
          _context4.next = 29;
          return regeneratorRuntime.awrap(applyExtends(configLoaded, configFile, loopCheck));

        case 29:
          _context4.t2 = _context4.sent;

          _context4.t0.assign.call(_context4.t0, _context4.t1, _context4.t2);

        case 31:
          _iteratorNormalCompletion = true;
          _context4.next = 13;
          break;

        case 34:
          _context4.next = 40;
          break;

        case 36:
          _context4.prev = 36;
          _context4.t3 = _context4["catch"](11);
          _didIteratorError = true;
          _iteratorError = _context4.t3;

        case 40:
          _context4.prev = 40;
          _context4.prev = 41;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 43:
          _context4.prev = 43;

          if (!_didIteratorError) {
            _context4.next = 46;
            break;
          }

          throw _iteratorError;

        case 46:
          return _context4.finish(43);

        case 47:
          return _context4.finish(40);

        case 48:
          return _context4.abrupt("return", config);

        case 49:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, [[11, 36, 40, 48], [41,, 43, 47]]);
}

function loadNycConfig() {
  var options,
      _ref,
      cwd,
      pkgConfig,
      configFiles,
      configFile,
      config,
      arrayFields,
      _i2,
      _arrayFields,
      arrayField,
      _args5 = arguments;

  return regeneratorRuntime.async(function loadNycConfig$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};
          _context5.next = 3;
          return regeneratorRuntime.awrap(findPackage(options));

        case 3:
          _ref = _context5.sent;
          cwd = _ref.cwd;
          pkgConfig = _ref.pkgConfig;
          configFiles = [].concat(options.nycrcPath || standardConfigFiles);
          _context5.next = 9;
          return regeneratorRuntime.awrap(findUp(configFiles, {
            cwd: cwd
          }));

        case 9:
          configFile = _context5.sent;

          if (!(options.nycrcPath && !configFile)) {
            _context5.next = 12;
            break;
          }

          throw new Error("Requested configuration file ".concat(options.nycrcPath, " not found"));

        case 12:
          _context5.t0 = _objectSpread;
          _context5.t1 = {
            cwd: cwd
          };
          _context5.next = 16;
          return regeneratorRuntime.awrap(applyExtends(pkgConfig, path.join(cwd, 'package.json')));

        case 16:
          _context5.t2 = _context5.sent;
          _context5.t3 = {};
          _context5.t4 = regeneratorRuntime;
          _context5.t5 = applyExtends;
          _context5.next = 22;
          return regeneratorRuntime.awrap(loadFile(configFile));

        case 22:
          _context5.t6 = _context5.sent;
          _context5.t7 = configFile;
          _context5.t8 = (0, _context5.t5)(_context5.t6, _context5.t7);
          _context5.next = 27;
          return _context5.t4.awrap.call(_context5.t4, _context5.t8);

        case 27:
          _context5.t9 = _context5.sent;
          config = (0, _context5.t0)(_context5.t1, _context5.t2, _context5.t3, _context5.t9);
          arrayFields = ['require', 'extension', 'exclude', 'include'];

          for (_i2 = 0, _arrayFields = arrayFields; _i2 < _arrayFields.length; _i2++) {
            arrayField = _arrayFields[_i2];

            if (config[arrayField]) {
              config[arrayField] = [].concat(config[arrayField]);
            }
          }

          return _context5.abrupt("return", config);

        case 32:
        case "end":
          return _context5.stop();
      }
    }
  });
}

module.exports = {
  loadNycConfig: loadNycConfig,
  isLoading: isLoading
};