'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prompts = require('./prompts');

var passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];

var noop = function noop() {};
/**
 * Prompt for a series of questions
 * @param {Array|Object} questions Single question object or Array of question objects
 * @param {Function} [onSubmit] Callback function called on prompt submit
 * @param {Function} [onCancel] Callback function called on cancel/abort
 * @returns {Object} Object with values from user input
 */


function prompt() {
  var questions,
      _ref,
      _ref$onSubmit,
      onSubmit,
      _ref$onCancel,
      onCancel,
      answers,
      override,
      answer,
      question,
      quit,
      name,
      type,
      lastPrompt,
      getFormattedAnswer,
      _iteratorNormalCompletion,
      _didIteratorError,
      _iteratorError,
      _iterator,
      _step,
      _question,
      key,
      value,
      _question2,
      _args2 = arguments;

  return regeneratorRuntime.async(function prompt$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          questions = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : [];
          _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, _ref$onSubmit = _ref.onSubmit, onSubmit = _ref$onSubmit === void 0 ? noop : _ref$onSubmit, _ref$onCancel = _ref.onCancel, onCancel = _ref$onCancel === void 0 ? noop : _ref$onCancel;
          answers = {};
          override = prompt._override || {};
          questions = [].concat(questions);

          getFormattedAnswer = function getFormattedAnswer(question, answer) {
            var skipValidation,
                _args = arguments;
            return regeneratorRuntime.async(function getFormattedAnswer$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    skipValidation = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;

                    if (!(!skipValidation && question.validate && question.validate(answer) !== true)) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return");

                  case 3:
                    if (!question.format) {
                      _context.next = 9;
                      break;
                    }

                    _context.next = 6;
                    return regeneratorRuntime.awrap(question.format(answer, answers));

                  case 6:
                    _context.t0 = _context.sent;
                    _context.next = 10;
                    break;

                  case 9:
                    _context.t0 = answer;

                  case 10:
                    return _context.abrupt("return", _context.t0);

                  case 11:
                  case "end":
                    return _context.stop();
                }
              }
            });
          };

          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 9;
          _iterator = questions[Symbol.iterator]();

        case 11:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 81;
            break;
          }

          question = _step.value;
          _question = question;
          name = _question.name;
          type = _question.type;

          if (!(typeof type === 'function')) {
            _context2.next = 21;
            break;
          }

          _context2.next = 19;
          return regeneratorRuntime.awrap(type(answer, _objectSpread({}, answers), question));

        case 19:
          type = _context2.sent;
          question['type'] = type;

        case 21:
          if (type) {
            _context2.next = 23;
            break;
          }

          return _context2.abrupt("continue", 78);

        case 23:
          _context2.t0 = regeneratorRuntime.keys(question);

        case 24:
          if ((_context2.t1 = _context2.t0()).done) {
            _context2.next = 39;
            break;
          }

          key = _context2.t1.value;

          if (!passOn.includes(key)) {
            _context2.next = 28;
            break;
          }

          return _context2.abrupt("continue", 24);

        case 28:
          value = question[key];

          if (!(typeof value === 'function')) {
            _context2.next = 35;
            break;
          }

          _context2.next = 32;
          return regeneratorRuntime.awrap(value(answer, _objectSpread({}, answers), lastPrompt));

        case 32:
          _context2.t2 = _context2.sent;
          _context2.next = 36;
          break;

        case 35:
          _context2.t2 = value;

        case 36:
          question[key] = _context2.t2;
          _context2.next = 24;
          break;

        case 39:
          lastPrompt = question;

          if (!(typeof question.message !== 'string')) {
            _context2.next = 42;
            break;
          }

          throw new Error('prompt message is required');

        case 42:
          _question2 = question;
          name = _question2.name;
          type = _question2.type;

          if (!(prompts[type] === void 0)) {
            _context2.next = 47;
            break;
          }

          throw new Error("prompt type (".concat(type, ") is not defined"));

        case 47:
          if (!(override[question.name] !== undefined)) {
            _context2.next = 54;
            break;
          }

          _context2.next = 50;
          return regeneratorRuntime.awrap(getFormattedAnswer(question, override[question.name]));

        case 50:
          answer = _context2.sent;

          if (!(answer !== undefined)) {
            _context2.next = 54;
            break;
          }

          answers[name] = answer;
          return _context2.abrupt("continue", 78);

        case 54:
          _context2.prev = 54;

          if (!prompt._injected) {
            _context2.next = 59;
            break;
          }

          _context2.t3 = getInjectedAnswer(prompt._injected, question.initial);
          _context2.next = 62;
          break;

        case 59:
          _context2.next = 61;
          return regeneratorRuntime.awrap(prompts[type](question));

        case 61:
          _context2.t3 = _context2.sent;

        case 62:
          answer = _context2.t3;
          _context2.next = 65;
          return regeneratorRuntime.awrap(getFormattedAnswer(question, answer, true));

        case 65:
          answers[name] = answer = _context2.sent;
          _context2.next = 68;
          return regeneratorRuntime.awrap(onSubmit(question, answer, answers));

        case 68:
          quit = _context2.sent;
          _context2.next = 76;
          break;

        case 71:
          _context2.prev = 71;
          _context2.t4 = _context2["catch"](54);
          _context2.next = 75;
          return regeneratorRuntime.awrap(onCancel(question, answers));

        case 75:
          quit = !_context2.sent;

        case 76:
          if (!quit) {
            _context2.next = 78;
            break;
          }

          return _context2.abrupt("return", answers);

        case 78:
          _iteratorNormalCompletion = true;
          _context2.next = 11;
          break;

        case 81:
          _context2.next = 87;
          break;

        case 83:
          _context2.prev = 83;
          _context2.t5 = _context2["catch"](9);
          _didIteratorError = true;
          _iteratorError = _context2.t5;

        case 87:
          _context2.prev = 87;
          _context2.prev = 88;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 90:
          _context2.prev = 90;

          if (!_didIteratorError) {
            _context2.next = 93;
            break;
          }

          throw _iteratorError;

        case 93:
          return _context2.finish(90);

        case 94:
          return _context2.finish(87);

        case 95:
          return _context2.abrupt("return", answers);

        case 96:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[9, 83, 87, 95], [54, 71], [88,, 90, 94]]);
}

function getInjectedAnswer(injected, deafultValue) {
  var answer = injected.shift();

  if (answer instanceof Error) {
    throw answer;
  }

  return answer === undefined ? deafultValue : answer;
}

function inject(answers) {
  prompt._injected = (prompt._injected || []).concat(answers);
}

function override(answers) {
  prompt._override = Object.assign({}, answers);
}

module.exports = Object.assign(prompt, {
  prompt: prompt,
  prompts: prompts,
  inject: inject,
  override: override
});