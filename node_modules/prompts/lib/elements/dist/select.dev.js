'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var color = require('kleur');

var Prompt = require('./prompt');

var _require = require('../util'),
    style = _require.style,
    clear = _require.clear,
    figures = _require.figures,
    wrap = _require.wrap,
    entriesToDisplay = _require.entriesToDisplay;

var _require2 = require('sisteransi'),
    cursor = _require2.cursor;
/**
 * SelectPrompt Base Element
 * @param {Object} opts Options
 * @param {String} opts.message Message
 * @param {Array} opts.choices Array of choice objects
 * @param {String} [opts.hint] Hint to display
 * @param {Number} [opts.initial] Index of default value
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 * @param {Number} [opts.optionsPerPage=10] Max options to display at once
 */


var SelectPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(SelectPrompt, _Prompt);

  function SelectPrompt() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SelectPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectPrompt).call(this, opts));
    _this.msg = opts.message;
    _this.hint = opts.hint || '- Use arrow-keys. Return to submit.';
    _this.warn = opts.warn || '- This option is disabled';
    _this.cursor = opts.initial || 0;
    _this.choices = opts.choices.map(function (ch, idx) {
      if (typeof ch === 'string') ch = {
        title: ch,
        value: idx
      };
      return {
        title: ch && (ch.title || ch.value || ch),
        value: ch && (ch.value === undefined ? idx : ch.value),
        description: ch && ch.description,
        selected: ch && ch.selected,
        disabled: ch && ch.disabled
      };
    });
    _this.optionsPerPage = opts.optionsPerPage || 10;
    _this.value = (_this.choices[_this.cursor] || {}).value;
    _this.clear = clear('', _this.out.columns);

    _this.render();

    return _this;
  }

  _createClass(SelectPrompt, [{
    key: "moveCursor",
    value: function moveCursor(n) {
      this.cursor = n;
      this.value = this.choices[n].value;
      this.fire();
    }
  }, {
    key: "reset",
    value: function reset() {
      this.moveCursor(0);
      this.fire();
      this.render();
    }
  }, {
    key: "exit",
    value: function exit() {
      this.abort();
    }
  }, {
    key: "abort",
    value: function abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write('\n');
      this.close();
    }
  }, {
    key: "submit",
    value: function submit() {
      if (!this.selection.disabled) {
        this.done = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write('\n');
        this.close();
      } else this.bell();
    }
  }, {
    key: "first",
    value: function first() {
      this.moveCursor(0);
      this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.moveCursor(this.choices.length - 1);
      this.render();
    }
  }, {
    key: "up",
    value: function up() {
      if (this.cursor === 0) {
        this.moveCursor(this.choices.length - 1);
      } else {
        this.moveCursor(this.cursor - 1);
      }

      this.render();
    }
  }, {
    key: "down",
    value: function down() {
      if (this.cursor === this.choices.length - 1) {
        this.moveCursor(0);
      } else {
        this.moveCursor(this.cursor + 1);
      }

      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      this.moveCursor((this.cursor + 1) % this.choices.length);
      this.render();
    }
  }, {
    key: "_",
    value: function _(c, key) {
      if (c === ' ') return this.submit();
    }
  }, {
    key: "render",
    value: function render() {
      if (this.closed) return;
      if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));

      _get(_getPrototypeOf(SelectPrompt.prototype), "render", this).call(this);

      var _entriesToDisplay = entriesToDisplay(this.cursor, this.choices.length, this.optionsPerPage),
          startIndex = _entriesToDisplay.startIndex,
          endIndex = _entriesToDisplay.endIndex; // Print prompt


      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.done ? this.selection.title : this.selection.disabled ? color.yellow(this.warn) : color.gray(this.hint)].join(' '); // Print choices

      if (!this.done) {
        this.outputText += '\n';

        for (var i = startIndex; i < endIndex; i++) {
          var title = void 0,
              prefix = void 0,
              desc = '',
              v = this.choices[i]; // Determine whether to display "more choices" indicators

          if (i === startIndex && startIndex > 0) {
            prefix = figures.arrowUp;
          } else if (i === endIndex - 1 && endIndex < this.choices.length) {
            prefix = figures.arrowDown;
          } else {
            prefix = ' ';
          }

          if (v.disabled) {
            title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
            prefix = (this.cursor === i ? color.bold().gray(figures.pointer) + ' ' : '  ') + prefix;
          } else {
            title = this.cursor === i ? color.cyan().underline(v.title) : v.title;
            prefix = (this.cursor === i ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;

            if (v.description && this.cursor === i) {
              desc = " - ".concat(v.description);

              if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
                desc = '\n' + wrap(v.description, {
                  margin: 3,
                  width: this.out.columns
                });
              }
            }
          }

          this.outputText += "".concat(prefix, " ").concat(title).concat(color.gray(desc), "\n");
        }
      }

      this.out.write(this.outputText);
    }
  }, {
    key: "selection",
    get: function get() {
      return this.choices[this.cursor];
    }
  }]);

  return SelectPrompt;
}(Prompt);

module.exports = SelectPrompt;