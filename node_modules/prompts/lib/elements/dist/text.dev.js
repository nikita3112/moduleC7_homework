"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var color = require('kleur');

var Prompt = require('./prompt');

var _require = require('sisteransi'),
    erase = _require.erase,
    cursor = _require.cursor;

var _require2 = require('../util'),
    style = _require2.style,
    clear = _require2.clear,
    lines = _require2.lines,
    figures = _require2.figures;
/**
 * TextPrompt Base Element
 * @param {Object} opts Options
 * @param {String} opts.message Message
 * @param {String} [opts.style='default'] Render style
 * @param {String} [opts.initial] Default value
 * @param {Function} [opts.validate] Validate function
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 * @param {String} [opts.error] The invalid error label
 */


var TextPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(TextPrompt, _Prompt);

  function TextPrompt() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TextPrompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextPrompt).call(this, opts));
    _this.transform = style.render(opts.style);
    _this.scale = _this.transform.scale;
    _this.msg = opts.message;
    _this.initial = opts.initial || "";

    _this.validator = opts.validate || function () {
      return true;
    };

    _this.value = "";
    _this.errorMsg = opts.error || "Please Enter A Valid Value";
    _this.cursor = Number(!!_this.initial);
    _this.clear = clear("", _this.out.columns);

    _this.render();

    return _this;
  }

  _createClass(TextPrompt, [{
    key: "reset",
    value: function reset() {
      this.value = "";
      this.cursor = Number(!!this.initial);
      this.fire();
      this.render();
    }
  }, {
    key: "exit",
    value: function exit() {
      this.abort();
    }
  }, {
    key: "abort",
    value: function abort() {
      this.value = this.value || this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.red = false;
      this.fire();
      this.render();
      this.out.write('\n');
      this.close();
    }
  }, {
    key: "validate",
    value: function validate() {
      var valid;
      return regeneratorRuntime.async(function validate$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(this.validator(this.value));

            case 2:
              valid = _context.sent;

              if (typeof valid === "string") {
                this.errorMsg = valid;
                valid = false;
              }

              this.error = !valid;

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "submit",
    value: function submit() {
      return regeneratorRuntime.async(function submit$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.value = this.value || this.initial;
              _context2.next = 3;
              return regeneratorRuntime.awrap(this.validate());

            case 3:
              if (!this.error) {
                _context2.next = 8;
                break;
              }

              this.red = true;
              this.fire();
              this.render();
              return _context2.abrupt("return");

            case 8:
              this.done = true;
              this.aborted = false;
              this.fire();
              this.render();
              this.out.write('\n');
              this.close();

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "next",
    value: function next() {
      if (!this.placeholder) return this.bell();
      this.value = this.initial;
      this.cursor = this.rendered.length;
      this.fire();
      this.render();
    }
  }, {
    key: "moveCursor",
    value: function moveCursor(n) {
      if (this.placeholder) return;
      this.cursor = this.cursor + n;
    }
  }, {
    key: "_",
    value: function _(c, key) {
      var s1 = this.value.slice(0, this.cursor);
      var s2 = this.value.slice(this.cursor);
      this.value = "".concat(s1).concat(c).concat(s2);
      this.red = false;
      this.cursor = this.placeholder ? 0 : s1.length + 1;
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      if (this.cursor === 0) return this.bell();
      var s1 = this.value.slice(0, this.cursor - 1);
      var s2 = this.value.slice(this.cursor);
      this.value = "".concat(s1).concat(s2);
      this.red = false;
      this.moveCursor(-1);
      this.render();
    }
  }, {
    key: "deleteForward",
    value: function deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
      var s1 = this.value.slice(0, this.cursor);
      var s2 = this.value.slice(this.cursor + 1);
      this.value = "".concat(s1).concat(s2);
      this.red = false;
      this.render();
    }
  }, {
    key: "first",
    value: function first() {
      this.cursor = 0;
      this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.cursor = this.value.length;
      this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0 || this.placeholder) return this.bell();
      this.moveCursor(-1);
      this.render();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder) return this.bell();
      this.moveCursor(1);
      this.render();
    }
  }, {
    key: "render",
    value: function render() {
      if (this.closed) return;

      if (!this.firstRender) {
        if (this.outputError) this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
        this.out.write(clear(this.outputText, this.out.columns));
      }

      _get(_getPrototypeOf(TextPrompt.prototype), "render", this).call(this);

      this.outputError = '';
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.red ? color.red(this.rendered) : this.rendered].join(" ");

      if (this.error) {
        this.outputError += this.errorMsg.split("\n").reduce(function (a, l, i) {
          return a + "\n".concat(i ? ' ' : figures.pointerSmall, " ").concat(color.red().italic(l));
        }, "");
      }

      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }, {
    key: "value",
    set: function set(v) {
      if (!v && this.initial) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render(this.initial));
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render(v);
      }

      this._value = v;
      this.fire();
    },
    get: function get() {
      return this._value;
    }
  }]);

  return TextPrompt;
}(Prompt);

module.exports = TextPrompt;