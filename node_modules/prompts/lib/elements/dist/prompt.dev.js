'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var readline = require('readline');

var _require = require('../util'),
    action = _require.action;

var EventEmitter = require('events');

var _require2 = require('sisteransi'),
    beep = _require2.beep,
    cursor = _require2.cursor;

var color = require('kleur');
/**
 * Base prompt skeleton
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 */


var Prompt =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Prompt, _EventEmitter);

  function Prompt() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Prompt);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Prompt).call(this));
    _this.firstRender = true;
    _this["in"] = opts.stdin || process.stdin;
    _this.out = opts.stdout || process.stdout;

    _this.onRender = (opts.onRender || function () {
      return void 0;
    }).bind(_assertThisInitialized(_this));

    var rl = readline.createInterface({
      input: _this["in"],
      escapeCodeTimeout: 50
    });
    readline.emitKeypressEvents(_this["in"], rl);
    if (_this["in"].isTTY) _this["in"].setRawMode(true);
    var isSelect = ['SelectPrompt', 'MultiselectPrompt'].indexOf(_this.constructor.name) > -1;

    var keypress = function keypress(str, key) {
      var a = action(key, isSelect);

      if (a === false) {
        _this._ && _this._(str, key);
      } else if (typeof _this[a] === 'function') {
        _this[a](key);
      } else {
        _this.bell();
      }
    };

    _this.close = function () {
      _this.out.write(cursor.show);

      _this["in"].removeListener('keypress', keypress);

      if (_this["in"].isTTY) _this["in"].setRawMode(false);
      rl.close();

      _this.emit(_this.aborted ? 'abort' : _this.exited ? 'exit' : 'submit', _this.value);

      _this.closed = true;
    };

    _this["in"].on('keypress', keypress);

    return _this;
  }

  _createClass(Prompt, [{
    key: "fire",
    value: function fire() {
      this.emit('state', {
        value: this.value,
        aborted: !!this.aborted,
        exited: !!this.exited
      });
    }
  }, {
    key: "bell",
    value: function bell() {
      this.out.write(beep);
    }
  }, {
    key: "render",
    value: function render() {
      this.onRender(color);
      if (this.firstRender) this.firstRender = false;
    }
  }]);

  return Prompt;
}(EventEmitter);

module.exports = Prompt;