'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var color = require('kleur');

var Prompt = require('./prompt');

var _require = require('sisteransi'),
    erase = _require.erase,
    cursor = _require.cursor;

var _require2 = require('../util'),
    style = _require2.style,
    clear = _require2.clear,
    figures = _require2.figures,
    wrap = _require2.wrap,
    entriesToDisplay = _require2.entriesToDisplay;

var getVal = function getVal(arr, i) {
  return arr[i] && (arr[i].value || arr[i].title || arr[i]);
};

var getTitle = function getTitle(arr, i) {
  return arr[i] && (arr[i].title || arr[i].value || arr[i]);
};

var getIndex = function getIndex(arr, valOrTitle) {
  var index = arr.findIndex(function (el) {
    return el.value === valOrTitle || el.title === valOrTitle;
  });
  return index > -1 ? index : undefined;
};
/**
 * TextPrompt Base Element
 * @param {Object} opts Options
 * @param {String} opts.message Message
 * @param {Array} opts.choices Array of auto-complete choices objects
 * @param {Function} [opts.suggest] Filter function. Defaults to sort by title
 * @param {Number} [opts.limit=10] Max number of results to show
 * @param {Number} [opts.cursor=0] Cursor start position
 * @param {String} [opts.style='default'] Render style
 * @param {String} [opts.fallback] Fallback message - initial to default value
 * @param {String} [opts.initial] Index of the default value
 * @param {Boolean} [opts.clearFirst] The first ESCAPE keypress will clear the input
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 * @param {String} [opts.noMatches] The no matches found label
 */


var AutocompletePrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(AutocompletePrompt, _Prompt);

  function AutocompletePrompt() {
    var _this2;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AutocompletePrompt);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AutocompletePrompt).call(this, opts));
    _this2.msg = opts.message;
    _this2.suggest = opts.suggest;
    _this2.choices = opts.choices;
    _this2.initial = typeof opts.initial === 'number' ? opts.initial : getIndex(opts.choices, opts.initial);
    _this2.select = _this2.initial || opts.cursor || 0;
    _this2.i18n = {
      noMatches: opts.noMatches || 'no matches found'
    };
    _this2.fallback = opts.fallback || _this2.initial;
    _this2.clearFirst = opts.clearFirst || false;
    _this2.suggestions = [];
    _this2.input = '';
    _this2.limit = opts.limit || 10;
    _this2.cursor = 0;
    _this2.transform = style.render(opts.style);
    _this2.scale = _this2.transform.scale;
    _this2.render = _this2.render.bind(_assertThisInitialized(_this2));
    _this2.complete = _this2.complete.bind(_assertThisInitialized(_this2));
    _this2.clear = clear('', _this2.out.columns);

    _this2.complete(_this2.render);

    _this2.render();

    return _this2;
  }

  _createClass(AutocompletePrompt, [{
    key: "moveSelect",
    value: function moveSelect(i) {
      this.select = i;
      if (this.suggestions.length > 0) this.value = getVal(this.suggestions, i);else this.value = this.fallback.value;
      this.fire();
    }
  }, {
    key: "complete",
    value: function complete(cb) {
      var _this = this;

      return _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var p, suggestions, l;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                p = _this.completing = _this.suggest(_this.input, _this.choices);
                _context.next = 3;
                return p;

              case 3:
                suggestions = _context.sent;

                if (!(_this.completing !== p)) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return");

              case 6:
                _this.suggestions = suggestions.map(function (s, i, arr) {
                  return {
                    title: getTitle(arr, i),
                    value: getVal(arr, i),
                    description: s.description
                  };
                });
                _this.completing = false;
                l = Math.max(suggestions.length - 1, 0);

                _this.moveSelect(Math.min(l, _this.select));

                cb && cb();

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this3 = this;

      this.input = '';
      this.complete(function () {
        _this3.moveSelect(_this3.initial !== void 0 ? _this3.initial : 0);

        _this3.render();
      });
      this.render();
    }
  }, {
    key: "exit",
    value: function exit() {
      if (this.clearFirst && this.input.length > 0) {
        this.reset();
      } else {
        this.done = this.exited = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write('\n');
        this.close();
      }
    }
  }, {
    key: "abort",
    value: function abort() {
      this.done = this.aborted = true;
      this.exited = false;
      this.fire();
      this.render();
      this.out.write('\n');
      this.close();
    }
  }, {
    key: "submit",
    value: function submit() {
      this.done = true;
      this.aborted = this.exited = false;
      this.fire();
      this.render();
      this.out.write('\n');
      this.close();
    }
  }, {
    key: "_",
    value: function _(c, key) {
      var s1 = this.input.slice(0, this.cursor);
      var s2 = this.input.slice(this.cursor);
      this.input = "".concat(s1).concat(c).concat(s2);
      this.cursor = s1.length + 1;
      this.complete(this.render);
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      if (this.cursor === 0) return this.bell();
      var s1 = this.input.slice(0, this.cursor - 1);
      var s2 = this.input.slice(this.cursor);
      this.input = "".concat(s1).concat(s2);
      this.complete(this.render);
      this.cursor = this.cursor - 1;
      this.render();
    }
  }, {
    key: "deleteForward",
    value: function deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length) return this.bell();
      var s1 = this.input.slice(0, this.cursor);
      var s2 = this.input.slice(this.cursor + 1);
      this.input = "".concat(s1).concat(s2);
      this.complete(this.render);
      this.render();
    }
  }, {
    key: "first",
    value: function first() {
      this.moveSelect(0);
      this.render();
    }
  }, {
    key: "last",
    value: function last() {
      this.moveSelect(this.suggestions.length - 1);
      this.render();
    }
  }, {
    key: "up",
    value: function up() {
      if (this.select === 0) {
        this.moveSelect(this.suggestions.length - 1);
      } else {
        this.moveSelect(this.select - 1);
      }

      this.render();
    }
  }, {
    key: "down",
    value: function down() {
      if (this.select === this.suggestions.length - 1) {
        this.moveSelect(0);
      } else {
        this.moveSelect(this.select + 1);
      }

      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.select === this.suggestions.length - 1) {
        this.moveSelect(0);
      } else this.moveSelect(this.select + 1);

      this.render();
    }
  }, {
    key: "nextPage",
    value: function nextPage() {
      this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
      this.render();
    }
  }, {
    key: "prevPage",
    value: function prevPage() {
      this.moveSelect(Math.max(this.select - this.limit, 0));
      this.render();
    }
  }, {
    key: "left",
    value: function left() {
      if (this.cursor <= 0) return this.bell();
      this.cursor = this.cursor - 1;
      this.render();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.cursor * this.scale >= this.rendered.length) return this.bell();
      this.cursor = this.cursor + 1;
      this.render();
    }
  }, {
    key: "renderOption",
    value: function renderOption(v, hovered, isStart, isEnd) {
      var desc;
      var prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : ' ';
      var title = hovered ? color.cyan().underline(v.title) : v.title;
      prefix = (hovered ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;

      if (v.description) {
        desc = " - ".concat(v.description);

        if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
          desc = '\n' + wrap(v.description, {
            margin: 3,
            width: this.out.columns
          });
        }
      }

      return prefix + ' ' + title + color.gray(desc || '');
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      if (this.closed) return;
      if (this.firstRender) this.out.write(cursor.hide);else this.out.write(clear(this.outputText, this.out.columns));

      _get(_getPrototypeOf(AutocompletePrompt.prototype), "render", this).call(this);

      var _entriesToDisplay = entriesToDisplay(this.select, this.choices.length, this.limit),
          startIndex = _entriesToDisplay.startIndex,
          endIndex = _entriesToDisplay.endIndex;

      this.outputText = [style.symbol(this.done, this.aborted, this.exited), color.bold(this.msg), style.delimiter(this.completing), this.done && this.suggestions[this.select] ? this.suggestions[this.select].title : this.rendered = this.transform.render(this.input)].join(' ');

      if (!this.done) {
        var suggestions = this.suggestions.slice(startIndex, endIndex).map(function (item, i) {
          return _this4.renderOption(item, _this4.select === i + startIndex, i === 0 && startIndex > 0, i + startIndex === endIndex - 1 && endIndex < _this4.choices.length);
        }).join('\n');
        this.outputText += "\n" + (suggestions || color.gray(this.fallback.title));
      }

      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }, {
    key: "fallback",
    set: function set(fb) {
      this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
    },
    get: function get() {
      var choice;
      if (typeof this._fb === 'number') choice = this.choices[this._fb];else if (typeof this._fb === 'string') choice = {
        title: this._fb
      };
      return choice || this._fb || {
        title: this.i18n.noMatches
      };
    }
  }]);

  return AutocompletePrompt;
}(Prompt);

module.exports = AutocompletePrompt;