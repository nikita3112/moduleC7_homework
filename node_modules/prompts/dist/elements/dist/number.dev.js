"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var color = require('kleur');

var Prompt = require('./prompt');

var _require = require('sisteransi'),
    cursor = _require.cursor,
    erase = _require.erase;

var _require2 = require('../util'),
    style = _require2.style,
    figures = _require2.figures,
    clear = _require2.clear,
    lines = _require2.lines;

var isNumber = /[0-9]/;

var isDef = function isDef(any) {
  return any !== undefined;
};

var round = function round(number, precision) {
  var factor = Math.pow(10, precision);
  return Math.round(number * factor) / factor;
};
/**
 * NumberPrompt Base Element
 * @param {Object} opts Options
 * @param {String} opts.message Message
 * @param {String} [opts.style='default'] Render style
 * @param {Number} [opts.initial] Default value
 * @param {Number} [opts.max=+Infinity] Max value
 * @param {Number} [opts.min=-Infinity] Min value
 * @param {Boolean} [opts.float=false] Parse input as floats
 * @param {Number} [opts.round=2] Round floats to x decimals
 * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys
 * @param {Function} [opts.validate] Validate function
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 * @param {String} [opts.error] The invalid error label
 */


var NumberPrompt =
/*#__PURE__*/
function (_Prompt) {
  _inherits(NumberPrompt, _Prompt);

  function NumberPrompt() {
    var _this3;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NumberPrompt);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(NumberPrompt).call(this, opts));
    _this3.transform = style.render(opts.style);
    _this3.msg = opts.message;
    _this3.initial = isDef(opts.initial) ? opts.initial : '';
    _this3["float"] = !!opts["float"];
    _this3.round = opts.round || 2;
    _this3.inc = opts.increment || 1;
    _this3.min = isDef(opts.min) ? opts.min : -Infinity;
    _this3.max = isDef(opts.max) ? opts.max : Infinity;
    _this3.errorMsg = opts.error || "Please Enter A Valid Value";

    _this3.validator = opts.validate || function () {
      return true;
    };

    _this3.color = "cyan";
    _this3.value = "";
    _this3.typed = "";
    _this3.lastHit = 0;

    _this3.render();

    return _this3;
  }

  _createClass(NumberPrompt, [{
    key: "parse",
    value: function parse(x) {
      return this["float"] ? parseFloat(x) : parseInt(x);
    }
  }, {
    key: "valid",
    value: function valid(c) {
      return c === "-" || c === "." && this["float"] || isNumber.test(c);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.typed = "";
      this.value = "";
      this.fire();
      this.render();
    }
  }, {
    key: "exit",
    value: function exit() {
      this.abort();
    }
  }, {
    key: "abort",
    value: function abort() {
      var x = this.value;
      this.value = x !== "" ? x : this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
  }, {
    key: "validate",
    value: function validate() {
      var _this = this;

      return _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var valid;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.validator(_this.value);

              case 2:
                valid = _context.sent;

                if (typeof valid === "string") {
                  _this.errorMsg = valid;
                  valid = false;
                }

                _this.error = !valid;

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "submit",
    value: function submit() {
      var _this2 = this;

      return _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var x;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this2.validate();

              case 2:
                if (!_this2.error) {
                  _context2.next = 7;
                  break;
                }

                _this2.color = "red";

                _this2.fire();

                _this2.render();

                return _context2.abrupt("return");

              case 7:
                x = _this2.value;
                _this2.value = x !== "" ? x : _this2.initial;
                _this2.done = true;
                _this2.aborted = false;
                _this2.error = false;

                _this2.fire();

                _this2.render();

                _this2.out.write("\n");

                _this2.close();

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  }, {
    key: "up",
    value: function up() {
      this.typed = "";

      if (this.value === '') {
        this.value = this.min - this.inc;
      }

      if (this.value >= this.max) return this.bell();
      this.value += this.inc;
      this.color = "cyan";
      this.fire();
      this.render();
    }
  }, {
    key: "down",
    value: function down() {
      this.typed = "";

      if (this.value === '') {
        this.value = this.min + this.inc;
      }

      if (this.value <= this.min) return this.bell();
      this.value -= this.inc;
      this.color = "cyan";
      this.fire();
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      var val = this.value.toString();
      if (val.length === 0) return this.bell();
      this.value = this.parse(val = val.slice(0, -1)) || "";

      if (this.value !== '' && this.value < this.min) {
        this.value = this.min;
      }

      this.color = "cyan";
      this.fire();
      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      this.value = this.initial;
      this.fire();
      this.render();
    }
  }, {
    key: "_",
    value: function _(c, key) {
      if (!this.valid(c)) return this.bell();
      var now = Date.now();
      if (now - this.lastHit > 1000) this.typed = ""; // 1s elapsed

      this.typed += c;
      this.lastHit = now;
      this.color = "cyan";
      if (c === ".") return this.fire();
      this.value = Math.min(this.parse(this.typed), this.max);
      if (this.value > this.max) this.value = this.max;
      if (this.value < this.min) this.value = this.min;
      this.fire();
      this.render();
    }
  }, {
    key: "render",
    value: function render() {
      if (this.closed) return;

      if (!this.firstRender) {
        if (this.outputError) this.out.write(cursor.down(lines(this.outputError, this.out.columns) - 1) + clear(this.outputError, this.out.columns));
        this.out.write(clear(this.outputText, this.out.columns));
      }

      _get(_getPrototypeOf(NumberPrompt.prototype), "render", this).call(this);

      this.outputError = ''; // Print prompt

      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), !this.done || !this.done && !this.placeholder ? color[this.color]().underline(this.rendered) : this.rendered].join(" "); // Print error

      if (this.error) {
        this.outputError += this.errorMsg.split("\n").reduce(function (a, l, i) {
          return a + "\n".concat(i ? " " : figures.pointerSmall, " ").concat(color.red().italic(l));
        }, "");
      }

      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }, {
    key: "value",
    set: function set(v) {
      if (!v && v !== 0) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render("".concat(this.initial)));
        this._value = "";
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render("".concat(round(v, this.round)));
        this._value = round(v, this.round);
      }

      this.fire();
    },
    get: function get() {
      return this._value;
    }
  }]);

  return NumberPrompt;
}(Prompt);

module.exports = NumberPrompt;