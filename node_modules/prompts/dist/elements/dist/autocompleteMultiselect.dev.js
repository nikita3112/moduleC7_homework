'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var color = require('kleur');

var _require = require('sisteransi'),
    cursor = _require.cursor;

var MultiselectPrompt = require('./multiselect');

var _require2 = require('../util'),
    clear = _require2.clear,
    style = _require2.style,
    figures = _require2.figures;
/**
 * MultiselectPrompt Base Element
 * @param {Object} opts Options
 * @param {String} opts.message Message
 * @param {Array} opts.choices Array of choice objects
 * @param {String} [opts.hint] Hint to display
 * @param {String} [opts.warn] Hint shown for disabled choices
 * @param {Number} [opts.max] Max choices
 * @param {Number} [opts.cursor=0] Cursor start position
 * @param {Stream} [opts.stdin] The Readable stream to listen to
 * @param {Stream} [opts.stdout] The Writable stream to write readline data to
 */


var AutocompleteMultiselectPrompt =
/*#__PURE__*/
function (_MultiselectPrompt) {
  _inherits(AutocompleteMultiselectPrompt, _MultiselectPrompt);

  function AutocompleteMultiselectPrompt() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AutocompleteMultiselectPrompt);

    opts.overrideRender = true;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutocompleteMultiselectPrompt).call(this, opts));
    _this.inputValue = '';
    _this.clear = clear('', _this.out.columns);
    _this.filteredOptions = _this.value;

    _this.render();

    return _this;
  }

  _createClass(AutocompleteMultiselectPrompt, [{
    key: "last",
    value: function last() {
      this.cursor = this.filteredOptions.length - 1;
      this.render();
    }
  }, {
    key: "next",
    value: function next() {
      this.cursor = (this.cursor + 1) % this.filteredOptions.length;
      this.render();
    }
  }, {
    key: "up",
    value: function up() {
      if (this.cursor === 0) {
        this.cursor = this.filteredOptions.length - 1;
      } else {
        this.cursor--;
      }

      this.render();
    }
  }, {
    key: "down",
    value: function down() {
      if (this.cursor === this.filteredOptions.length - 1) {
        this.cursor = 0;
      } else {
        this.cursor++;
      }

      this.render();
    }
  }, {
    key: "left",
    value: function left() {
      this.filteredOptions[this.cursor].selected = false;
      this.render();
    }
  }, {
    key: "right",
    value: function right() {
      if (this.value.filter(function (e) {
        return e.selected;
      }).length >= this.maxChoices) return this.bell();
      this.filteredOptions[this.cursor].selected = true;
      this.render();
    }
  }, {
    key: "delete",
    value: function _delete() {
      if (this.inputValue.length) {
        this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
        this.updateFilteredOptions();
      }
    }
  }, {
    key: "updateFilteredOptions",
    value: function updateFilteredOptions() {
      var _this2 = this;

      var currentHighlight = this.filteredOptions[this.cursor];
      this.filteredOptions = this.value.filter(function (v) {
        if (_this2.inputValue) {
          if (typeof v.title === 'string') {
            if (v.title.toLowerCase().includes(_this2.inputValue.toLowerCase())) {
              return true;
            }
          }

          if (typeof v.value === 'string') {
            if (v.value.toLowerCase().includes(_this2.inputValue.toLowerCase())) {
              return true;
            }
          }

          return false;
        }

        return true;
      });
      var newHighlightIndex = this.filteredOptions.findIndex(function (v) {
        return v === currentHighlight;
      });
      this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
      this.render();
    }
  }, {
    key: "handleSpaceToggle",
    value: function handleSpaceToggle() {
      var v = this.filteredOptions[this.cursor];

      if (v.selected) {
        v.selected = false;
        this.render();
      } else if (v.disabled || this.value.filter(function (e) {
        return e.selected;
      }).length >= this.maxChoices) {
        return this.bell();
      } else {
        v.selected = true;
        this.render();
      }
    }
  }, {
    key: "handleInputChange",
    value: function handleInputChange(c) {
      this.inputValue = this.inputValue + c;
      this.updateFilteredOptions();
    }
  }, {
    key: "_",
    value: function _(c, key) {
      if (c === ' ') {
        this.handleSpaceToggle();
      } else {
        this.handleInputChange(c);
      }
    }
  }, {
    key: "renderInstructions",
    value: function renderInstructions() {
      if (this.instructions === undefined || this.instructions) {
        if (typeof this.instructions === 'string') {
          return this.instructions;
        }

        return "\nInstructions:\n    ".concat(figures.arrowUp, "/").concat(figures.arrowDown, ": Highlight option\n    ").concat(figures.arrowLeft, "/").concat(figures.arrowRight, "/[space]: Toggle selection\n    [a,b,c]/delete: Filter choices\n    enter/return: Complete answer\n");
      }

      return '';
    }
  }, {
    key: "renderCurrentInput",
    value: function renderCurrentInput() {
      return "\nFiltered results for: ".concat(this.inputValue ? this.inputValue : color.gray('Enter something to filter'), "\n");
    }
  }, {
    key: "renderOption",
    value: function renderOption(cursor, v, i) {
      var title;
      if (v.disabled) title = cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);else title = cursor === i ? color.cyan().underline(v.title) : v.title;
      return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title;
    }
  }, {
    key: "renderDoneOrInstructions",
    value: function renderDoneOrInstructions() {
      if (this.done) {
        return this.value.filter(function (e) {
          return e.selected;
        }).map(function (v) {
          return v.title;
        }).join(', ');
      }

      var output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];

      if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
        output.push(color.yellow(this.warn));
      }

      return output.join(' ');
    }
  }, {
    key: "render",
    value: function render() {
      if (this.closed) return;
      if (this.firstRender) this.out.write(cursor.hide);

      _get(_getPrototypeOf(AutocompleteMultiselectPrompt.prototype), "render", this).call(this); // print prompt


      var prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(' ');

      if (this.showMinError) {
        prompt += color.red("You must select a minimum of ".concat(this.minSelected, " choices."));
        this.showMinError = false;
      }

      prompt += this.renderOptions(this.filteredOptions);
      this.out.write(this.clear + prompt);
      this.clear = clear(prompt, this.out.columns);
    }
  }]);

  return AutocompleteMultiselectPrompt;
}(MultiselectPrompt);

module.exports = AutocompleteMultiselectPrompt;