'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DatePart =
/*#__PURE__*/
function () {
  function DatePart(_ref) {
    var token = _ref.token,
        date = _ref.date,
        parts = _ref.parts,
        locales = _ref.locales;

    _classCallCheck(this, DatePart);

    this.token = token;
    this.date = date || new Date();
    this.parts = parts || [this];
    this.locales = locales || {};
  }

  _createClass(DatePart, [{
    key: "up",
    value: function up() {}
  }, {
    key: "down",
    value: function down() {}
  }, {
    key: "next",
    value: function next() {
      var currentIdx = this.parts.indexOf(this);
      return this.parts.find(function (part, idx) {
        return idx > currentIdx && part instanceof DatePart;
      });
    }
  }, {
    key: "setTo",
    value: function setTo(val) {}
  }, {
    key: "prev",
    value: function prev() {
      var parts = [].concat(this.parts).reverse();
      var currentIdx = parts.indexOf(this);
      return parts.find(function (part, idx) {
        return idx > currentIdx && part instanceof DatePart;
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      return String(this.date);
    }
  }]);

  return DatePart;
}();

module.exports = DatePart;