'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

var _defaultConfig = _interopRequireDefault(require('./defaultConfig'));

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var hasDeprecationWarnings = false;

var shouldSkipValidationForPath = function shouldSkipValidationForPath(path, key, denylist) {
  return denylist ? denylist.includes([].concat(_toConsumableArray(path), [key]).join('.')) : false;
};

var _validate = function _validate(config, exampleConfig, options) {
  var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  if (_typeof(config) !== 'object' || config == null || _typeof(exampleConfig) !== 'object' || exampleConfig == null) {
    return {
      hasDeprecationWarnings: hasDeprecationWarnings
    };
  }

  for (var key in config) {
    if (options.deprecatedConfig && key in options.deprecatedConfig && typeof options.deprecate === 'function') {
      var isDeprecatedKey = options.deprecate(config, key, options.deprecatedConfig, options);
      hasDeprecationWarnings = hasDeprecationWarnings || isDeprecatedKey;
    } else if (allowsMultipleTypes(key)) {
      var value = config[key];

      if (typeof options.condition === 'function' && typeof options.error === 'function') {
        if (key === 'maxWorkers' && !isOfTypeStringOrNumber(value)) {
          throw new _utils.ValidationError('Validation Error', "".concat(key, " has to be of type string or number"), "maxWorkers=50% or\nmaxWorkers=3");
        }
      }
    } else if (Object.hasOwnProperty.call(exampleConfig, key)) {
      if (typeof options.condition === 'function' && typeof options.error === 'function' && !options.condition(config[key], exampleConfig[key])) {
        options.error(key, config[key], exampleConfig[key], options, path);
      }
    } else if (shouldSkipValidationForPath(path, key, options.recursiveDenylist || options.recursiveBlacklist)) {// skip validating unknown options inside blacklisted paths
    } else {
      options.unknown && options.unknown(config, exampleConfig, key, options, path);
    }

    if (options.recursive && !Array.isArray(exampleConfig[key]) && (options.recursiveDenylist || options.recursiveBlacklist) && !shouldSkipValidationForPath(path, key, options.recursiveDenylist || options.recursiveBlacklist)) {
      _validate(config[key], exampleConfig[key], options, [].concat(_toConsumableArray(path), [key]));
    }
  }

  return {
    hasDeprecationWarnings: hasDeprecationWarnings
  };
};

var allowsMultipleTypes = function allowsMultipleTypes(key) {
  return key === 'maxWorkers';
};

var isOfTypeStringOrNumber = function isOfTypeStringOrNumber(value) {
  return typeof value === 'number' || typeof value === 'string';
};

var validate = function validate(config, options) {
  hasDeprecationWarnings = false; // Preserve default denylist entries even with user-supplied denylist

  var combinedDenylist = [].concat(_toConsumableArray(_defaultConfig["default"].recursiveDenylist || []), _toConsumableArray(options.recursiveDenylist || options.recursiveBlacklist || []));
  var defaultedOptions = Object.assign(_objectSpread({}, _defaultConfig["default"], {}, options, {
    recursiveDenylist: combinedDenylist,
    title: options.title || _defaultConfig["default"].title
  }));

  var _validate2 = _validate(config, options.exampleConfig, defaultedOptions),
      hdw = _validate2.hasDeprecationWarnings;

  return {
    hasDeprecationWarnings: hdw,
    isValid: true
  };
};

var _default = validate;
exports["default"] = _default;