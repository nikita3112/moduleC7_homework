'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.createDidYouMeanMessage = exports.logValidationWarning = exports.ValidationError = exports.formatPrettyObject = exports.format = exports.WARNING = exports.ERROR = exports.DEPRECATION = void 0;

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

function _leven() {
  var data = _interopRequireDefault(require('leven'));

  _leven = function _leven() {
    return data;
  };

  return data;
}

function _prettyFormat() {
  var data = _interopRequireDefault(require('pretty-format'));

  _prettyFormat = function _prettyFormat() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var BULLET = _chalk()["default"].bold("\u25CF");

var DEPRECATION = "".concat(BULLET, " Deprecation Warning");
exports.DEPRECATION = DEPRECATION;
var ERROR = "".concat(BULLET, " Validation Error");
exports.ERROR = ERROR;
var WARNING = "".concat(BULLET, " Validation Warning");
exports.WARNING = WARNING;

var format = function format(value) {
  return typeof value === 'function' ? value.toString() : (0, _prettyFormat()["default"])(value, {
    min: true
  });
};

exports.format = format;

var formatPrettyObject = function formatPrettyObject(value) {
  return typeof value === 'function' ? value.toString() : JSON.stringify(value, null, 2).split('\n').join('\n    ');
};

exports.formatPrettyObject = formatPrettyObject;

var ValidationError =
/*#__PURE__*/
function (_Error) {
  _inherits(ValidationError, _Error);

  function ValidationError(name, message, comment) {
    var _this;

    _classCallCheck(this, ValidationError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValidationError).call(this));

    _defineProperty(_assertThisInitialized(_this), 'name', void 0);

    _defineProperty(_assertThisInitialized(_this), 'message', void 0);

    comment = comment ? '\n\n' + comment : '\n';
    _this.name = '';
    _this.message = _chalk()["default"].red(_chalk()["default"].bold(name) + ':\n\n' + message + comment);
    Error.captureStackTrace(_assertThisInitialized(_this), function () {});
    return _this;
  }

  return ValidationError;
}(_wrapNativeSuper(Error));

exports.ValidationError = ValidationError;

var logValidationWarning = function logValidationWarning(name, message, comment) {
  comment = comment ? '\n\n' + comment : '\n';
  console.warn(_chalk()["default"].yellow(_chalk()["default"].bold(name) + ':\n\n' + message + comment));
};

exports.logValidationWarning = logValidationWarning;

var createDidYouMeanMessage = function createDidYouMeanMessage(unrecognized, allowedOptions) {
  var suggestion = allowedOptions.find(function (option) {
    var steps = (0, _leven()["default"])(option, unrecognized);
    return steps < 3;
  });
  return suggestion ? "Did you mean ".concat(_chalk()["default"].bold(format(suggestion)), "?") : '';
};

exports.createDidYouMeanMessage = createDidYouMeanMessage;