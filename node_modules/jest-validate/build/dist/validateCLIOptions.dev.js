'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = validateCLIOptions;
exports.DOCUMENTATION_NOTE = void 0;

function _camelcase() {
  var data = _interopRequireDefault(require('camelcase'));

  _camelcase = function _camelcase() {
    return data;
  };

  return data;
}

function _chalk() {
  var data = _interopRequireDefault(require('chalk'));

  _chalk = function _chalk() {
    return data;
  };

  return data;
}

var _defaultConfig = _interopRequireDefault(require('./defaultConfig'));

var _deprecated = require('./deprecated');

var _utils = require('./utils');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var BULLET = _chalk()["default"].bold("\u25CF");

var DOCUMENTATION_NOTE = "  ".concat(_chalk()["default"].bold('CLI Options Documentation:'), "\n  https://jestjs.io/docs/en/cli.html\n");
exports.DOCUMENTATION_NOTE = DOCUMENTATION_NOTE;

var createCLIValidationError = function createCLIValidationError(unrecognizedOptions, allowedOptions) {
  var title = "".concat(BULLET, " Unrecognized CLI Parameter");
  var message;
  var comment = "  ".concat(_chalk()["default"].bold('CLI Options Documentation'), ":\n") + "  https://jestjs.io/docs/en/cli.html\n";

  if (unrecognizedOptions.length === 1) {
    var unrecognized = unrecognizedOptions[0];
    var didYouMeanMessage = unrecognized.length > 1 ? (0, _utils.createDidYouMeanMessage)(unrecognized, Array.from(allowedOptions)) : '';
    message = "  Unrecognized option ".concat(_chalk()["default"].bold((0, _utils.format)(unrecognized)), ".") + (didYouMeanMessage ? " ".concat(didYouMeanMessage) : '');
  } else {
    title += 's';
    message = "  Following options were not recognized:\n" + "  ".concat(_chalk()["default"].bold((0, _utils.format)(unrecognizedOptions)));
  }

  return new _utils.ValidationError(title, message, comment);
};

var logDeprecatedOptions = function logDeprecatedOptions(deprecatedOptions, deprecationEntries, argv) {
  deprecatedOptions.forEach(function (opt) {
    (0, _deprecated.deprecationWarning)(argv, opt, deprecationEntries, _objectSpread({}, _defaultConfig["default"], {
      comment: DOCUMENTATION_NOTE
    }));
  });
};

function validateCLIOptions(argv, options) {
  var rawArgv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var yargsSpecialOptions = ['$0', '_', 'help', 'h'];
  var deprecationEntries = options.deprecationEntries || {};
  var allowedOptions = Object.keys(options).reduce(function (acc, option) {
    return acc.add(option).add(options[option].alias || option);
  }, new Set(yargsSpecialOptions));
  var unrecognizedOptions = Object.keys(argv).filter(function (arg) {
    return !allowedOptions.has((0, _camelcase()["default"])(arg)) && !allowedOptions.has(arg) && (!rawArgv.length || rawArgv.includes(arg));
  }, []);

  if (unrecognizedOptions.length) {
    throw createCLIValidationError(unrecognizedOptions, allowedOptions);
  }

  var CLIDeprecations = Object.keys(deprecationEntries).reduce(function (acc, entry) {
    if (options[entry]) {
      acc[entry] = deprecationEntries[entry];
      var alias = options[entry].alias;

      if (alias) {
        acc[alias] = deprecationEntries[entry];
      }
    }

    return acc;
  }, {});
  var deprecations = new Set(Object.keys(CLIDeprecations));
  var deprecatedOptions = Object.keys(argv).filter(function (arg) {
    return deprecations.has(arg) && argv[arg] != null;
  });

  if (deprecatedOptions.length) {
    logDeprecatedOptions(deprecatedOptions, CLIDeprecations, argv);
  }

  return true;
}